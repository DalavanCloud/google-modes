(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z0-9_]+(?![a-zA-Z¡-￿_0-9])|[A-Z]+[A-Z0-9]*_[A-Z0-9_]*(?![a-zA-Z¡-￿_0-9]))/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\-\>|(?!\.\.)\.)/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, [1, "\n", "\t", " "], [0, /^(?!\*\/|\{?\@[a-zA-Z¡-￿_])/, /^[^]/], /^(?:\.\.\.)?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^new(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^\@[a-zA-Z¡-￿_]+/, /^(?!\>)/, /^(?:\.\.\.|\(|\=|\>|\,)/, /^(?:\*|\&\&|\&)/];
  var nodes = [
    [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
     0, 2],
    [/^[^]/, 0],
    [1, 9, 3],
    [2, 12, 4, {"name":"Statement"}],
    [0, 2,
     0, 1],
    [3, "keyword", e[5], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[38], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[51], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "type", e[32], -1,
     3, "type", e[33], -1,
     3, "keyword", e[31], -1,
     3, "atom", e[50], -1,
     3, "meta", e[17], -1,
     1, 138, -1,
     3, "number", e[23], -1,
     2, 145, -1, {"name":"string","token":"string"},
     2, 150, -1, {"name":"prefixOp","token":"operator"},
     3, "operator", e[39], -1,
     3, "operator", e[41], -1,
     2, 151, -1, {"name":"comment","token":"comment"},
     3, "keyword", e[1], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[47], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[48], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[27], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[45], -1,
     3, "keyword", e[46], -1,
     3, "keyword", e[52], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[22], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[49], -1,
     3, "keyword", e[36], -1,
     /^[^]/, -1],
    ["#", 7],
    [2, 151, 7, {"name":"comment","token":"comment"},
     "\\", 8,
     /^./, 7,
     0, -1],
    [/^[^]/, 7],
    [/^[ \t]/, 9,
     "\n", 10,
     2, 151, 9, {"name":"comment","token":"comment"},
     0, -1],
    [/^[ \t]*/, 11],
    [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
     0, 9],
    [1, 156, -1,
     1, 173, -1,
     3, "keyword", e[0], 13,
     3, "keyword", e[1], 17,
     3, "keyword", e[2], 25,
     3, "keyword", e[3], 29,
     3, "keyword", e[4], 44,
     1, 184, -1,
     2, 197, -1, {"name":"Template"},
     [7, "constructorAhead"], 50,
     3, "keyword", e[5], 53,
     3, "keyword", e[6], 57,
     3, "keyword", e[7], 58,
     3, "keyword", e[8], 59,
     3, "keyword", e[9], 83,
     3, "keyword", e[10], 88,
     2, 206, -1, {"name":"Block"},
     3, "keyword", e[11], 92,
     3, "keyword", e[12], 94,
     3, "keyword", e[13], 98,
     3, "keyword", e[14], 102,
     3, "keyword", e[15], 108,
     3, "keyword", e[16], 109,
     [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 210]], 108,
     3, "meta", e[17], 112,
     2, 211, 120, {"name":"DeclType"},
     ";", -1,
     1, 228, 136],
    [1, 9, 14],
    [2, 233, 15, {"name":"ArgList"}],
    [1, 9, 16],
    [";", -1],
    [1, 9, 18],
    [1, 238, 19,
     0, 19],
    [1, 9, 20],
    [3, "operator", "=", 21,
     2, 241, -1, {"name":"NamespaceBlock"}],
    [1, 9, 22],
    [1, 138, 23],
    [1, 9, 24],
    [";", -1],
    [1, 9, 26],
    [1, 228, 27],
    [1, 9, 28],
    [";", -1],
    [1, 9, 30],
    [2, 206, 31, {"name":"Block"}],
    [1, 9, 32],
    [3, "keyword", e[18], 33,
     0, -1],
    [1, 9, 34],
    ["(", 35],
    [1, 9, 36],
    [1, 245, 37],
    [1, 9, 38],
    [1, 258, 39,
     0, 39],
    [1, 9, 40],
    [")", 41],
    [1, 9, 42],
    [2, 206, 43, {"name":"Block"}],
    [1, 9, 32],
    [1, 9, 45],
    ["{", 46],
    [1, 9, 47],
    [2, 145, 48, {"name":"string","token":"string"}],
    [1, 9, 49],
    ["}", -1],
    [1, 238, 51],
    [1, 9, 52],
    [2, 270, -1, {"name":"FunctionDef"}],
    [1, 9, 54],
    [3, "type def", e[19], 55,
     0, 55],
    [1, 9, 56],
    [2, 303, -1, {"name":"BlockOf"},
     0, -1],
    [1, 9, 60],
    [1, 9, 61],
    [1, 9, 62],
    ["(", 63],
    [2, 321, 64, {"name":"CondExpr"}],
    [2, 12, 65, {"name":"Statement"}],
    [1, 9, 66],
    [1, 9, 67],
    [1, 9, 68],
    [2, 12, 69, {"name":"Statement"}],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[7], 70],
    [1, 9, 71],
    [1, 9, 72],
    [1, 228, 73,
     0, 73],
    [2, 321, 74, {"name":"CondExpr"}],
    [1, 9, 75],
    [1, 9, 76],
    [";", 77],
    [";", -1],
    [1, 9, 78],
    [1, 228, 79,
     0, 79],
    [1, 9, 80],
    [")", 81],
    [1, 9, 82],
    [2, 12, -1, {"name":"Statement"}],
    [1, 9, 84],
    [2, 321, 85, {"name":"CondExpr"}],
    [1, 9, 86],
    [2, 12, 87, {"name":"Statement"}],
    [2, 326, -1, {"name":"Alternative"}],
    [1, 9, 89],
    [2, 321, 90, {"name":"CondExpr"}],
    [1, 9, 91],
    [2, 206, -1, {"name":"Block"}],
    [1, 9, 93],
    [";", -1],
    [1, 9, 95],
    [e[19], 96],
    [1, 9, 97],
    [";", -1],
    [1, 9, 99],
    [1, 228, 100,
     0, 100],
    [1, 9, 101],
    [";", -1],
    [1, 9, 103],
    [1, 238, 104,
     0, 104],
    [1, 9, 105],
    [2, 330, 106, {"name":"BlockOf"},
     0, 106],
    [1, 9, 107],
    [";", -1],
    [1, 9, 110],
    [1, 9, 111],
    [":", -1],
    [1, 228, 108],
    [1, 9, 113],
    [2, 340, 114, {"name":"ParenTokens"},
     0, 114],
    [1, 9, 115],
    [2, 206, 116, {"name":"Block"},
     0, 117,
     0, 116],
    [1, 9, 118],
    [1, 344, 119,
     0, 116],
    [/^\;?/, -1],
    [1, 9, 117],
    [1, 9, 121],
    [1, 258, 122],
    [1, 9, 123],
    [3, "meta", e[17], 124,
     [5, 365], 125,
     1, 369, 126,
     0, 126],
    [1, 9, 127],
    [2, 270, -1, {"name":"FunctionDef"}],
    [1, 9, 128],
    [2, 340, 129, {"name":"ParenTokens"},
     0, 129],
    [",", 130,
     ";", -1],
    [1, 9, 131],
    [1, 9, 132],
    [/^\;?/, -1],
    [1, 238, 133],
    [1, 9, 134],
    [1, 369, 135,
     0, 135],
    [1, 9, 128],
    [1, 9, 137],
    [";", -1],
    [0, 139,
     3, "type", e[20], -1,
     2, 372, 144, {"name":"unqualifiedVariableName","token":"variable"}],
    [1, 373, 140],
    [0, 139,
     3, "type qualified", e[20], 141,
     2, 378, 141, {"name":"qualifiedVariableName","token":"qualified"}],
    [2, 379, 142, {"name":"TemplateArgs"},
     0, -1],
    [/^(?=\:\:)/, 143,
     0, -1],
    [1, 138, -1],
    [2, 379, -1, {"name":"TemplateArgs"},
     0, -1],
    [/^R\"(?:(?!\().)*\(/, 146,
     /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 147],
    [[0, [7, "rawStringContinues"], /^[^]/], 146,
     "\"", -1],
    [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
     "\"", 148],
    ["\\", 149,
     [0, /^(?!\")/, /^[^]/], 148,
     "\"", -1],
    [/^[^]/, 148],
    [3, "keyword", e[21], -1,
     /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
    [/^\/\*\*(?!\/)/, 152,
     "/*", 155,
     /^\/\/.*/, -1],
    [e[43], 153,
     0, 154],
    [0, 152,
     0, 152],
    [2, 384, 154, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 155,
     "*/", -1],
    [3, "keyword", e[22], 158,
     [0, [5, 388], "["], 159],
    [0, 156,
     0, -1],
    [1, 9, 160],
    [1, 9, 161],
    ["(", 162],
    ["[", 163],
    [1, 9, 164],
    [1, 9, 165],
    [3, "number", e[23], 166],
    [1, 392, 167],
    [1, 9, 168],
    [1, 9, 169],
    [")", 170],
    ["]", 171],
    [1, 9, 157],
    [1, 9, 172],
    ["]", 170],
    [3, "keyword", e[24], 174,
     3, "keyword", e[14], 174],
    [1, 9, 175],
    [1, 156, 176,
     0, 176],
    [1, 9, 177],
    [3, "type def", e[19], 178],
    [1, 9, 179],
    [":", 180,
     0, 182],
    [1, 9, 181],
    [1, 414, 182],
    [1, 9, 183],
    [";", -1,
     2, 428, -1, {"name":"ClassBody"}],
    [3, "keyword", e[25], 185],
    [1, 9, 186],
    [3, "keyword", e[21], 187,
     3, "keyword", e[1], 188,
     0, 188],
    [1, 9, 189],
    [1, 9, 190],
    [1, 245, 191],
    [1, 138, 191],
    [1, 9, 192],
    [3, "operator", "=", 193,
     0, 195],
    [1, 9, 194],
    [1, 245, 195],
    [1, 9, 196],
    [";", -1],
    [3, "keyword", e[26], 198,
     0, 198],
    [1, 9, 199],
    [3, "keyword", e[27], 200],
    [1, 9, 201],
    [2, 432, 202, {"name":"TemplateParams"}],
    [1, 9, 203],
    [1, 9, 204],
    [1, 9, 205],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 207],
    [1, 9, 208],
    [2, 12, 209, {"name":"Statement"},
     "}", -1],
    [1, 9, 208],
    [e[42], 210,
     /^\:(?!\:)/, -1],
    [0, 212,
     0, 213,
     3, "keyword", e[28], 224,
     [5, 437], 225],
    [3, "keyword", e[29], 214,
     3, "keyword", e[30], 214,
     3, "keyword", e[31], 214],
    [3, "type", e[32], 215],
    [1, 9, 216],
    [1, 9, 217],
    [0, 212,
     3, "keyword", e[28], 218,
     0, 219,
     1, 442, 218],
    [0, 213,
     3, "type", e[33], 218,
     0, 218],
    [1, 9, 220],
    [3, "type", e[32], 221],
    [1, 447, 222,
     0, -1],
    [0, 219,
     1, 9, 223,
     0, 218],
    [1, 9, 220],
    [3, "type", e[33], 218],
    [1, 9, 226],
    [1, 442, 224],
    [1, 447, 227,
     0, -1],
    [1, 9, 226],
    [1, 454, 229,
     1, 471, 230],
    [1, 9, 228],
    [1, 9, 231],
    [1, 344, 232,
     0, -1],
    [1, 9, 231],
    ["(", 234],
    [1, 9, 235],
    [1, 504, 236],
    [1, 9, 237],
    [")", -1],
    [0, 239,
     3, "def", e[34], -1],
    [1, 510, 240],
    [0, 239,
     3, "qualified def", e[34], -1],
    ["{", 242],
    [1, 9, 243],
    [2, 12, 244, {"name":"Statement"},
     "}", -1],
    [1, 9, 243],
    [3, "keyword", e[21], 246,
     0, 248],
    [1, 9, 247],
    [1, 245, -1],
    [3, "keyword", e[29], 249,
     3, "keyword", e[30], 249,
     3, "keyword", e[31], 249,
     3, "keyword", e[14], 250,
     0, 250],
    [1, 9, 248],
    [1, 9, 251],
    [3, "keyword", e[28], 252,
     0, 253,
     1, 442, 252],
    [1, 9, 254],
    [3, "type", e[32], 255],
    [1, 447, 256,
     0, -1],
    [0, 253,
     1, 9, 257,
     0, 252],
    [1, 9, 254],
    [3, "type", e[33], 252],
    [0, 259,
     "(", 266],
    [e[57], 260,
     1, 238, 261],
    [1, 9, 259],
    [1, 9, 262],
    ["[", 263,
     0, -1],
    [1, 9, 264],
    ["]", 265],
    [1, 9, 262],
    [1, 9, 267],
    [1, 258, 268],
    [1, 9, 269],
    [")", -1],
    [2, 515, 271, {"name":"ParamList"}],
    [1, 9, 272],
    [3, "keyword", e[31], 273,
     /^(?:\&|\&\&)?/, 274],
    [1, 9, 272],
    [1, 9, 275],
    [3, "keyword", e[35], 276,
     3, "keyword", e[2], 277,
     0, 288],
    [1, 9, 278],
    [1, 9, 279],
    ["(", 280,
     0, 288],
    ["(", 281],
    [1, 9, 282],
    [1, 9, 283],
    [1, 228, 284],
    [1, 520, 285],
    [1, 9, 286],
    [1, 9, 287],
    [")", 288],
    [")", 288],
    [1, 9, 289],
    [1, 156, 290,
     0, 290],
    [1, 9, 291],
    ["->", 292,
     0, 294],
    [1, 9, 293],
    [1, 245, 294],
    [1, 9, 295],
    [3, "keyword", e[36], 296,
     2, 526, 297, {"name":"InitializerList"},
     0, 297],
    [1, 9, 295],
    [1, 9, 298],
    [";", -1,
     2, 206, -1, {"name":"Block"},
     3, "operator", "=", 299],
    [1, 9, 300],
    [3, "keyword", e[15], 301,
     3, "keyword", e[37], 301],
    [1, 9, 302],
    [";", -1],
    ["{", 304],
    [1, 9, 305],
    [1, 529, 306,
     0, 319],
    [1, 9, 307],
    [3, "operator", "=", 308,
     0, 309],
    [1, 9, 310],
    [1, 9, 311],
    [1, 228, 309],
    [",", 312,
     0, 319],
    [1, 9, 313],
    [1, 529, 314,
     0, 315],
    [1, 9, 316],
    [1, 9, 311],
    [3, "operator", "=", 317,
     0, 315],
    [1, 9, 318],
    [1, 228, 315],
    [1, 9, 320],
    ["}", -1],
    ["(", 322],
    [1, 9, 323],
    [1, 228, 324,
     0, 324],
    [1, 9, 325],
    [")", -1],
    [1, 9, 327],
    [3, "keyword", e[38], 328,
     0, -1],
    [1, 9, 329],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 331],
    [1, 9, 332],
    [1, 532, 333,
     0, 338],
    [1, 9, 334],
    [";", 335,
     0, 338],
    [1, 9, 336],
    [1, 532, 337,
     0, 337],
    [1, 9, 334],
    [1, 9, 339],
    ["}", -1],
    ["(", 341],
    [1, 9, 342],
    [1, 543, 343,
     ")", -1],
    [1, 9, 342],
    [2, 548, -1, {"name":"BlockOf"},
     2, 233, 345, {"name":"ArgList"},
     e[40], 347,
     2, 233, -1, {"name":"ArgList"},
     "[", 351,
     3, "operator", e[39], -1,
     e[40], 355,
     3, "operator", e[41], 357,
     "?", 359],
    [1, 9, 346],
    [2, 206, -1, {"name":"Block"},
     0, -1],
    [1, 9, 348],
    [2, 558, 349, {"name":"fieldName","token":"property"}],
    [1, 9, 350],
    [2, 379, -1, {"name":"TemplateArgs"},
     0, -1],
    [1, 9, 352],
    [1, 228, 353],
    [1, 9, 354],
    ["]", -1],
    [1, 9, 356],
    [2, 558, -1, {"name":"fieldName","token":"property"}],
    [1, 9, 358],
    [1, 228, -1],
    [1, 9, 360],
    [1, 228, 361],
    [1, 9, 362],
    [":", 363],
    [1, 9, 364],
    [1, 228, -1],
    ["(", 366],
    [1, 9, 367],
    [")", -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "type", e[32], -1,
     3, "keyword", e[28], -1,
     [5, 437], 368],
    [1, 442, -1],
    [3, "operator", "=", 370,
     2, 548, -1, {"name":"BlockOf"},
     2, 233, -1, {"name":"ArgList"}],
    [1, 9, 371],
    [1, 228, -1],
    [3, "callee", e[53], -1,
     e[19], -1],
    ["::", -1,
     [5, 559], 374],
    [3, "variable qualifier", e[19], 375],
    [2, 379, 376, {"name":"TemplateArgs"},
     0, 376],
    [1, 9, 377],
    ["::", -1],
    [2, 372, -1, {"name":"unqualifiedVariableName","token":"variable"}],
    ["<", 380],
    [1, 9, 381],
    [1, 563, 382],
    [1, 9, 383],
    [">", -1],
    [3, "tag", /^\@(?:param|throws|exception)(?![a-zA-Z¡-￿_])/, 385,
     3, "tag", e[54], 386,
     2, 595, 386, {"name":"doccomment.braced"}],
    [e[42], 385,
     3, "def", /^[a-zA-Z¡-￿_\.]+/, 386,
     0, 386],
    [e[43], 387,
     0, -1],
    [0, 386,
     0, 386],
    ["[", 389],
    [1, 9, 390],
    [" ", 391,
     "[", -1],
    [1, 9, 390],
    [1, 599, 393,
     3, "meta", e[19], 394,
     0, -1],
    [1, 9, 392],
    [1, 9, 395],
    ["(", 396,
     0, 397],
    [1, 9, 398],
    [1, 9, 399],
    [1, 604, 400,
     ")", 397],
    [e[44], 401],
    [1, 9, 398],
    [1, 9, 402],
    [",", 403,
     0, -1],
    [1, 9, 404],
    [1, 599, 405,
     3, "meta", e[19], 406],
    [1, 9, 404],
    [1, 9, 407],
    ["(", 408,
     0, 409],
    [1, 9, 410],
    [1, 9, 411],
    [1, 604, 412,
     ")", 409],
    [e[44], 413],
    [1, 9, 410],
    [1, 9, 402],
    [3, "keyword", e[45], 415,
     0, 415,
     0, -1],
    [1, 9, 416],
    [3, "keyword", e[46], 417,
     0, 417],
    [1, 9, 418],
    [1, 245, 419],
    [1, 9, 420],
    [",", 421,
     0, -1],
    [1, 9, 422],
    [3, "keyword", e[45], 423,
     0, 423],
    [1, 9, 424],
    [3, "keyword", e[46], 425,
     0, 425],
    [1, 9, 426],
    [1, 245, 427],
    [1, 9, 420],
    ["{", 429],
    [1, 9, 430],
    [2, 614, 431, {"name":"ClassItem"},
     "}", -1],
    [1, 9, 430],
    ["<", 433],
    [1, 9, 434],
    [1, 625, 435],
    [1, 9, 436],
    [">", -1],
    [/^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, 438],
    [1, 442, 439],
    [1, 9, 440],
    [1, 447, 441,
     /^[a-zA-Z¡-￿_]/, -1],
    [1, 9, 440],
    [3, "keyword", e[21], 443,
     0, 444],
    [1, 9, 444],
    [0, 445,
     3, "type", e[19], -1],
    [1, 651, 446],
    [0, 445,
     3, "type qualified", e[19], -1],
    [2, 379, -1, {"name":"TemplateArgs"},
     "::", 448,
     1, 156, -1,
     "[", 450,
     /^[\*\&]/, -1,
     3, "keyword", e[31], -1],
    [1, 9, 449],
    [3, "type qualified", e[19], -1],
    [1, 9, 451],
    [3, "number", e[23], 452,
     0, 452],
    [1, 9, 453],
    ["]", -1],
    [3, "keyword", e[37], 455,
     3, "keyword", e[47], 459,
     2, 150, -1, {"name":"prefixOp","token":"operator"}],
    [1, 9, 456],
    ["[", 457,
     0, -1],
    [1, 9, 458],
    ["]", -1],
    [1, 9, 460],
    ["[", 461,
     0, 462],
    [1, 9, 463],
    [1, 9, 464],
    ["]", 462],
    ["(", 465,
     0, 466],
    [1, 9, 467],
    [1, 9, 468],
    [1, 228, 469],
    [1, 156, -1,
     0, -1],
    [1, 9, 470],
    [")", 466],
    [3, "keyword", e[48], -1,
     [0, [5, 656], "["], 472,
     3, "keyword", e[49], 478,
     2, 660, 490, {"name":"ParenExpr"},
     3, "atom", e[50], -1,
     3, "number", e[23], -1,
     2, 145, -1, {"name":"string","token":"string"},
     2, 548, -1, {"name":"BlockOf"},
     3, "keyword", e[51], 492,
     1, 138, -1],
    [1, 9, 473],
    [1, 665, 474],
    [1, 9, 475],
    ["]", 476],
    [1, 9, 477],
    [2, 270, -1, {"name":"FunctionDef"},
     2, 206, -1, {"name":"Block"}],
    [1, 9, 479],
    ["<", 480],
    [1, 9, 481],
    [1, 245, 482],
    [1, 9, 483],
    [">", 484],
    [1, 9, 485],
    ["(", 486],
    [1, 9, 487],
    [1, 228, 488],
    [1, 9, 489],
    [")", -1],
    [1, 9, 491],
    [1, 228, -1,
     0, -1],
    [1, 9, 493],
    ["(", 494,
     e[44], 495],
    [1, 9, 496],
    [1, 9, 497],
    [1, 245, 498],
    [1, 228, 499],
    [1, 9, 500],
    [1, 9, 501],
    [")", 499],
    [3, "meta", e[17], 502],
    [1, 9, 503],
    [2, 340, -1, {"name":"ParenTokens"},
     0, -1],
    [1, 228, 505,
     0, -1],
    [1, 9, 506],
    [",", 507,
     0, -1],
    [1, 9, 508],
    [1, 228, 509],
    [1, 9, 506],
    ["::", -1,
     [5, 675], 511],
    [3, "qualifier def", e[19], 512],
    [2, 379, 513, {"name":"TemplateArgs"},
     0, 513],
    [1, 9, 514],
    ["::", -1],
    ["(", 516],
    [1, 9, 517],
    [1, 679, 518],
    [1, 9, 519],
    [")", -1],
    [1, 245, 521,
     0, -1],
    [1, 9, 522],
    [",", 523,
     0, -1],
    [1, 9, 524],
    [1, 245, 525],
    [1, 9, 522],
    [":", 527],
    [1, 9, 528],
    [1, 693, -1],
    [3, "keyword", e[52], 530,
     3, "def property", e[19], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[41], -1,
     2, 150, -1, {"name":"prefixOp","token":"operator"},
     /^(?:\(\)|\[\])/, -1,
     3, "keyword", e[47], 531,
     3, "keyword", e[37], 531],
    [/^(?:\[\])?/, -1],
    [1, 245, 533],
    [1, 9, 534],
    [2, 558, 535, {"name":"fieldName","token":"property"},
     0, 535],
    [1, 9, 536],
    [":", 537,
     "[", 538,
     0, -1],
    [1, 9, 539],
    [1, 9, 540],
    [3, "number", e[23], -1],
    [3, "number", e[23], 541,
     0, 541],
    [1, 9, 542],
    ["]", -1],
    [2, 340, -1, {"name":"ParenTokens"},
     2, 699, -1, {"name":"BracketTokens"},
     2, 703, -1, {"name":"BraceTokens"},
     3, "keyword", /^(?:auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|volatile|do|if|static|while|asm|alignof)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "keyword", /^(?:alignas|asm|bool|catch|class|compl|concept|constexpr|const_cast|decltype|delete|dynamic_cast|explicit|export|friend|import|module|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|reinterpret_cast|requires|static_assert|static_cast|synchronized|template|this|throw|try|typedef|typeid|using|virtual|wchar_t)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "atom", e[50], -1,
     3, "number", e[23], -1,
     2, 145, -1, {"name":"string","token":"string"},
     3, "operator", e[41], -1,
     2, 150, -1, {"name":"prefixOp","token":"operator"},
     0, 544,
     2, 372, -1, {"name":"unqualifiedVariableName","token":"variable"},
     /^(?![\)\]\}])./, -1],
    ["::", 545,
     /^(?=[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*\:\:)/, 546],
    [0, 544,
     2, 378, -1, {"name":"qualifiedVariableName","token":"qualified"}],
    [3, "variable qualifier", e[19], 547],
    ["::", 545],
    ["{", 549],
    [1, 9, 550],
    [1, 228, 551,
     0, 556],
    [1, 9, 552],
    [",", 553,
     0, 556],
    [1, 9, 554],
    [1, 228, 555,
     0, 555],
    [1, 9, 552],
    [1, 9, 557],
    ["}", -1],
    [3, "callee", e[53], -1,
     e[19], -1],
    [3, "variable qualifier", e[19], 560],
    [1, 707, 561,
     0, 561],
    [1, 9, 562],
    ["::", -1],
    [3, "keyword", e[27], 564,
     0, 565,
     0, 566,
     0, -1],
    [1, 9, 567],
    [1, 9, 568],
    [3, "keyword", e[29], 569,
     3, "keyword", e[30], 569,
     [5, 712], 570,
     1, 715, 571],
    [2, 379, 565, {"name":"TemplateArgs"}],
    [3, "keyword", e[24], 572,
     3, "keyword", e[21], 572],
    [1, 9, 566],
    [1, 245, 573],
    [1, 9, 574],
    [1, 9, 575],
    [1, 9, 576],
    [e[44], 577],
    [1, 245, 577],
    [2, 515, 571, {"name":"ParamList"},
     1, 369, 571,
     0, 571],
    [1, 9, 578],
    [",", 579,
     0, -1],
    [1, 9, 580],
    [3, "keyword", e[27], 581,
     0, 582,
     0, 583],
    [1, 9, 584],
    [1, 9, 585],
    [3, "keyword", e[29], 586,
     3, "keyword", e[30], 586,
     [5, 721], 587,
     1, 715, 588],
    [2, 379, 582, {"name":"TemplateArgs"}],
    [3, "keyword", e[24], 589,
     3, "keyword", e[21], 589],
    [1, 9, 583],
    [1, 245, 590],
    [1, 9, 591],
    [1, 9, 592],
    [1, 9, 593],
    [e[44], 594],
    [1, 245, 594],
    [2, 515, 588, {"name":"ParamList"},
     1, 369, 588,
     0, 588],
    [1, 9, 578],
    ["{", 596],
    [3, "tag", e[54], 597],
    [e[42], 597,
     2, 724, 598, {"name":"doccomment.tagContent","token":"attribute"}],
    ["}", -1],
    ["::", -1,
     [5, 725], 600],
    [3, "meta", e[19], 601],
    [2, 379, 602, {"name":"TemplateArgs"},
     0, 602],
    [1, 9, 603],
    ["::", -1],
    [3, "number", e[23], -1,
     2, 145, -1, {"name":"string","token":"string"},
     e[19], -1,
     3, "operator", e[41], -1,
     ",", -1,
     "(", 605,
     "[", 608,
     "{", 611],
    [1, 9, 606],
    [1, 604, 607,
     ")", -1],
    [1, 9, 606],
    [1, 9, 609],
    [1, 604, 610,
     "]", -1],
    [1, 9, 609],
    [1, 9, 612],
    [1, 604, 613,
     "}", -1],
    [1, 9, 612],
    [3, "keyword", e[46], 615,
     2, 197, -1, {"name":"Template"},
     1, 184, -1,
     3, "keyword", e[0], 617,
     3, "meta", e[17], 621,
     1, 173, -1,
     2, 729, -1, {"name":"ObjectMember"}],
    [1, 9, 616],
    [":", -1],
    [1, 9, 618],
    [2, 233, 619, {"name":"ArgList"}],
    [1, 9, 620],
    [";", -1],
    [1, 9, 622],
    [2, 340, 623, {"name":"ParenTokens"},
     0, 623],
    [1, 9, 624],
    [/^\;?/, -1],
    [1, 747, 626,
     0, 627,
     0, -1],
    [1, 9, 628],
    [3, "keyword", e[29], 629,
     3, "keyword", e[30], 629,
     1, 245, 630],
    [",", 631,
     0, -1],
    [1, 9, 627],
    [1, 9, 632],
    [1, 9, 633],
    [e[44], 634],
    [1, 747, 635,
     0, 636],
    [1, 9, 637],
    [1, 9, 628],
    [3, "keyword", e[29], 638,
     3, "keyword", e[30], 638,
     1, 245, 639],
    [1, 238, 640],
    [1, 9, 636],
    [1, 9, 641],
    [1, 9, 642],
    [e[44], 643],
    [3, "operator", "=", 644,
     0, 626],
    [1, 9, 645],
    [1, 9, 646],
    [1, 238, 647],
    [1, 715, 626],
    [1, 9, 648],
    [3, "operator", "=", 649,
     0, 635],
    [1, 9, 650],
    [1, 715, 635],
    ["::", -1,
     [5, 758], 652],
    [3, "type qualifier", e[19], 653],
    [2, 379, 654, {"name":"TemplateArgs"},
     0, 654],
    [1, 9, 655],
    ["::", -1],
    ["[", 657],
    [1, 9, 658],
    [e[42], 659,
     /^[\&\=]/, -1,
     3, "keyword", e[48], -1,
     "]", -1],
    [1, 9, 658],
    ["(", 661],
    [1, 9, 662],
    [1, 228, 663,
     0, 663],
    [1, 9, 664],
    [")", -1],
    ["&", 666,
     "=", 667,
     3, "keyword", e[48], 667,
     0, -1],
    [1, 9, 668],
    [1, 9, 669],
    [1, 138, 667,
     0, 667],
    [",", 670,
     0, -1],
    [1, 9, 671],
    ["&", 672,
     "=", 673,
     3, "keyword", e[48], 673],
    [1, 9, 674],
    [1, 9, 669],
    [1, 138, 673,
     0, 673],
    [3, "qualifier def", e[19], 676],
    [1, 707, 677,
     0, 677],
    [1, 9, 678],
    ["::", -1],
    [1, 245, 680,
     0, -1],
    [1, 9, 681],
    [1, 258, 682,
     0, 683],
    [1, 9, 684],
    [1, 9, 685],
    [2, 515, 683, {"name":"ParamList"},
     0, 683],
    [",", 686,
     0, -1],
    [1, 9, 687],
    [1, 245, 688],
    [1, 9, 689],
    [1, 258, 690,
     0, 691],
    [1, 9, 692],
    [1, 9, 685],
    [2, 515, 691, {"name":"ParamList"},
     0, 691],
    [1, 762, 694,
     0, -1],
    [1, 9, 695],
    [",", 696,
     0, -1],
    [1, 9, 697],
    [1, 762, 698],
    [1, 9, 695],
    ["[", 700],
    [1, 9, 701],
    [1, 543, 702,
     "]", -1],
    [1, 9, 701],
    ["{", 704],
    [1, 9, 705],
    [1, 543, 706,
     "}", -1],
    [1, 9, 705],
    ["<", 708],
    [1, 9, 709],
    [e[55], 710,
     ">", -1],
    [1, 707, 711,
     2, 145, 711, {"name":"string","token":"string"},
     /^[^]/, 711],
    [1, 9, 709],
    [1, 245, 713],
    [1, 9, 714],
    [e[56], -1],
    [1, 454, 716,
     1, 471, 717],
    [1, 9, 715],
    [1, 9, 718],
    [e[55], 719,
     0, -1],
    [1, 344, 720],
    [1, 9, 718],
    [1, 245, 722],
    [1, 9, 723],
    [e[56], -1],
    [1, 773, -1],
    [3, "meta", e[19], 726],
    [1, 707, 727,
     0, 727],
    [1, 9, 728],
    ["::", -1],
    [3, "keyword", e[29], 730,
     3, "keyword", e[30], 730,
     3, "keyword", e[31], 730,
     3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 733,
     1, 245, 731],
    [1, 9, 729],
    [1, 9, 732],
    [1, 777, 733],
    [1, 9, 734],
    [2, 270, -1, {"name":"FunctionDef"},
     1, 369, 735,
     ":", 736,
     "[", 737,
     0, 735,
     3, "meta", e[17], 738],
    [1, 9, 739],
    [1, 9, 740],
    [1, 9, 741],
    [1, 9, 742],
    [";", -1],
    [3, "number", e[23], 735],
    [3, "number", e[23], 743,
     0, 743],
    [2, 340, 744, {"name":"ParenTokens"},
     0, 744],
    [1, 9, 745],
    [1, 9, 746],
    ["]", 735],
    [/^\;?/, -1],
    [3, "keyword", e[27], 748,
     0, 750],
    [1, 9, 749],
    [2, 379, 750, {"name":"TemplateArgs"}],
    [1, 9, 751],
    [3, "keyword", e[24], 752,
     3, "keyword", e[21], 752],
    [1, 9, 753],
    [3, "type def", e[19], 754],
    [1, 9, 755],
    [3, "operator", "=", 756,
     0, -1],
    [1, 9, 757],
    [1, 138, -1,
     3, "number", e[23], -1],
    [3, "type qualifier", e[19], 759],
    [1, 707, 760,
     0, 760],
    [1, 9, 761],
    ["::", -1],
    [2, 558, 763, {"name":"fieldName","token":"property"}],
    [1, 9, 764],
    ["(", 765,
     "{", 766],
    [1, 9, 767],
    [1, 9, 768],
    [1, 504, 769],
    [1, 504, 770],
    [1, 9, 771],
    [1, 9, 772],
    [")", -1],
    ["}", -1],
    [/^(?!\}|\*\/)/, 774,
     0, -1],
    ["{", 775,
     /^[^]/, 773],
    [1, 773, 776],
    [/^\}?/, 773],
    [0, 778,
     "(", 785],
    [e[57], 779,
     1, 529, 780],
    [1, 9, 778],
    [1, 9, 781],
    ["[", 782,
     0, -1],
    [1, 9, 783],
    ["]", 784],
    [1, 9, 781],
    [1, 9, 786],
    [1, 777, 787],
    [1, 9, 788],
    [")", -1]
  ];
  var start = 0;
  var token = 5;

  var cpp = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state, once) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (once && scope.locals.indexOf(name) > -1)
          { return "variable-2" }
        scope.locals.push(name);
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", EnumBody: "}", ObjType: "}",
    ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && (cx.name == "Block" || cx.name == "NamespaceBlock" || cx.name == "ClassBody" ||
                  cx.name == "AnnotationTypeBody" || cx.name == "BlockOf" || cx.name == "EnumBody")) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && brack != ")") { return base }
      return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
    } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "EnumConstant" ||
               cx.name == "AnnotationTypeItem" | cx.name == "ArgExpr") {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^else\b/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr" ||
          cx.name == "EnumConstant" || cx.name == "Template" || cx.name == "AnnotationTypeItem" ||
          cx.parent && bracketed[cx.parent.name])
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
      { return statementIndent(state.context, config) }
    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
  }

  function constructorAhead(line, pos) {
    var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
    return match && match[1] == match[2]
  }

  function localConstructorAhead(line, pos, cx) {
    var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
    if (!ahead) { return false }
    while (cx.name != "Statement") { cx = cx.parent; }
    var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
    return className ? className[1] == ahead[1] : false
  }

  var rawStringOpen = /R"(.*?)\(/g;

  function rawStringContinues(line, pos, cx) {
    rawStringOpen.lastIndex = cx.startPos;
    var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
    return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
  }

  var scopes = ["Block", "FunctionDef"], typeScopes = ["Template"];

  var CppMode = (function (superclass) {
    function CppMode(conf) {
      superclass.call(this, cpp, {
        predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
      });
      this.conf = conf;
    }

    if ( superclass ) CppMode.__proto__ = superclass;
    CppMode.prototype = Object.create( superclass && superclass.prototype );
    CppMode.prototype.constructor = CppMode;

    CppMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (textAfter.charAt(0) == "#") { return 0 }
      return indent(state, textAfter, line, this.conf)
    };

    return CppMode;
  }(CodeMirror.GrammarMode));

  CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
  CppMode.prototype.blockCommentStart = "/*";
  CppMode.prototype.blockCommentEnd = "*/";
  CppMode.prototype.blockCommentContinue = " * ";
  CppMode.prototype.lineComment = "//";
  CppMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
