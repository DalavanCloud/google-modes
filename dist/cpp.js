(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^class(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:\:\:|[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]* *\:\:)/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\<)/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_])/, /^\@[a-zA-Z¡-￿_]+/, /^[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_]|\{)/, /^[^]/], /^delete(?![a-zA-Z¡-￿_0-9])/, /^new(?![a-zA-Z¡-￿_0-9])/, /^sizeof(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 435]], /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?!\>)/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 11, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[7], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[25], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[17], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[1], -1,
   3, "keyword", e[49], -1,
   3, "keyword", e[35], -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[32], -1,
   3, "type", e[34], -1,
   3, "type", e[36], -1,
   3, "keyword", e[33], -1,
   3, "atom", e[52], -1,
   1, 154, -1,
   3, "number", e[19], -1,
   2, 159, -1, {"name":"string","token":"string"},
   2, 164, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[41], -1,
   3, "operator", e[38], -1,
   2, 165, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[2], -1,
   3, "keyword", e[23], -1,
   3, "keyword", e[48], -1,
   3, "keyword", e[47], -1,
   3, "keyword", e[50], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[22], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[40], -1,
   3, "keyword", e[5], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[0], -1,
   3, "keyword", e[20], -1,
   3, "keyword", e[21], -1,
   3, "keyword", e[37], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[18], -1,
   3, "keyword", e[51], -1,
   /^[^]/, -1],
  ["#", 7],
  [/^(?!\/\/|\/\*|\\)./, 7,
   "\\", 8,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 165, 9, {"name":"comment","token":"comment"},
   0, -1],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [3, "keyword", e[0], 12,
   3, "keyword", e[1], 12,
   3, "keyword", e[2], 32,
   3, "keyword", e[3], 40,
   3, "keyword", e[4], 44,
   3, "keyword", e[5], 59,
   3, "keyword", e[6], 65,
   2, 171, -1, {"name":"Template"},
   [7, "constructorAhead"], 77,
   0, 80,
   3, "keyword", e[7], 88,
   3, "keyword", e[8], 92,
   3, "keyword", e[9], 93,
   3, "keyword", e[10], 94,
   3, "keyword", e[11], 118,
   3, "keyword", e[12], 126,
   2, 180, -1, {"name":"Block"},
   3, "keyword", e[13], 130,
   3, "keyword", e[14], 132,
   3, "keyword", e[15], 136,
   3, "keyword", e[1], 140,
   3, "keyword", e[16], 146,
   3, "keyword", e[17], 147,
   [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 184]], 146,
   2, 185, 150, {"name":"DeclType"},
   ";", -1,
   1, 195, 152],
  [1, 9, 13],
  [3, "keyword", e[18], 14,
   0, 15],
  [1, 9, 16],
  [1, 9, 17],
  ["(", 18],
  [3, "type def", e[24], 19],
  [1, 9, 20],
  [1, 9, 21],
  [3, "number", e[19], 22],
  [":", 23,
   0, 24],
  [1, 9, 25],
  [1, 9, 26],
  [1, 9, 27],
  [")", 15],
  [3, "keyword", e[20], 28,
   0, 28],
  [";", -1,
   2, 200, -1, {"name":"ClassBody"}],
  [1, 9, 29],
  [3, "keyword", e[21], 30,
   0, 30],
  [1, 9, 31],
  [1, 206, 24],
  [1, 9, 33],
  [1, 216, 34,
   0, 34],
  [1, 9, 35],
  [3, "operator", "=", 36,
   2, 180, -1, {"name":"Block"}],
  [1, 9, 37],
  [1, 154, 38],
  [1, 9, 39],
  [";", -1],
  [1, 9, 41],
  [1, 195, 42],
  [1, 9, 43],
  [";", -1],
  [1, 9, 45],
  [2, 180, 46, {"name":"Block"}],
  [1, 9, 47],
  [3, "keyword", e[22], 48,
   0, -1],
  [1, 9, 49],
  ["(", 50],
  [1, 9, 51],
  [1, 206, 52],
  [1, 9, 53],
  [1, 224, 54,
   0, 54],
  [1, 9, 55],
  [")", 56],
  [1, 9, 57],
  [2, 180, 58, {"name":"Block"}],
  [1, 9, 47],
  [1, 9, 60],
  ["{", 61],
  [1, 9, 62],
  [2, 159, 63, {"name":"string","token":"string"}],
  [1, 9, 64],
  ["}", -1],
  [1, 9, 66],
  [3, "keyword", e[23], 67,
   3, "keyword", e[2], 68,
   0, 68],
  [1, 9, 69],
  [1, 9, 70],
  [1, 206, 71],
  [1, 154, 71],
  [1, 9, 72],
  ["=", 73,
   0, 74],
  [1, 9, 75],
  [1, 9, 76],
  [1, 206, 74],
  [";", -1],
  [1, 216, 78],
  [1, 9, 79],
  [2, 236, -1, {"name":"FunctionDef"}],
  [3, "meta", e[26], 81],
  [1, 9, 82],
  [0, 80,
   1, 262, 83,
   2, 269, 84, {"name":"qualifiedVariableName","token":"qualified"}],
  [1, 9, 85],
  [1, 9, 86],
  [1, 270, -1],
  [1, 281, 87,
   ";", -1],
  [1, 9, 86],
  [1, 9, 89],
  [3, "type def", e[24], 90,
   0, 90],
  [1, 9, 91],
  [2, 298, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 95],
  [1, 9, 96],
  [1, 9, 97],
  ["(", 98],
  [2, 316, 99, {"name":"CondExpr"}],
  [2, 11, 100, {"name":"Statement"}],
  [1, 9, 101],
  [1, 9, 102],
  [1, 9, 103],
  [2, 11, 104, {"name":"Statement"}],
  [2, 11, -1, {"name":"Statement"}],
  [3, "keyword", e[9], 105],
  [1, 9, 106],
  [1, 9, 107],
  [1, 195, 108,
   0, 108],
  [2, 316, 109, {"name":"CondExpr"}],
  [1, 9, 110],
  [1, 9, 111],
  [";", 112],
  [";", -1],
  [1, 9, 113],
  [1, 195, 114,
   0, 114],
  [1, 9, 115],
  [")", 116],
  [1, 9, 117],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 119],
  [2, 316, 120, {"name":"CondExpr"}],
  [1, 9, 121],
  [2, 11, 122, {"name":"Statement"}],
  [1, 9, 123],
  [3, "keyword", e[25], 124,
   0, -1],
  [1, 9, 125],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 127],
  [2, 316, 128, {"name":"CondExpr"}],
  [1, 9, 129],
  [2, 180, -1, {"name":"Block"}],
  [1, 9, 131],
  [";", -1],
  [1, 9, 133],
  [e[24], 134],
  [1, 9, 135],
  [";", -1],
  [1, 9, 137],
  [1, 195, 138,
   0, 138],
  [1, 9, 139],
  [";", -1],
  [1, 9, 141],
  [1, 216, 142,
   0, 142],
  [1, 9, 143],
  [2, 321, 144, {"name":"BlockOf"},
   0, 144],
  [1, 9, 145],
  [";", -1],
  [1, 9, 148],
  [1, 9, 149],
  [":", -1],
  [1, 195, 146],
  [1, 9, 151],
  [1, 270, -1],
  [1, 9, 153],
  [";", -1],
  [0, 155,
   3, "type", e[28], -1,
   3, "variable", e[27], 158,
   2, 331, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [3, "meta", e[26], 156],
  [0, 155,
   3, "variable qualified", e[27], 157,
   3, "type", e[28], -1,
   2, 269, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [2, 332, -1, {"name":"TemplateArgs"}],
  [2, 332, -1, {"name":"TemplateArgs"}],
  [/^R\"(?:(?!\().)*\(/, 160,
   /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 161],
  [[0, [7, "rawStringContinues"], /^[^]/], 160,
   "\"", -1],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 162],
  ["\\", 163,
   [0, /^(?!\")/, /^[^]/], 162,
   "\"", -1],
  [/^[^]/, 162],
  [3, "keyword", e[23], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
  [/^\/\*\*(?!\/)/, 166,
   "/*", 170,
   /^\/\/.*/, -1],
  [0, 167,
   2, 337, 166, {"name":"doccomment.braced"},
   0, 168],
  [e[46], 169],
  [2, 345, 168, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 167,
   0, 166],
  [[0, /^(?!\*\/)/, /^[^]/], 170,
   "*/", -1],
  [3, "keyword", e[29], 172,
   0, 172],
  [1, 9, 173],
  [3, "keyword", e[30], 174],
  [1, 9, 175],
  [2, 353, 176, {"name":"TemplateParams"}],
  [1, 9, 177],
  [1, 9, 178],
  [1, 9, 179],
  [2, 11, -1, {"name":"Statement"}],
  ["{", 181],
  [1, 9, 182],
  [2, 11, 183, {"name":"Statement"},
   "}", -1],
  [1, 9, 182],
  [e[42], 184,
   /^\:(?!\:)/, -1],
  [0, 186,
   0, 187,
   1, 262, -1],
  [3, "keyword", e[31], 188,
   3, "keyword", e[32], 188,
   3, "keyword", e[33], 188],
  [3, "type", e[34], 189],
  [1, 9, 190],
  [1, 9, 191],
  [0, 186,
   3, "keyword", e[35], 192,
   1, 358, 192],
  [0, 187,
   3, "type", e[36], 192,
   0, 192],
  [1, 9, 193],
  [1, 364, 194,
   0, -1],
  [1, 9, 193],
  [1, 371, 196,
   1, 386, 197],
  [1, 9, 195],
  [1, 9, 198],
  [1, 281, 199,
   0, -1],
  [1, 9, 198],
  ["{", 201],
  [1, 9, 202],
  [3, "keyword", e[21], 203,
   2, 171, 204, {"name":"Template"},
   2, 407, 204, {"name":"ObjectMember"},
   "}", -1],
  [1, 9, 205],
  [1, 9, 202],
  [":", 204],
  [3, "keyword", e[23], 207,
   0, 209],
  [1, 9, 208],
  [1, 206, -1],
  [3, "keyword", e[31], 210,
   3, "keyword", e[32], 210,
   3, "keyword", e[33], 210,
   3, "keyword", e[1], 211,
   0, 211],
  [1, 9, 209],
  [1, 9, 212],
  [3, "keyword", e[35], 213,
   1, 358, 213],
  [1, 9, 214],
  [1, 364, 215,
   0, -1],
  [1, 9, 214],
  [3, "keyword", e[37], 217,
   0, 218,
   3, "def", e[39], -1],
  [3, "operator", e[38], -1,
   2, 164, -1, {"name":"prefixOp","token":"operator"}],
  [3, "meta", /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\<)/, 219,
   3, "meta", e[26], 220],
  [1, 9, 221],
  [0, 218,
   3, "qualified def", e[39], -1],
  [2, 332, 222, {"name":"TemplateArgs"}],
  [3, "meta", "::", 223],
  [3, "qualified def", e[39], 220],
  [0, 225,
   "(", 232],
  [/^(?:\*|\&\&|\&)/, 226,
   1, 216, 227],
  [1, 9, 225],
  [1, 9, 228],
  ["[", 229,
   0, -1],
  [1, 9, 230],
  ["]", 231],
  [1, 9, 228],
  [1, 9, 233],
  [1, 224, 234],
  [1, 9, 235],
  [")", -1],
  [2, 421, 237, {"name":"ParamList"}],
  [1, 9, 238],
  [3, "keyword", e[33], 239,
   /^(?:\&|\&\&)?/, 240],
  [1, 9, 238],
  [1, 9, 241],
  [3, "keyword", e[40], 242,
   3, "keyword", e[3], 243,
   0, 254],
  [1, 9, 244],
  [1, 9, 245],
  ["(", 246,
   0, 254],
  ["(", 247],
  [1, 9, 248],
  [1, 9, 249],
  [1, 195, 250],
  [1, 426, 251],
  [1, 9, 252],
  [1, 9, 253],
  [")", 254],
  [")", 254],
  [1, 9, 255],
  ["->", 256,
   0, 258],
  [1, 9, 257],
  [1, 206, 258],
  [1, 9, 259],
  [2, 432, 260, {"name":"InitializerList"},
   0, 260],
  [1, 9, 261],
  [";", -1,
   2, 180, -1, {"name":"Block"}],
  [3, "keyword", e[35], 266,
   3, "keyword", e[23], 263,
   e[53], 264],
  [1, 9, 265],
  [3, "meta", e[26], 264,
   3, "type", e[54], 266],
  [3, "meta", e[26], 265,
   3, "type", e[24], 266],
  [1, 9, 267],
  [1, 364, 268,
   0, -1],
  [1, 9, 267],
  [2, 331, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [1, 224, 271],
  [1, 9, 272],
  [[5, 438], 273,
   1, 444, 274,
   0, 274],
  [2, 236, -1, {"name":"FunctionDef"}],
  [1, 9, 275],
  [",", 276,
   ";", -1],
  [1, 9, 277],
  [1, 216, 278],
  [1, 9, 279],
  [1, 444, 280,
   0, 280],
  [1, 9, 275],
  [2, 447, -1, {"name":"BlockOf"},
   2, 457, 282, {"name":"ArgList"},
   2, 457, -1, {"name":"ArgList"},
   "[", 284,
   3, "operator", e[41], -1,
   /^(?:\-\>|\.)/, 288,
   3, "operator", e[38], 290,
   "?", 292],
  [1, 9, 283],
  [2, 180, -1, {"name":"Block"},
   0, -1],
  [1, 9, 285],
  [1, 195, 286],
  [1, 9, 287],
  ["]", -1],
  [1, 9, 289],
  [2, 462, -1, {"name":"fieldName","token":"property"}],
  [1, 9, 291],
  [1, 195, -1],
  [1, 9, 293],
  [1, 195, 294],
  [1, 9, 295],
  [":", 296],
  [1, 9, 297],
  [1, 195, -1],
  ["{", 299],
  [1, 9, 300],
  [1, 216, 301,
   0, 314],
  [1, 9, 302],
  [3, "operator", "=", 303,
   0, 304],
  [1, 9, 305],
  [1, 9, 306],
  [1, 195, 304],
  [",", 307,
   0, 314],
  [1, 9, 308],
  [1, 216, 309,
   0, 310],
  [1, 9, 311],
  [1, 9, 306],
  [3, "operator", "=", 312,
   0, 310],
  [1, 9, 313],
  [1, 195, 310],
  [1, 9, 315],
  ["}", -1],
  ["(", 317],
  [1, 9, 318],
  [1, 195, 319,
   0, 319],
  [1, 9, 320],
  [")", -1],
  ["{", 322],
  [1, 9, 323],
  [1, 463, 324,
   0, 329],
  [1, 9, 325],
  [";", 326,
   0, 329],
  [1, 9, 327],
  [1, 463, 328,
   0, 328],
  [1, 9, 325],
  [1, 9, 330],
  ["}", -1],
  [3, "callee", e[55], -1,
   e[24], -1],
  ["<", 333],
  [1, 9, 334],
  [1, 474, 335],
  [1, 9, 336],
  [">", -1],
  ["{", 338],
  [3, "tag", e[43], 339,
   3, "tag", e[44], 340,
   2, 500, 344, {"name":"doccomment.type","token":"type"}],
  [e[42], 339,
   "{", 341,
   0, 340],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 340,
   0, 344],
  [2, 500, 342, {"name":"doccomment.type","token":"type"}],
  ["}", 343],
  [e[42], 343,
   3, "def", e[45], 340,
   0, 340],
  ["}", -1],
  [3, "tag", e[43], 346,
   3, "tag", e[44], 350],
  [e[42], 346,
   "{", 347,
   0, 350],
  [2, 500, 348, {"name":"doccomment.type","token":"type"}],
  ["}", 349],
  [e[42], 349,
   3, "def", e[45], 350,
   0, 350],
  [0, 351,
   2, 337, 350, {"name":"doccomment.braced"},
   0, -1],
  [e[46], 352],
  [0, 351,
   0, 350],
  ["<", 354],
  [1, 9, 355],
  [1, 501, 356],
  [1, 9, 357],
  [">", -1],
  [0, 359,
   3, "keyword", e[23], 362,
   0, 363],
  [3, "type", e[34], 360],
  [0, 359,
   1, 9, 361,
   0, -1],
  [3, "type", e[36], -1],
  [1, 9, 363],
  [3, "meta", e[26], 363,
   3, "type", e[24], -1],
  [2, 332, -1, {"name":"TemplateArgs"},
   "::", 365,
   "[", 367,
   /^[\*\&]/, -1,
   3, "keyword", e[33], -1],
  [1, 9, 366],
  [1, 206, -1],
  [1, 9, 368],
  [3, "number", e[19], 369,
   0, 369],
  [1, 9, 370],
  ["]", -1],
  [3, "keyword", e[47], 372,
   3, "keyword", e[48], 376,
   2, 164, -1, {"name":"prefixOp","token":"operator"},
   3, "keyword", e[49], -1],
  [1, 9, 373],
  ["[", 374,
   0, -1],
  [1, 9, 375],
  ["]", -1],
  [1, 9, 377],
  ["[", 378,
   0, 379],
  [1, 9, 380],
  [1, 9, 381],
  ["]", 379],
  ["(", 382,
   0, -1],
  [1, 9, 383],
  [1, 195, 384],
  [1, 9, 385],
  [")", -1],
  [3, "keyword", e[50], -1,
   "[", 387,
   3, "keyword", e[51], 393,
   2, 533, 405, {"name":"ParenExpr"},
   3, "atom", e[52], -1,
   3, "number", e[19], -1,
   2, 159, -1, {"name":"string","token":"string"},
   2, 447, -1, {"name":"BlockOf"},
   1, 154, -1],
  [1, 9, 388],
  [1, 538, 389],
  [1, 9, 390],
  ["]", 391],
  [1, 9, 392],
  [2, 236, -1, {"name":"FunctionDef"}],
  [1, 9, 394],
  ["<", 395],
  [1, 9, 396],
  [1, 206, 397],
  [1, 9, 398],
  [">", 399],
  [1, 9, 400],
  ["(", 401],
  [1, 9, 402],
  [1, 195, 403],
  [1, 9, 404],
  [")", -1],
  [1, 9, 406],
  [1, 195, -1,
   0, -1],
  [3, "keyword", e[31], 408,
   3, "keyword", e[32], 408,
   3, "keyword", e[33], 408,
   3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 411,
   1, 206, 409],
  [1, 9, 407],
  [1, 9, 410],
  [1, 224, 411],
  [1, 9, 412],
  [2, 236, -1, {"name":"FunctionDef"},
   1, 444, 413,
   ":", 414,
   "[", 415,
   0, 413],
  [1, 9, 416],
  [1, 9, 417],
  [1, 9, 418],
  [";", -1],
  [3, "number", e[19], 413],
  [3, "number", e[19], 419,
   0, 419],
  [1, 9, 420],
  ["]", 413],
  ["(", 422],
  [1, 9, 423],
  [1, 548, 424],
  [1, 9, 425],
  [")", -1],
  [1, 206, 427,
   0, -1],
  [1, 9, 428],
  [",", 429,
   0, -1],
  [1, 9, 430],
  [1, 206, 431],
  [1, 9, 428],
  [":", 433],
  [1, 9, 434],
  [1, 562, -1],
  [1, 9, 436],
  [1, 364, 436,
   1, 9, 437],
  [/^[a-zA-Z¡-￿_]/, -1],
  ["(", 439],
  [1, 9, 440],
  [")", -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "type", e[34], -1,
   3, "keyword", e[35], -1,
   3, "keyword", e[23], 441,
   e[53], 442],
  [1, 9, 443],
  [3, "meta", e[26], 442,
   3, "type", e[54], -1],
  [3, "meta", e[26], 443,
   3, "type", e[24], -1],
  [3, "operator", "=", 445,
   2, 447, -1, {"name":"BlockOf"},
   2, 457, -1, {"name":"ArgList"}],
  [1, 9, 446],
  [1, 195, -1],
  ["{", 448],
  [1, 9, 449],
  [1, 195, 450,
   0, 455],
  [1, 9, 451],
  [",", 452,
   0, 455],
  [1, 9, 453],
  [1, 195, 454,
   0, 454],
  [1, 9, 451],
  [1, 9, 456],
  ["}", -1],
  ["(", 458],
  [1, 9, 459],
  [1, 568, 460],
  [1, 9, 461],
  [")", -1],
  [3, "callee", e[55], -1,
   e[24], -1],
  [1, 206, 464],
  [1, 9, 465],
  [2, 462, 466, {"name":"fieldName","token":"property"},
   0, 466],
  [1, 9, 467],
  [":", 468,
   "[", 469,
   0, -1],
  [1, 9, 470],
  [1, 9, 471],
  [3, "number", e[19], -1],
  [3, "number", e[19], 472,
   0, 472],
  [1, 9, 473],
  ["]", -1],
  [3, "keyword", e[30], 475,
   0, 476,
   0, 477,
   3, "number", e[19], 478,
   0, -1],
  [1, 9, 479],
  [1, 9, 480],
  [3, "keyword", e[31], 481,
   3, "keyword", e[32], 481,
   1, 206, 482],
  [1, 9, 483],
  [2, 332, 476, {"name":"TemplateArgs"}],
  [3, "keyword", e[0], 484,
   3, "keyword", e[23], 484],
  [1, 9, 477],
  [1, 9, 485],
  [",", 486,
   0, -1],
  [1, 9, 487],
  [1, 444, 478,
   0, 478],
  [1, 9, 488],
  [1, 206, 478],
  [3, "keyword", e[30], 489,
   0, 490,
   0, 491,
   3, "number", e[19], 492],
  [1, 9, 493],
  [1, 9, 494],
  [3, "keyword", e[31], 495,
   3, "keyword", e[32], 495,
   1, 206, 496],
  [1, 9, 483],
  [2, 332, 490, {"name":"TemplateArgs"}],
  [3, "keyword", e[0], 497,
   3, "keyword", e[23], 497],
  [1, 9, 491],
  [1, 9, 498],
  [1, 9, 499],
  [1, 444, 492,
   0, 492],
  [1, 206, 492],
  [1, 574, -1],
  [1, 578, 502,
   0, 503,
   0, -1],
  [1, 9, 504],
  [3, "keyword", e[31], 505,
   3, "keyword", e[32], 505,
   1, 206, 506],
  [",", 507,
   0, -1],
  [1, 9, 503],
  [1, 9, 508],
  [1, 9, 509],
  [1, 216, 510],
  [1, 578, 511,
   0, 512],
  [1, 9, 513],
  [1, 9, 504],
  [3, "keyword", e[31], 514,
   3, "keyword", e[32], 514,
   1, 206, 515],
  [3, "operator", "=", 516,
   0, 502],
  [1, 9, 512],
  [1, 9, 517],
  [1, 9, 518],
  [1, 216, 519],
  [1, 371, 520,
   1, 386, 521],
  [1, 9, 522],
  [1, 9, 518],
  [1, 9, 523],
  [3, "operator", "=", 524,
   0, 511],
  [e[56], 525,
   0, 502],
  [1, 9, 526],
  [1, 281, 527],
  [1, 371, 528,
   1, 386, 529],
  [1, 9, 523],
  [1, 9, 526],
  [1, 9, 530],
  [e[56], 531,
   0, 511],
  [1, 281, 532],
  [1, 9, 530],
  ["(", 534],
  [1, 9, 535],
  [1, 195, 536,
   0, 536],
  [1, 9, 537],
  [")", -1],
  ["&", 539,
   "=", 540,
   3, "keyword", e[50], 540,
   0, -1],
  [1, 9, 541],
  [1, 9, 542],
  [1, 154, 540,
   0, 540],
  [",", 543,
   0, -1],
  [1, 9, 544],
  ["&", 545,
   "=", 546,
   3, "keyword", e[50], 546],
  [1, 9, 547],
  [1, 9, 542],
  [1, 154, 546,
   0, 546],
  [1, 206, 549,
   0, -1],
  [1, 9, 550],
  [1, 224, 551,
   0, 552],
  [1, 9, 553],
  [1, 9, 554],
  [2, 421, 552, {"name":"ParamList"},
   0, 552],
  [",", 555,
   0, -1],
  [1, 9, 556],
  [1, 206, 557],
  [1, 9, 558],
  [1, 224, 559,
   0, 560],
  [1, 9, 561],
  [1, 9, 554],
  [2, 421, 560, {"name":"ParamList"},
   0, 560],
  [1, 589, 563,
   0, -1],
  [1, 9, 564],
  [",", 565,
   0, -1],
  [1, 9, 566],
  [1, 589, 567],
  [1, 9, 564],
  [1, 195, 569,
   0, -1],
  [1, 9, 570],
  [",", 571,
   0, -1],
  [1, 9, 572],
  [1, 195, 573],
  [1, 9, 570],
  [/^(?!\}|\*\/)/, 575,
   0, -1],
  ["{", 576,
   /^[^]/, 574],
  [1, 574, 577],
  [/^\}?/, 574],
  [3, "keyword", e[30], 579,
   0, 581],
  [1, 9, 580],
  [2, 332, 581, {"name":"TemplateArgs"}],
  [1, 9, 582],
  [3, "keyword", e[0], 583,
   3, "keyword", e[23], 583],
  [1, 9, 584],
  [3, "type def", e[24], 585],
  [1, 9, 586],
  [3, "operator", "=", 587,
   0, -1],
  [1, 9, 588],
  [1, 154, -1,
   3, "number", e[19], -1],
  [2, 462, 590, {"name":"fieldName","token":"property"}],
  [1, 9, 591],
  ["(", 592,
   "{", 593],
  [1, 9, 594],
  [1, 9, 595],
  [1, 568, 596],
  [1, 568, 597],
  [1, 9, 598],
  [1, 9, 599],
  [")", -1],
  ["}", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}
function isLocalType(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var typeRE = /(^|\s)type($|\s)/;

function markTypeLocals(type, scopes, stream, state) {
  if (type == "type def") {
    var scope = getScope(state.context, scopes);
    if (scope) {
      if (!scope.localTypes) { scope.localTypes = []; }
      scope.localTypes.push(stream.current());
    }
  } else if (typeRE.test(type) && !/qualified/.test(type) &&
             isLocalType(state.context, stream.current())) {
    type += " local";
  }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isNamespace(context) {
  return context && context.name == "Statement" &&
    /^namespace\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", EnumBody: "}", ArrayInitializer: "}",
  ArrayLiteral: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")",
  TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
};

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr" ||
        cx.name == "EnumConstant" || cx.name == "Template" || cx.name == "AnnotationTypeItem")
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function plus(result, add) {
  return typeof result == "number" ? result + add : result
}

function findIndent(cx, textAfter, curLine, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  if (brack) {
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (config.align !== false && curLine != cx.startLine && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (cx.name == "Block" || cx.name == "ClassBody" || cx.name == "AnnotationTypeBody" || cx.name == "BlockOf" || cx.name == "EnumBody") {
      // Skip wrapping statement context
      var skipCx = cx;
      if (cx.parent && cx.parent.name == "Statement" && cx.parent.parent &&
          cx.parent.parent.name == "Statement" && hasSubStatement(cx.parent.parent))
        { skipCx = cx.parent.parent; }
      return statementIndent(skipCx, config) + (
        /^(public|private|protected)\s*:/.test(textAfter) ? 1 :
        closed || isNamespace(cx.parent) ? 0 :
        isSwitch(cx.parent) && !isLabel(textAfter) ? 2 * config.indentUnit
        : config.indentUnit
      )
    }

    var flat = closed && brack != ")" || curLine == cx.startLine && cx.name != "CondExpr";
    return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) +
      (flat ? 0 : config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1))
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "EnumConstant" ||
             cx.name == "AnnotationTypeItem") {
    var base = statementIndent(cx, config), sub;
    if (!curLine && (sub = hasSubStatement(cx)))
      { return base + (sub == "if" && (/[{;]\s*(\/\/.*)?$/.test(cx.startLine) || /^else\b/.test(textAfter)) ? 0 : config.indentUnit); }
    var flat$1 = curLine == cx.startLine ||
        curLine && CodeMirror.countColumn(curLine, null, config.tabSize) <= base;
    return base + (flat$1 ? 0 : 2 * config.indentUnit)
  } else if (cx.name == "ArrowRest") {
    return plus(findIndent(cx.parent, textAfter, cx.startLine, config), config.indentUnit)
  } else {
    return plus(findIndent(cx.parent, textAfter, curLine, config),
                cx.name == "InitializerList" ? 2 :
                cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos)) ? 2 * config.indentUnit :
                0)
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

function localConstructorAhead(line, pos, cx) {
  var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
  if (!ahead) { return false }
  while (cx.name != "Statement") { cx = cx.parent; }
  var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
  return className ? className[1] == ahead[1] : false
}

var rawStringOpen = /R"(.*?)\(/g;

function rawStringContinues(line, pos, cx) {
  rawStringOpen.lastIndex = cx.startPos;
  var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
  return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
}

var scopes = ["Block", "FunctionDef"];
var typeScopes = ["Template"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.blockCommentContinue = " * ";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
