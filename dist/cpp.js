(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^class(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^else(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\<)/, /^(?:\:\:|[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]* *\:\:)/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_])/, /^\@[a-zA-Z¡-￿_]+/, /^[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_]|\{)/, /^[^]/], /^sizeof(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 442]], /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?!\>)/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 11, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[7], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[25], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[17], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[1], -1,
   3, "keyword", e[49], -1,
   3, "keyword", e[35], -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[32], -1,
   3, "type", e[34], -1,
   3, "type", e[36], -1,
   3, "keyword", e[33], -1,
   3, "atom", e[52], -1,
   1, 156, -1,
   3, "number", e[19], -1,
   2, 161, -1, {"name":"string","token":"string"},
   2, 166, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[43], -1,
   3, "operator", e[38], -1,
   2, 167, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[2], -1,
   3, "keyword", e[23], -1,
   3, "keyword", e[39], -1,
   3, "keyword", e[40], -1,
   3, "keyword", e[50], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[22], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[42], -1,
   3, "keyword", e[5], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[0], -1,
   3, "keyword", e[20], -1,
   3, "keyword", e[21], -1,
   3, "keyword", e[37], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[18], -1,
   3, "keyword", e[51], -1,
   /^[^]/, -1],
  ["#", 7],
  [/^(?!\/\/|\/\*|\\)./, 7,
   "\\", 8,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 167, 9, {"name":"comment","token":"comment"},
   0, -1],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [3, "keyword", e[0], 12,
   3, "keyword", e[1], 12,
   3, "keyword", e[2], 32,
   3, "keyword", e[3], 40,
   3, "keyword", e[4], 44,
   3, "keyword", e[5], 59,
   3, "keyword", e[6], 65,
   2, 173, -1, {"name":"Template"},
   [7, "constructorAhead"], 77,
   0, 80,
   3, "keyword", e[7], 90,
   3, "keyword", e[8], 94,
   3, "keyword", e[9], 95,
   3, "keyword", e[10], 96,
   3, "keyword", e[11], 120,
   3, "keyword", e[12], 128,
   2, 182, -1, {"name":"Block"},
   3, "keyword", e[13], 132,
   3, "keyword", e[14], 134,
   3, "keyword", e[15], 138,
   3, "keyword", e[1], 142,
   3, "keyword", e[16], 148,
   3, "keyword", e[17], 149,
   [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 186]], 148,
   2, 187, 152, {"name":"DeclType"},
   ";", -1,
   1, 197, 154],
  [1, 9, 13],
  [3, "keyword", e[18], 14,
   0, 15],
  [1, 9, 16],
  [1, 9, 17],
  ["(", 18],
  [3, "type def", e[24], 19],
  [1, 9, 20],
  [1, 9, 21],
  [3, "number", e[19], 22],
  [":", 23,
   0, 24],
  [1, 9, 25],
  [1, 9, 26],
  [1, 9, 27],
  [")", 15],
  [3, "keyword", e[20], 28,
   0, 28],
  [";", -1,
   2, 202, -1, {"name":"ClassBody"}],
  [1, 9, 29],
  [3, "keyword", e[21], 30,
   0, 30],
  [1, 9, 31],
  [1, 208, 24],
  [1, 9, 33],
  [1, 218, 34,
   0, 34],
  [1, 9, 35],
  [3, "operator", "=", 36,
   2, 227, -1, {"name":"NamespaceBlock"}],
  [1, 9, 37],
  [1, 156, 38],
  [1, 9, 39],
  [";", -1],
  [1, 9, 41],
  [1, 197, 42],
  [1, 9, 43],
  [";", -1],
  [1, 9, 45],
  [2, 182, 46, {"name":"Block"}],
  [1, 9, 47],
  [3, "keyword", e[22], 48,
   0, -1],
  [1, 9, 49],
  ["(", 50],
  [1, 9, 51],
  [1, 208, 52],
  [1, 9, 53],
  [1, 231, 54,
   0, 54],
  [1, 9, 55],
  [")", 56],
  [1, 9, 57],
  [2, 182, 58, {"name":"Block"}],
  [1, 9, 47],
  [1, 9, 60],
  ["{", 61],
  [1, 9, 62],
  [2, 161, 63, {"name":"string","token":"string"}],
  [1, 9, 64],
  ["}", -1],
  [1, 9, 66],
  [3, "keyword", e[23], 67,
   3, "keyword", e[2], 68,
   0, 68],
  [1, 9, 69],
  [1, 9, 70],
  [1, 208, 71],
  [1, 156, 71],
  [1, 9, 72],
  [3, "operator", "=", 73,
   0, 74],
  [1, 9, 75],
  [1, 9, 76],
  [1, 208, 74],
  [";", -1],
  [1, 218, 78],
  [1, 9, 79],
  [2, 243, -1, {"name":"FunctionDef"}],
  [3, "meta", e[27], 81],
  [1, 9, 82],
  [0, 80,
   1, 269, 83,
   3, "variable qualified", e[26], 84,
   2, 276, 85, {"name":"qualifiedVariableName","token":"qualified"}],
  [1, 9, 86],
  [1, 9, 87],
  [1, 9, 88],
  [1, 277, -1],
  [2, 288, 85, {"name":"TemplateArgs"}],
  [1, 293, 89,
   ";", -1],
  [1, 9, 88],
  [1, 9, 91],
  [3, "type def", e[24], 92,
   0, 92],
  [1, 9, 93],
  [2, 310, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 97],
  [1, 9, 98],
  [1, 9, 99],
  ["(", 100],
  [2, 328, 101, {"name":"CondExpr"}],
  [2, 11, 102, {"name":"Statement"}],
  [1, 9, 103],
  [1, 9, 104],
  [1, 9, 105],
  [2, 11, 106, {"name":"Statement"}],
  [2, 11, -1, {"name":"Statement"}],
  [3, "keyword", e[9], 107],
  [1, 9, 108],
  [1, 9, 109],
  [1, 197, 110,
   0, 110],
  [2, 328, 111, {"name":"CondExpr"}],
  [1, 9, 112],
  [1, 9, 113],
  [";", 114],
  [";", -1],
  [1, 9, 115],
  [1, 197, 116,
   0, 116],
  [1, 9, 117],
  [")", 118],
  [1, 9, 119],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 121],
  [2, 328, 122, {"name":"CondExpr"}],
  [1, 9, 123],
  [2, 11, 124, {"name":"Statement"}],
  [1, 9, 125],
  [3, "keyword", e[25], 126,
   0, -1],
  [1, 9, 127],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 129],
  [2, 328, 130, {"name":"CondExpr"}],
  [1, 9, 131],
  [2, 182, -1, {"name":"Block"}],
  [1, 9, 133],
  [";", -1],
  [1, 9, 135],
  [e[24], 136],
  [1, 9, 137],
  [";", -1],
  [1, 9, 139],
  [1, 197, 140,
   0, 140],
  [1, 9, 141],
  [";", -1],
  [1, 9, 143],
  [1, 218, 144,
   0, 144],
  [1, 9, 145],
  [2, 333, 146, {"name":"BlockOf"},
   0, 146],
  [1, 9, 147],
  [";", -1],
  [1, 9, 150],
  [1, 9, 151],
  [":", -1],
  [1, 197, 148],
  [1, 9, 153],
  [1, 277, -1],
  [1, 9, 155],
  [";", -1],
  [0, 157,
   3, "type", e[28], -1,
   3, "variable", e[26], 160,
   2, 343, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [3, "meta", e[27], 158],
  [0, 157,
   3, "variable qualified", e[26], 159,
   3, "type", e[28], -1,
   2, 276, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [2, 288, -1, {"name":"TemplateArgs"}],
  [2, 288, -1, {"name":"TemplateArgs"}],
  [/^R\"(?:(?!\().)*\(/, 162,
   /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 163],
  [[0, [7, "rawStringContinues"], /^[^]/], 162,
   "\"", -1],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 164],
  ["\\", 165,
   [0, /^(?!\")/, /^[^]/], 164,
   "\"", -1],
  [/^[^]/, 164],
  [3, "keyword", e[23], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
  [/^\/\*\*(?!\/)/, 168,
   "/*", 172,
   /^\/\/.*/, -1],
  [0, 169,
   2, 344, 168, {"name":"doccomment.braced"},
   0, 170],
  [e[48], 171],
  [2, 352, 170, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 169,
   0, 168],
  [[0, /^(?!\*\/)/, /^[^]/], 172,
   "*/", -1],
  [3, "keyword", e[29], 174,
   0, 174],
  [1, 9, 175],
  [3, "keyword", e[30], 176],
  [1, 9, 177],
  [2, 360, 178, {"name":"TemplateParams"}],
  [1, 9, 179],
  [1, 9, 180],
  [1, 9, 181],
  [2, 11, -1, {"name":"Statement"}],
  ["{", 183],
  [1, 9, 184],
  [2, 11, 185, {"name":"Statement"},
   "}", -1],
  [1, 9, 184],
  [e[44], 186,
   /^\:(?!\:)/, -1],
  [0, 188,
   0, 189,
   1, 269, -1],
  [3, "keyword", e[31], 190,
   3, "keyword", e[32], 190,
   3, "keyword", e[33], 190],
  [3, "type", e[34], 191],
  [1, 9, 192],
  [1, 9, 193],
  [0, 188,
   3, "keyword", e[35], 194,
   1, 365, 194],
  [0, 189,
   3, "type", e[36], 194,
   0, 194],
  [1, 9, 195],
  [1, 371, 196,
   0, -1],
  [1, 9, 195],
  [1, 378, 198,
   1, 393, 199],
  [1, 9, 197],
  [1, 9, 200],
  [1, 293, 201,
   0, -1],
  [1, 9, 200],
  ["{", 203],
  [1, 9, 204],
  [3, "keyword", e[21], 205,
   2, 173, 206, {"name":"Template"},
   2, 414, 206, {"name":"ObjectMember"},
   "}", -1],
  [1, 9, 207],
  [1, 9, 204],
  [":", 206],
  [3, "keyword", e[23], 209,
   0, 211],
  [1, 9, 210],
  [1, 208, -1],
  [3, "keyword", e[31], 212,
   3, "keyword", e[32], 212,
   3, "keyword", e[33], 212,
   3, "keyword", e[1], 213,
   0, 213],
  [1, 9, 211],
  [1, 9, 214],
  [3, "keyword", e[35], 215,
   1, 365, 215],
  [1, 9, 216],
  [1, 371, 217,
   0, -1],
  [1, 9, 216],
  [3, "keyword", e[37], 219,
   0, 221,
   3, "def", e[41], -1],
  [3, "operator", "->*", -1,
   ",", -1,
   3, "operator", e[38], -1,
   2, 166, -1, {"name":"prefixOp","token":"operator"},
   /^(?:\(\)|\[\])/, -1,
   3, "keyword", e[39], 220,
   3, "keyword", e[40], 220],
  [/^(?:\[\])?/, -1],
  [3, "meta", /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\<)/, 222,
   3, "meta", e[27], 223],
  [1, 9, 224],
  [0, 221,
   3, "qualified def", e[41], -1],
  [2, 288, 225, {"name":"TemplateArgs"}],
  [3, "meta", "::", 226],
  [3, "qualified def", e[41], 223],
  ["{", 228],
  [1, 9, 229],
  [2, 11, 230, {"name":"Statement"},
   "}", -1],
  [1, 9, 229],
  [0, 232,
   "(", 239],
  [/^(?:\*|\&\&|\&)/, 233,
   1, 218, 234],
  [1, 9, 232],
  [1, 9, 235],
  ["[", 236,
   0, -1],
  [1, 9, 237],
  ["]", 238],
  [1, 9, 235],
  [1, 9, 240],
  [1, 231, 241],
  [1, 9, 242],
  [")", -1],
  [2, 428, 244, {"name":"ParamList"}],
  [1, 9, 245],
  [3, "keyword", e[33], 246,
   /^(?:\&|\&\&)?/, 247],
  [1, 9, 245],
  [1, 9, 248],
  [3, "keyword", e[42], 249,
   3, "keyword", e[3], 250,
   0, 261],
  [1, 9, 251],
  [1, 9, 252],
  ["(", 253,
   0, 261],
  ["(", 254],
  [1, 9, 255],
  [1, 9, 256],
  [1, 197, 257],
  [1, 433, 258],
  [1, 9, 259],
  [1, 9, 260],
  [")", 261],
  [")", 261],
  [1, 9, 262],
  ["->", 263,
   0, 265],
  [1, 9, 264],
  [1, 208, 265],
  [1, 9, 266],
  [2, 439, 267, {"name":"InitializerList"},
   0, 267],
  [1, 9, 268],
  [";", -1,
   2, 182, -1, {"name":"Block"}],
  [3, "keyword", e[35], 273,
   3, "keyword", e[23], 270,
   e[53], 271],
  [1, 9, 272],
  [3, "meta", e[27], 271,
   3, "type", e[54], 273],
  [3, "meta", e[27], 272,
   3, "type", e[24], 273],
  [1, 9, 274],
  [1, 371, 275,
   0, -1],
  [1, 9, 274],
  [2, 343, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [1, 231, 278],
  [1, 9, 279],
  [[5, 445], 280,
   1, 451, 281,
   0, 281],
  [2, 243, -1, {"name":"FunctionDef"}],
  [1, 9, 282],
  [",", 283,
   ";", -1],
  [1, 9, 284],
  [1, 218, 285],
  [1, 9, 286],
  [1, 451, 287,
   0, 287],
  [1, 9, 282],
  ["<", 289],
  [1, 9, 290],
  [1, 454, 291],
  [1, 9, 292],
  [">", -1],
  [2, 480, -1, {"name":"BlockOf"},
   2, 490, 294, {"name":"ArgList"},
   2, 490, -1, {"name":"ArgList"},
   "[", 296,
   3, "operator", e[43], -1,
   /^(?:\-\>|\.)/, 300,
   3, "operator", e[38], 302,
   "?", 304],
  [1, 9, 295],
  [2, 182, -1, {"name":"Block"},
   0, -1],
  [1, 9, 297],
  [1, 197, 298],
  [1, 9, 299],
  ["]", -1],
  [1, 9, 301],
  [2, 495, -1, {"name":"fieldName","token":"property"}],
  [1, 9, 303],
  [1, 197, -1],
  [1, 9, 305],
  [1, 197, 306],
  [1, 9, 307],
  [":", 308],
  [1, 9, 309],
  [1, 197, -1],
  ["{", 311],
  [1, 9, 312],
  [1, 218, 313,
   0, 326],
  [1, 9, 314],
  [3, "operator", "=", 315,
   0, 316],
  [1, 9, 317],
  [1, 9, 318],
  [1, 197, 316],
  [",", 319,
   0, 326],
  [1, 9, 320],
  [1, 218, 321,
   0, 322],
  [1, 9, 323],
  [1, 9, 318],
  [3, "operator", "=", 324,
   0, 322],
  [1, 9, 325],
  [1, 197, 322],
  [1, 9, 327],
  ["}", -1],
  ["(", 329],
  [1, 9, 330],
  [1, 197, 331,
   0, 331],
  [1, 9, 332],
  [")", -1],
  ["{", 334],
  [1, 9, 335],
  [1, 496, 336,
   0, 341],
  [1, 9, 337],
  [";", 338,
   0, 341],
  [1, 9, 339],
  [1, 496, 340,
   0, 340],
  [1, 9, 337],
  [1, 9, 342],
  ["}", -1],
  [3, "callee", e[55], -1,
   e[24], -1],
  ["{", 345],
  [3, "tag", e[45], 346,
   3, "tag", e[46], 347,
   2, 507, 351, {"name":"doccomment.type","token":"type"}],
  [e[44], 346,
   "{", 348,
   0, 347],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 347,
   0, 351],
  [2, 507, 349, {"name":"doccomment.type","token":"type"}],
  ["}", 350],
  [e[44], 350,
   3, "def", e[47], 347,
   0, 347],
  ["}", -1],
  [3, "tag", e[45], 353,
   3, "tag", e[46], 357],
  [e[44], 353,
   "{", 354,
   0, 357],
  [2, 507, 355, {"name":"doccomment.type","token":"type"}],
  ["}", 356],
  [e[44], 356,
   3, "def", e[47], 357,
   0, 357],
  [0, 358,
   2, 344, 357, {"name":"doccomment.braced"},
   0, -1],
  [e[48], 359],
  [0, 358,
   0, 357],
  ["<", 361],
  [1, 9, 362],
  [1, 508, 363],
  [1, 9, 364],
  [">", -1],
  [0, 366,
   3, "keyword", e[23], 369,
   0, 370],
  [3, "type", e[34], 367],
  [0, 366,
   1, 9, 368,
   0, -1],
  [3, "type", e[36], -1],
  [1, 9, 370],
  [3, "meta", e[27], 370,
   3, "type", e[24], -1],
  [2, 288, -1, {"name":"TemplateArgs"},
   "::", 372,
   "[", 374,
   /^[\*\&]/, -1,
   3, "keyword", e[33], -1],
  [1, 9, 373],
  [1, 208, -1],
  [1, 9, 375],
  [3, "number", e[19], 376,
   0, 376],
  [1, 9, 377],
  ["]", -1],
  [3, "keyword", e[40], 379,
   3, "keyword", e[39], 383,
   2, 166, -1, {"name":"prefixOp","token":"operator"},
   3, "keyword", e[49], -1],
  [1, 9, 380],
  ["[", 381,
   0, -1],
  [1, 9, 382],
  ["]", -1],
  [1, 9, 384],
  ["[", 385,
   0, 386],
  [1, 9, 387],
  [1, 9, 388],
  ["]", 386],
  ["(", 389,
   0, -1],
  [1, 9, 390],
  [1, 197, 391],
  [1, 9, 392],
  [")", -1],
  [3, "keyword", e[50], -1,
   "[", 394,
   3, "keyword", e[51], 400,
   2, 540, 412, {"name":"ParenExpr"},
   3, "atom", e[52], -1,
   3, "number", e[19], -1,
   2, 161, -1, {"name":"string","token":"string"},
   2, 480, -1, {"name":"BlockOf"},
   1, 156, -1],
  [1, 9, 395],
  [1, 545, 396],
  [1, 9, 397],
  ["]", 398],
  [1, 9, 399],
  [2, 243, -1, {"name":"FunctionDef"}],
  [1, 9, 401],
  ["<", 402],
  [1, 9, 403],
  [1, 208, 404],
  [1, 9, 405],
  [">", 406],
  [1, 9, 407],
  ["(", 408],
  [1, 9, 409],
  [1, 197, 410],
  [1, 9, 411],
  [")", -1],
  [1, 9, 413],
  [1, 197, -1,
   0, -1],
  [3, "keyword", e[31], 415,
   3, "keyword", e[32], 415,
   3, "keyword", e[33], 415,
   3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 418,
   1, 208, 416],
  [1, 9, 414],
  [1, 9, 417],
  [1, 231, 418],
  [1, 9, 419],
  [2, 243, -1, {"name":"FunctionDef"},
   1, 451, 420,
   ":", 421,
   "[", 422,
   0, 420],
  [1, 9, 423],
  [1, 9, 424],
  [1, 9, 425],
  [";", -1],
  [3, "number", e[19], 420],
  [3, "number", e[19], 426,
   0, 426],
  [1, 9, 427],
  ["]", 420],
  ["(", 429],
  [1, 9, 430],
  [1, 555, 431],
  [1, 9, 432],
  [")", -1],
  [1, 208, 434,
   0, -1],
  [1, 9, 435],
  [",", 436,
   0, -1],
  [1, 9, 437],
  [1, 208, 438],
  [1, 9, 435],
  [":", 440],
  [1, 9, 441],
  [1, 569, -1],
  [1, 9, 443],
  [1, 371, 443,
   1, 9, 444],
  [/^[a-zA-Z¡-￿_]/, -1],
  ["(", 446],
  [1, 9, 447],
  [")", -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "type", e[34], -1,
   3, "keyword", e[35], -1,
   3, "keyword", e[23], 448,
   e[53], 449],
  [1, 9, 450],
  [3, "meta", e[27], 449,
   3, "type", e[54], -1],
  [3, "meta", e[27], 450,
   3, "type", e[24], -1],
  [3, "operator", "=", 452,
   2, 480, -1, {"name":"BlockOf"},
   2, 490, -1, {"name":"ArgList"}],
  [1, 9, 453],
  [1, 197, -1],
  [3, "keyword", e[30], 455,
   0, 456,
   0, 457,
   3, "number", e[19], 458,
   0, -1],
  [1, 9, 459],
  [1, 9, 460],
  [3, "keyword", e[31], 461,
   3, "keyword", e[32], 461,
   1, 208, 462],
  [1, 9, 463],
  [2, 288, 456, {"name":"TemplateArgs"}],
  [3, "keyword", e[0], 464,
   3, "keyword", e[23], 464],
  [1, 9, 457],
  [1, 9, 465],
  [",", 466,
   0, -1],
  [1, 9, 467],
  [2, 428, 458, {"name":"ParamList"},
   1, 451, 458,
   0, 458],
  [1, 9, 468],
  [1, 208, 458],
  [3, "keyword", e[30], 469,
   0, 470,
   0, 471,
   3, "number", e[19], 472],
  [1, 9, 473],
  [1, 9, 474],
  [3, "keyword", e[31], 475,
   3, "keyword", e[32], 475,
   1, 208, 476],
  [1, 9, 463],
  [2, 288, 470, {"name":"TemplateArgs"}],
  [3, "keyword", e[0], 477,
   3, "keyword", e[23], 477],
  [1, 9, 471],
  [1, 9, 478],
  [1, 9, 479],
  [2, 428, 472, {"name":"ParamList"},
   1, 451, 472,
   0, 472],
  [1, 208, 472],
  ["{", 481],
  [1, 9, 482],
  [1, 197, 483,
   0, 488],
  [1, 9, 484],
  [",", 485,
   0, 488],
  [1, 9, 486],
  [1, 197, 487,
   0, 487],
  [1, 9, 484],
  [1, 9, 489],
  ["}", -1],
  ["(", 491],
  [1, 9, 492],
  [1, 575, 493],
  [1, 9, 494],
  [")", -1],
  [3, "callee", e[55], -1,
   e[24], -1],
  [1, 208, 497],
  [1, 9, 498],
  [2, 495, 499, {"name":"fieldName","token":"property"},
   0, 499],
  [1, 9, 500],
  [":", 501,
   "[", 502,
   0, -1],
  [1, 9, 503],
  [1, 9, 504],
  [3, "number", e[19], -1],
  [3, "number", e[19], 505,
   0, 505],
  [1, 9, 506],
  ["]", -1],
  [1, 581, -1],
  [1, 585, 509,
   0, 510,
   0, -1],
  [1, 9, 511],
  [3, "keyword", e[31], 512,
   3, "keyword", e[32], 512,
   1, 208, 513],
  [",", 514,
   0, -1],
  [1, 9, 510],
  [1, 9, 515],
  [1, 9, 516],
  [1, 218, 517],
  [1, 585, 518,
   0, 519],
  [1, 9, 520],
  [1, 9, 511],
  [3, "keyword", e[31], 521,
   3, "keyword", e[32], 521,
   1, 208, 522],
  [3, "operator", "=", 523,
   0, 509],
  [1, 9, 519],
  [1, 9, 524],
  [1, 9, 525],
  [1, 218, 526],
  [1, 378, 527,
   1, 393, 528],
  [1, 9, 529],
  [1, 9, 525],
  [1, 9, 530],
  [3, "operator", "=", 531,
   0, 518],
  [e[56], 532,
   0, 509],
  [1, 9, 533],
  [1, 293, 534],
  [1, 378, 535,
   1, 393, 536],
  [1, 9, 530],
  [1, 9, 533],
  [1, 9, 537],
  [e[56], 538,
   0, 518],
  [1, 293, 539],
  [1, 9, 537],
  ["(", 541],
  [1, 9, 542],
  [1, 197, 543,
   0, 543],
  [1, 9, 544],
  [")", -1],
  ["&", 546,
   "=", 547,
   3, "keyword", e[50], 547,
   0, -1],
  [1, 9, 548],
  [1, 9, 549],
  [1, 156, 547,
   0, 547],
  [",", 550,
   0, -1],
  [1, 9, 551],
  ["&", 552,
   "=", 553,
   3, "keyword", e[50], 553],
  [1, 9, 554],
  [1, 9, 549],
  [1, 156, 553,
   0, 553],
  [1, 208, 556,
   0, -1],
  [1, 9, 557],
  [1, 231, 558,
   0, 559],
  [1, 9, 560],
  [1, 9, 561],
  [2, 428, 559, {"name":"ParamList"},
   0, 559],
  [",", 562,
   0, -1],
  [1, 9, 563],
  [1, 208, 564],
  [1, 9, 565],
  [1, 231, 566,
   0, 567],
  [1, 9, 568],
  [1, 9, 561],
  [2, 428, 567, {"name":"ParamList"},
   0, 567],
  [1, 596, 570,
   0, -1],
  [1, 9, 571],
  [",", 572,
   0, -1],
  [1, 9, 573],
  [1, 596, 574],
  [1, 9, 571],
  [1, 197, 576,
   0, -1],
  [1, 9, 577],
  [",", 578,
   0, -1],
  [1, 9, 579],
  [1, 197, 580],
  [1, 9, 577],
  [/^(?!\}|\*\/)/, 582,
   0, -1],
  ["{", 583,
   /^[^]/, 581],
  [1, 581, 584],
  [/^\}?/, 581],
  [3, "keyword", e[30], 586,
   0, 588],
  [1, 9, 587],
  [2, 288, 588, {"name":"TemplateArgs"}],
  [1, 9, 589],
  [3, "keyword", e[0], 590,
   3, "keyword", e[23], 590],
  [1, 9, 591],
  [3, "type def", e[24], 592],
  [1, 9, 593],
  [3, "operator", "=", 594,
   0, -1],
  [1, 9, 595],
  [1, 156, -1,
   3, "number", e[19], -1],
  [2, 495, 597, {"name":"fieldName","token":"property"}],
  [1, 9, 598],
  ["(", 599,
   "{", 600],
  [1, 9, 601],
  [1, 9, 602],
  [1, 575, 603],
  [1, 575, 604],
  [1, 9, 605],
  [1, 9, 606],
  [")", -1],
  ["}", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}
function isLocalType(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var typeRE = /(^|\s)type($|\s)/;

function markTypeLocals(type, scopes, stream, state) {
  if (type == "type def") {
    var scope = getScope(state.context, scopes);
    if (scope) {
      if (!scope.localTypes) { scope.localTypes = []; }
      scope.localTypes.push(stream.current());
    }
  } else if (typeRE.test(type) && !/qualified/.test(type) &&
             isLocalType(state.context, stream.current())) {
    type += " local";
  }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", EnumBody: "}",
  ArrayInitializer: "}", NamespaceBlock: "}",
  ArrayLiteral: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")",
  TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
};

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr" ||
        cx.name == "EnumConstant" || cx.name == "Template" || cx.name == "AnnotationTypeItem")
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function plus(result, add) {
  return typeof result == "number" ? result + add : result
}

function findIndent(cx, textAfter, curLine, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  if (brack) {
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (config.align !== false && curLine != cx.startLine && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (cx.name == "Block" || cx.name == "NamespaceBlock" || cx.name == "ClassBody" || cx.name == "AnnotationTypeBody" || cx.name == "BlockOf" || cx.name == "EnumBody") {
      // Skip wrapping statement context
      var skipCx = cx;
      if (cx.parent && cx.parent.name == "Statement" && cx.parent.parent &&
          cx.parent.parent.name == "Statement" && hasSubStatement(cx.parent.parent))
        { skipCx = cx.parent.parent; }
      return statementIndent(skipCx, config) + (
        /^(public|private|protected)\s*:/.test(textAfter) ? 1 :
        closed || cx.name == "NamespaceBlock" ? 0 :
        isSwitch(cx.parent) && !isLabel(textAfter) ? 2 * config.indentUnit
        : config.indentUnit
      )
    }

    var flat = closed && brack != ")" || curLine == cx.startLine && cx.name != "CondExpr";
    return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) +
      (flat ? 0 : config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1))
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "EnumConstant" ||
             cx.name == "AnnotationTypeItem") {
    var base = statementIndent(cx, config), sub;
    if (!curLine && (sub = hasSubStatement(cx)))
      { return base + (sub == "if" && (/[{;]\s*(\/\/.*)?$/.test(cx.startLine) || /^else\b/.test(textAfter)) ? 0 : config.indentUnit); }
    var flat$1 = curLine == cx.startLine ||
        curLine && CodeMirror.countColumn(curLine, null, config.tabSize) <= base;
    return base + (flat$1 ? 0 : 2 * config.indentUnit)
  } else if (cx.name == "ArrowRest") {
    return plus(findIndent(cx.parent, textAfter, cx.startLine, config), config.indentUnit)
  } else {
    return plus(findIndent(cx.parent, textAfter, curLine, config),
                cx.name == "InitializerList" ? 2 :
                cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos)) ? 2 * config.indentUnit :
                0)
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

function localConstructorAhead(line, pos, cx) {
  var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
  if (!ahead) { return false }
  while (cx.name != "Statement") { cx = cx.parent; }
  var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
  return className ? className[1] == ahead[1] : false
}

var rawStringOpen = /R"(.*?)\(/g;

function rawStringContinues(line, pos, cx) {
  rawStringOpen.lastIndex = cx.startPos;
  var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
  return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
}

var scopes = ["Block", "FunctionDef"];
var typeScopes = ["Template"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.blockCommentContinue = " * ";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
