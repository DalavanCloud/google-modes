(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z_]+|[A-Z]+_[A-Z_]*)/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\<)/, /^(?:\:\:|[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]* *\:\:)/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^else(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_])/, /^\@[a-zA-Z¡-￿_]+/, /^[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_]|\{)/, /^[^]/], /^(?:\.\.\.)?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 492]], /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?!\>)/, /^(?:\*|\&\&|\&)/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 12, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[5], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[43], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[7], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[54], -1,
   3, "keyword", e[35], -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[32], -1,
   3, "type", e[34], -1,
   3, "type", e[36], -1,
   3, "keyword", e[33], -1,
   3, "atom", e[53], -1,
   3, "meta", e[17], -1,
   1, 138, -1,
   3, "number", e[25], -1,
   2, 143, -1, {"name":"string","token":"string"},
   2, 148, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[41], -1,
   3, "operator", e[42], -1,
   2, 149, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[0], -1,
   3, "keyword", e[19], -1,
   3, "keyword", e[50], -1,
   3, "keyword", e[40], -1,
   3, "keyword", e[51], -1,
   3, "keyword", e[2], -1,
   3, "keyword", e[18], -1,
   3, "keyword", e[1], -1,
   3, "keyword", e[38], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[26], -1,
   3, "keyword", e[27], -1,
   3, "keyword", e[28], -1,
   3, "keyword", e[58], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[24], -1,
   3, "keyword", e[52], -1,
   3, "keyword", e[39], -1,
   /^[^]/, -1],
  ["#", 7],
  [/^(?!\/\/|\/\*|\\)./, 7,
   "\\", 8,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 149, 9, {"name":"comment","token":"comment"},
   0, -1],
  [/^[ \t]*/, 11],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [1, 155, -1,
   1, 172, -1,
   3, "keyword", e[0], 13,
   3, "keyword", e[1], 21,
   3, "keyword", e[2], 25,
   3, "keyword", e[3], 40,
   3, "keyword", e[4], 46,
   2, 187, -1, {"name":"Template"},
   [7, "constructorAhead"], 58,
   0, 61,
   3, "keyword", e[5], 71,
   3, "keyword", e[6], 75,
   3, "keyword", e[7], 76,
   3, "keyword", e[8], 77,
   3, "keyword", e[9], 101,
   3, "keyword", e[10], 106,
   2, 196, -1, {"name":"Block"},
   3, "keyword", e[11], 110,
   3, "keyword", e[12], 112,
   3, "keyword", e[13], 116,
   3, "keyword", e[14], 120,
   3, "keyword", e[15], 126,
   3, "keyword", e[16], 127,
   [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 200]], 126,
   3, "meta", e[17], 130,
   2, 201, 134, {"name":"DeclType"},
   ";", -1,
   1, 211, 136],
  [1, 9, 14],
  [1, 216, 15,
   0, 15],
  [1, 9, 16],
  [3, "operator", "=", 17,
   2, 223, -1, {"name":"NamespaceBlock"}],
  [1, 9, 18],
  [1, 138, 19],
  [1, 9, 20],
  [";", -1],
  [1, 9, 22],
  [1, 211, 23],
  [1, 9, 24],
  [";", -1],
  [1, 9, 26],
  [2, 196, 27, {"name":"Block"}],
  [1, 9, 28],
  [3, "keyword", e[18], 29,
   0, -1],
  [1, 9, 30],
  ["(", 31],
  [1, 9, 32],
  [1, 227, 33],
  [1, 9, 34],
  [1, 237, 35,
   0, 35],
  [1, 9, 36],
  [")", 37],
  [1, 9, 38],
  [2, 196, 39, {"name":"Block"}],
  [1, 9, 28],
  [1, 9, 41],
  ["{", 42],
  [1, 9, 43],
  [2, 143, 44, {"name":"string","token":"string"}],
  [1, 9, 45],
  ["}", -1],
  [1, 9, 47],
  [3, "keyword", e[19], 48,
   3, "keyword", e[0], 49,
   0, 49],
  [1, 9, 50],
  [1, 9, 51],
  [1, 227, 52],
  [1, 138, 52],
  [1, 9, 53],
  [3, "operator", "=", 54,
   0, 55],
  [1, 9, 56],
  [1, 9, 57],
  [1, 227, 55],
  [";", -1],
  [1, 216, 59],
  [1, 9, 60],
  [2, 249, -1, {"name":"FunctionDef"}],
  [3, "meta", e[22], 62],
  [1, 9, 63],
  [0, 61,
   1, 282, 64,
   3, "variable qualified", e[21], 65,
   2, 289, 66, {"name":"qualifiedVariableName","token":"qualified"}],
  [1, 9, 67],
  [1, 9, 68],
  [1, 9, 69],
  [1, 290, -1],
  [2, 301, 66, {"name":"TemplateArgs"}],
  [1, 306, 70,
   ";", -1],
  [1, 9, 69],
  [1, 9, 72],
  [3, "type def", e[20], 73,
   0, 73],
  [1, 9, 74],
  [2, 323, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 78],
  [1, 9, 79],
  [1, 9, 80],
  ["(", 81],
  [2, 341, 82, {"name":"CondExpr"}],
  [2, 12, 83, {"name":"Statement"}],
  [1, 9, 84],
  [1, 9, 85],
  [1, 9, 86],
  [2, 12, 87, {"name":"Statement"}],
  [2, 12, -1, {"name":"Statement"}],
  [3, "keyword", e[7], 88],
  [1, 9, 89],
  [1, 9, 90],
  [1, 211, 91,
   0, 91],
  [2, 341, 92, {"name":"CondExpr"}],
  [1, 9, 93],
  [1, 9, 94],
  [";", 95],
  [";", -1],
  [1, 9, 96],
  [1, 211, 97,
   0, 97],
  [1, 9, 98],
  [")", 99],
  [1, 9, 100],
  [2, 12, -1, {"name":"Statement"}],
  [1, 9, 102],
  [2, 341, 103, {"name":"CondExpr"}],
  [1, 9, 104],
  [2, 12, 105, {"name":"Statement"}],
  [2, 346, -1, {"name":"Alternative"}],
  [1, 9, 107],
  [2, 341, 108, {"name":"CondExpr"}],
  [1, 9, 109],
  [2, 196, -1, {"name":"Block"}],
  [1, 9, 111],
  [";", -1],
  [1, 9, 113],
  [e[20], 114],
  [1, 9, 115],
  [";", -1],
  [1, 9, 117],
  [1, 211, 118,
   0, 118],
  [1, 9, 119],
  [";", -1],
  [1, 9, 121],
  [1, 216, 122,
   0, 122],
  [1, 9, 123],
  [2, 350, 124, {"name":"BlockOf"},
   0, 124],
  [1, 9, 125],
  [";", -1],
  [1, 9, 128],
  [1, 9, 129],
  [":", -1],
  [1, 211, 126],
  [1, 9, 131],
  [2, 360, 132, {"name":"ArgList"},
   0, 132],
  [1, 9, 133],
  [/^\;?/, -1],
  [1, 9, 135],
  [1, 290, -1],
  [1, 9, 137],
  [";", -1],
  [0, 139,
   3, "type", e[23], -1,
   3, "variable", e[21], 142,
   2, 365, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [3, "meta", e[22], 140],
  [0, 139,
   3, "variable qualified", e[21], 141,
   3, "type", e[23], -1,
   2, 289, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [2, 301, -1, {"name":"TemplateArgs"}],
  [2, 301, -1, {"name":"TemplateArgs"}],
  [/^R\"(?:(?!\().)*\(/, 144,
   /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 145],
  [[0, [7, "rawStringContinues"], /^[^]/], 144,
   "\"", -1],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 146],
  ["\\", 147,
   [0, /^(?!\")/, /^[^]/], 146,
   "\"", -1],
  [/^[^]/, 146],
  [3, "keyword", e[19], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
  [/^\/\*\*(?!\/)/, 150,
   "/*", 154,
   /^\/\/.*/, -1],
  [0, 151,
   2, 366, 150, {"name":"doccomment.braced"},
   0, 152],
  [e[48], 153],
  [2, 374, 152, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 151,
   0, 150],
  [[0, /^(?!\*\/)/, /^[^]/], 154,
   "*/", -1],
  [3, "keyword", e[24], 157,
   [0, [5, 382], "["], 158],
  [0, 155,
   0, -1],
  [1, 9, 159],
  [1, 9, 160],
  ["(", 161],
  ["[", 162],
  [1, 9, 163],
  [1, 9, 164],
  [3, "number", e[25], 165],
  [1, 386, 166],
  [1, 9, 167],
  [1, 9, 168],
  [")", 169],
  ["]", 170],
  [1, 9, 156],
  [1, 9, 171],
  ["]", 169],
  [3, "keyword", e[26], 173,
   3, "keyword", e[14], 173],
  [1, 9, 174],
  [1, 155, 175,
   0, 175],
  [1, 9, 176],
  [3, "type def", e[20], 177],
  [1, 9, 178],
  [":", 179,
   0, 185],
  [1, 9, 180],
  [3, "keyword", e[27], 181,
   0, 181],
  [1, 9, 182],
  [3, "keyword", e[28], 183,
   0, 183],
  [1, 9, 184],
  [1, 227, 185],
  [1, 9, 186],
  [";", -1,
   2, 408, -1, {"name":"ClassBody"}],
  [3, "keyword", e[29], 188,
   0, 188],
  [1, 9, 189],
  [3, "keyword", e[30], 190],
  [1, 9, 191],
  [2, 412, 192, {"name":"TemplateParams"}],
  [1, 9, 193],
  [1, 9, 194],
  [1, 9, 195],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 197],
  [1, 9, 198],
  [2, 12, 199, {"name":"Statement"},
   "}", -1],
  [1, 9, 198],
  [e[44], 200,
   /^\:(?!\:)/, -1],
  [0, 202,
   0, 203,
   1, 282, -1],
  [3, "keyword", e[31], 204,
   3, "keyword", e[32], 204,
   3, "keyword", e[33], 204],
  [3, "type", e[34], 205],
  [1, 9, 206],
  [1, 9, 207],
  [0, 202,
   3, "keyword", e[35], 208,
   1, 417, 208],
  [0, 203,
   3, "type", e[36], 208,
   0, 208],
  [1, 9, 209],
  [1, 423, 210,
   0, -1],
  [1, 9, 209],
  [1, 430, 212,
   1, 447, 213],
  [1, 9, 211],
  [1, 9, 214],
  [1, 306, 215,
   0, -1],
  [1, 9, 214],
  [0, 217,
   3, "def", e[37], -1],
  [3, "meta", /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\<)/, 218,
   3, "meta", e[22], 219],
  [1, 9, 220],
  [0, 217,
   3, "qualified def", e[37], -1],
  [2, 301, 221, {"name":"TemplateArgs"}],
  [3, "meta", "::", 222],
  [3, "qualified def", e[37], 219],
  ["{", 224],
  [1, 9, 225],
  [2, 12, 226, {"name":"Statement"},
   "}", -1],
  [1, 9, 225],
  [3, "keyword", e[19], 228,
   0, 230],
  [1, 9, 229],
  [1, 227, -1],
  [3, "keyword", e[31], 231,
   3, "keyword", e[32], 231,
   3, "keyword", e[33], 231,
   3, "keyword", e[14], 232,
   0, 232],
  [1, 9, 230],
  [1, 9, 233],
  [3, "keyword", e[35], 234,
   1, 417, 234],
  [1, 9, 235],
  [1, 423, 236,
   0, -1],
  [1, 9, 235],
  [0, 238,
   "(", 245],
  [e[60], 239,
   1, 216, 240],
  [1, 9, 238],
  [1, 9, 241],
  ["[", 242,
   0, -1],
  [1, 9, 243],
  ["]", 244],
  [1, 9, 241],
  [1, 9, 246],
  [1, 237, 247],
  [1, 9, 248],
  [")", -1],
  [2, 478, 250, {"name":"ParamList"}],
  [1, 9, 251],
  [3, "keyword", e[33], 252,
   /^(?:\&|\&\&)?/, 253],
  [1, 9, 251],
  [1, 9, 254],
  [3, "keyword", e[38], 255,
   3, "keyword", e[1], 256,
   0, 267],
  [1, 9, 257],
  [1, 9, 258],
  ["(", 259,
   0, 267],
  ["(", 260],
  [1, 9, 261],
  [1, 9, 262],
  [1, 211, 263],
  [1, 483, 264],
  [1, 9, 265],
  [1, 9, 266],
  [")", 267],
  [")", 267],
  [1, 9, 268],
  [1, 155, 269,
   0, 269],
  [1, 9, 270],
  ["->", 271,
   0, 273],
  [1, 9, 272],
  [1, 227, 273],
  [1, 9, 274],
  [3, "keyword", e[39], 275,
   2, 489, 276, {"name":"InitializerList"},
   0, 276],
  [1, 9, 274],
  [1, 9, 277],
  [";", -1,
   2, 196, -1, {"name":"Block"},
   3, "operator", "=", 278],
  [1, 9, 279],
  [3, "keyword", e[15], 280,
   3, "keyword", e[40], 280],
  [1, 9, 281],
  [";", -1],
  [3, "keyword", e[35], 286,
   3, "keyword", e[19], 283,
   e[55], 284],
  [1, 9, 285],
  [3, "meta", e[22], 284,
   3, "type", e[56], 286],
  [3, "meta", e[22], 285,
   3, "type", e[20], 286],
  [1, 9, 287],
  [1, 423, 288,
   0, -1],
  [1, 9, 287],
  [2, 365, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [1, 237, 291],
  [1, 9, 292],
  [[5, 495], 293,
   1, 501, 294,
   0, 294],
  [2, 249, -1, {"name":"FunctionDef"}],
  [1, 9, 295],
  [",", 296,
   ";", -1],
  [1, 9, 297],
  [1, 216, 298],
  [1, 9, 299],
  [1, 501, 300,
   0, 300],
  [1, 9, 295],
  ["<", 302],
  [1, 9, 303],
  [1, 504, 304],
  [1, 9, 305],
  [">", -1],
  [2, 534, -1, {"name":"BlockOf"},
   2, 360, 307, {"name":"ArgList"},
   2, 360, -1, {"name":"ArgList"},
   "[", 309,
   3, "operator", e[41], -1,
   /^(?:\-\>|\.)/, 313,
   3, "operator", e[42], 315,
   "?", 317],
  [1, 9, 308],
  [2, 196, -1, {"name":"Block"},
   0, -1],
  [1, 9, 310],
  [1, 211, 311],
  [1, 9, 312],
  ["]", -1],
  [1, 9, 314],
  [2, 544, -1, {"name":"fieldName","token":"property"}],
  [1, 9, 316],
  [1, 211, -1],
  [1, 9, 318],
  [1, 211, 319],
  [1, 9, 320],
  [":", 321],
  [1, 9, 322],
  [1, 211, -1],
  ["{", 324],
  [1, 9, 325],
  [1, 545, 326,
   0, 339],
  [1, 9, 327],
  [3, "operator", "=", 328,
   0, 329],
  [1, 9, 330],
  [1, 9, 331],
  [1, 211, 329],
  [",", 332,
   0, 339],
  [1, 9, 333],
  [1, 545, 334,
   0, 335],
  [1, 9, 336],
  [1, 9, 331],
  [3, "operator", "=", 337,
   0, 335],
  [1, 9, 338],
  [1, 211, 335],
  [1, 9, 340],
  ["}", -1],
  ["(", 342],
  [1, 9, 343],
  [1, 211, 344,
   0, 344],
  [1, 9, 345],
  [")", -1],
  [1, 9, 347],
  [3, "keyword", e[43], 348,
   0, -1],
  [1, 9, 349],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 351],
  [1, 9, 352],
  [1, 548, 353,
   0, 358],
  [1, 9, 354],
  [";", 355,
   0, 358],
  [1, 9, 356],
  [1, 548, 357,
   0, 357],
  [1, 9, 354],
  [1, 9, 359],
  ["}", -1],
  ["(", 361],
  [1, 9, 362],
  [1, 559, 363],
  [1, 9, 364],
  [")", -1],
  [3, "callee", e[57], -1,
   e[20], -1],
  ["{", 367],
  [3, "tag", e[45], 368,
   3, "tag", e[46], 369,
   2, 565, 373, {"name":"doccomment.type","token":"type"}],
  [e[44], 368,
   "{", 370,
   0, 369],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 369,
   0, 373],
  [2, 565, 371, {"name":"doccomment.type","token":"type"}],
  ["}", 372],
  [e[44], 372,
   3, "def", e[47], 369,
   0, 369],
  ["}", -1],
  [3, "tag", e[45], 375,
   3, "tag", e[46], 379],
  [e[44], 375,
   "{", 376,
   0, 379],
  [2, 565, 377, {"name":"doccomment.type","token":"type"}],
  ["}", 378],
  [e[44], 378,
   3, "def", e[47], 379,
   0, 379],
  [0, 380,
   2, 366, 379, {"name":"doccomment.braced"},
   0, -1],
  [e[48], 381],
  [0, 380,
   0, 379],
  ["[", 383],
  [1, 9, 384],
  [" ", 385,
   "[", -1],
  [1, 9, 384],
  [3, "meta", e[22], 387,
   3, "meta", e[20], 388,
   0, -1],
  [1, 9, 386],
  [1, 9, 389],
  ["(", 390,
   0, 391],
  [1, 9, 392],
  [1, 9, 393],
  [1, 566, 394,
   ")", 391],
  [e[49], 395],
  [1, 9, 392],
  [1, 9, 396],
  [",", 397,
   0, -1],
  [1, 9, 398],
  [3, "meta", e[22], 399,
   3, "meta", e[20], 400],
  [1, 9, 398],
  [1, 9, 401],
  ["(", 402,
   0, 403],
  [1, 9, 404],
  [1, 9, 405],
  [1, 566, 406,
   ")", 403],
  [e[49], 407],
  [1, 9, 404],
  [1, 9, 396],
  ["{", 409],
  [1, 9, 410],
  [2, 576, 411, {"name":"ClassItem"},
   "}", -1],
  [1, 9, 410],
  ["<", 413],
  [1, 9, 414],
  [1, 583, 415],
  [1, 9, 416],
  [">", -1],
  [0, 418,
   3, "keyword", e[19], 421,
   0, 422],
  [3, "type", e[34], 419],
  [0, 418,
   1, 9, 420,
   0, -1],
  [3, "type", e[36], -1],
  [1, 9, 422],
  [3, "meta", e[22], 422,
   3, "type", e[20], -1],
  [2, 301, -1, {"name":"TemplateArgs"},
   "::", 424,
   1, 155, -1,
   "[", 426,
   /^[\*\&]/, -1,
   3, "keyword", e[33], -1],
  [1, 9, 425],
  [1, 227, -1],
  [1, 9, 427],
  [3, "number", e[25], 428,
   0, 428],
  [1, 9, 429],
  ["]", -1],
  [3, "keyword", e[40], 431,
   3, "keyword", e[50], 435,
   2, 148, -1, {"name":"prefixOp","token":"operator"}],
  [1, 9, 432],
  ["[", 433,
   0, -1],
  [1, 9, 434],
  ["]", -1],
  [1, 9, 436],
  ["[", 437,
   0, 438],
  [1, 9, 439],
  [1, 9, 440],
  ["]", 438],
  ["(", 441,
   0, 442],
  [1, 9, 443],
  [1, 9, 444],
  [1, 211, 445],
  [1, 155, -1,
   0, -1],
  [1, 9, 446],
  [")", 442],
  [3, "keyword", e[51], -1,
   [0, [5, 619], "["], 448,
   3, "keyword", e[52], 454,
   2, 623, 466, {"name":"ParenExpr"},
   3, "atom", e[53], -1,
   3, "number", e[25], -1,
   2, 143, -1, {"name":"string","token":"string"},
   2, 534, -1, {"name":"BlockOf"},
   3, "keyword", e[54], 468,
   1, 138, -1],
  [1, 9, 449],
  [1, 628, 450],
  [1, 9, 451],
  ["]", 452],
  [1, 9, 453],
  [2, 249, -1, {"name":"FunctionDef"},
   2, 196, -1, {"name":"Block"}],
  [1, 9, 455],
  ["<", 456],
  [1, 9, 457],
  [1, 227, 458],
  [1, 9, 459],
  [">", 460],
  [1, 9, 461],
  ["(", 462],
  [1, 9, 463],
  [1, 211, 464],
  [1, 9, 465],
  [")", -1],
  [1, 9, 467],
  [1, 211, -1,
   0, -1],
  [1, 9, 469],
  ["(", 470,
   e[49], 471],
  [1, 9, 472],
  [1, 9, 473],
  [1, 227, 474],
  [1, 211, 475],
  [1, 9, 476],
  [1, 9, 477],
  [")", 475],
  [3, "meta", e[17], -1],
  ["(", 479],
  [1, 9, 480],
  [1, 638, 481],
  [1, 9, 482],
  [")", -1],
  [1, 227, 484,
   0, -1],
  [1, 9, 485],
  [",", 486,
   0, -1],
  [1, 9, 487],
  [1, 227, 488],
  [1, 9, 485],
  [":", 490],
  [1, 9, 491],
  [1, 652, -1],
  [1, 9, 493],
  [1, 423, 494,
   /^[a-zA-Z¡-￿_]/, -1],
  [1, 9, 493],
  ["(", 496],
  [1, 9, 497],
  [")", -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "type", e[34], -1,
   3, "keyword", e[35], -1,
   3, "keyword", e[19], 498,
   e[55], 499],
  [1, 9, 500],
  [3, "meta", e[22], 499,
   3, "type", e[56], -1],
  [3, "meta", e[22], 500,
   3, "type", e[20], -1],
  [3, "operator", "=", 502,
   2, 534, -1, {"name":"BlockOf"},
   2, 360, -1, {"name":"ArgList"}],
  [1, 9, 503],
  [1, 211, -1],
  [3, "keyword", e[30], 505,
   0, 506,
   0, 507,
   3, "number", e[25], 508,
   0, -1],
  [1, 9, 509],
  [1, 9, 510],
  [3, "keyword", e[31], 511,
   3, "keyword", e[32], 511,
   1, 227, 512],
  [1, 9, 513],
  [2, 301, 506, {"name":"TemplateArgs"}],
  [3, "keyword", e[26], 514,
   3, "keyword", e[19], 514],
  [1, 9, 507],
  [1, 9, 515],
  [",", 516,
   0, -1],
  [1, 9, 517],
  [e[49], 518],
  [1, 9, 519],
  [1, 227, 508],
  [1, 9, 520],
  [3, "keyword", e[30], 521,
   0, 522,
   0, 523,
   3, "number", e[25], 524],
  [2, 478, 508, {"name":"ParamList"},
   1, 501, 508,
   0, 508],
  [1, 9, 525],
  [1, 9, 526],
  [3, "keyword", e[31], 527,
   3, "keyword", e[32], 527,
   1, 227, 528],
  [1, 9, 513],
  [2, 301, 522, {"name":"TemplateArgs"}],
  [3, "keyword", e[26], 529,
   3, "keyword", e[19], 529],
  [1, 9, 523],
  [1, 9, 530],
  [1, 9, 531],
  [e[49], 532],
  [1, 227, 524],
  [1, 9, 533],
  [2, 478, 524, {"name":"ParamList"},
   1, 501, 524,
   0, 524],
  ["{", 535],
  [1, 9, 536],
  [1, 211, 537,
   0, 542],
  [1, 9, 538],
  [",", 539,
   0, 542],
  [1, 9, 540],
  [1, 211, 541,
   0, 541],
  [1, 9, 538],
  [1, 9, 543],
  ["}", -1],
  [3, "callee", e[57], -1,
   e[20], -1],
  [3, "keyword", e[58], 546,
   3, "def property", e[20], -1],
  [3, "operator", "->*", -1,
   ",", -1,
   3, "operator", e[42], -1,
   2, 148, -1, {"name":"prefixOp","token":"operator"},
   /^(?:\(\)|\[\])/, -1,
   3, "keyword", e[50], 547,
   3, "keyword", e[40], 547],
  [/^(?:\[\])?/, -1],
  [1, 227, 549],
  [1, 9, 550],
  [2, 544, 551, {"name":"fieldName","token":"property"},
   0, 551],
  [1, 9, 552],
  [":", 553,
   "[", 554,
   0, -1],
  [1, 9, 555],
  [1, 9, 556],
  [3, "number", e[25], -1],
  [3, "number", e[25], 557,
   0, 557],
  [1, 9, 558],
  ["]", -1],
  [1, 211, 560,
   0, -1],
  [1, 9, 561],
  [",", 562,
   0, -1],
  [1, 9, 563],
  [1, 211, 564],
  [1, 9, 561],
  [1, 658, -1],
  [3, "number", e[25], -1,
   2, 143, -1, {"name":"string","token":"string"},
   e[20], -1,
   3, "operator", e[42], -1,
   ",", -1,
   "(", 567,
   "[", 570,
   "{", 573],
  [1, 9, 568],
  [1, 566, 569,
   ")", -1],
  [1, 9, 568],
  [1, 9, 571],
  [1, 566, 572,
   "]", -1],
  [1, 9, 571],
  [1, 9, 574],
  [1, 566, 575,
   "}", -1],
  [1, 9, 574],
  [3, "keyword", e[28], 577,
   2, 187, -1, {"name":"Template"},
   3, "meta", e[17], 579,
   1, 172, -1,
   2, 662, -1, {"name":"ObjectMember"}],
  [1, 9, 578],
  [":", -1],
  [1, 9, 580],
  [2, 360, 581, {"name":"ArgList"},
   0, 581],
  [1, 9, 582],
  [/^\;?/, -1],
  [1, 676, 584,
   0, 585,
   0, -1],
  [1, 9, 586],
  [3, "keyword", e[31], 587,
   3, "keyword", e[32], 587,
   1, 227, 588],
  [",", 589,
   0, -1],
  [1, 9, 585],
  [1, 9, 590],
  [1, 9, 591],
  [e[49], 592],
  [1, 676, 593,
   0, 594],
  [1, 9, 595],
  [1, 9, 586],
  [3, "keyword", e[31], 596,
   3, "keyword", e[32], 596,
   1, 227, 597],
  [1, 216, 598],
  [1, 9, 594],
  [1, 9, 599],
  [1, 9, 600],
  [e[49], 601],
  [3, "operator", "=", 602,
   0, 584],
  [1, 9, 603],
  [1, 9, 604],
  [1, 216, 605],
  [1, 430, 606,
   1, 447, 607],
  [1, 9, 608],
  [1, 9, 604],
  [1, 9, 609],
  [3, "operator", "=", 610,
   0, 593],
  [e[59], 611,
   0, 584],
  [1, 9, 612],
  [1, 306, 613],
  [1, 430, 614,
   1, 447, 615],
  [1, 9, 609],
  [1, 9, 612],
  [1, 9, 616],
  [e[59], 617,
   0, 593],
  [1, 306, 618],
  [1, 9, 616],
  ["[", 620],
  [1, 9, 621],
  [e[44], 622,
   /^(?:\&|\=|this|\])/, -1],
  [1, 9, 621],
  ["(", 624],
  [1, 9, 625],
  [1, 211, 626,
   0, 626],
  [1, 9, 627],
  [")", -1],
  ["&", 629,
   "=", 630,
   3, "keyword", e[51], 630,
   0, -1],
  [1, 9, 631],
  [1, 9, 632],
  [1, 138, 630,
   0, 630],
  [",", 633,
   0, -1],
  [1, 9, 634],
  ["&", 635,
   "=", 636,
   3, "keyword", e[51], 636],
  [1, 9, 637],
  [1, 9, 632],
  [1, 138, 636,
   0, 636],
  [1, 227, 639,
   0, -1],
  [1, 9, 640],
  [1, 237, 641,
   0, 642],
  [1, 9, 643],
  [1, 9, 644],
  [2, 478, 642, {"name":"ParamList"},
   0, 642],
  [",", 645,
   0, -1],
  [1, 9, 646],
  [1, 227, 647],
  [1, 9, 648],
  [1, 237, 649,
   0, 650],
  [1, 9, 651],
  [1, 9, 644],
  [2, 478, 650, {"name":"ParamList"},
   0, 650],
  [1, 687, 653,
   0, -1],
  [1, 9, 654],
  [",", 655,
   0, -1],
  [1, 9, 656],
  [1, 687, 657],
  [1, 9, 654],
  [/^(?!\}|\*\/)/, 659,
   0, -1],
  ["{", 660,
   /^[^]/, 658],
  [1, 658, 661],
  [/^\}?/, 658],
  [3, "keyword", e[31], 663,
   3, "keyword", e[32], 663,
   3, "keyword", e[33], 663,
   3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 666,
   1, 227, 664],
  [1, 9, 662],
  [1, 9, 665],
  [1, 698, 666],
  [1, 9, 667],
  [2, 249, -1, {"name":"FunctionDef"},
   1, 501, 668,
   ":", 669,
   "[", 670,
   0, 668],
  [1, 9, 671],
  [1, 9, 672],
  [1, 9, 673],
  [";", -1],
  [3, "number", e[25], 668],
  [3, "number", e[25], 674,
   0, 674],
  [1, 9, 675],
  ["]", 668],
  [3, "keyword", e[30], 677,
   0, 679],
  [1, 9, 678],
  [2, 301, 679, {"name":"TemplateArgs"}],
  [1, 9, 680],
  [3, "keyword", e[26], 681,
   3, "keyword", e[19], 681],
  [1, 9, 682],
  [3, "type def", e[20], 683],
  [1, 9, 684],
  [3, "operator", "=", 685,
   0, -1],
  [1, 9, 686],
  [1, 138, -1,
   3, "number", e[25], -1],
  [2, 544, 688, {"name":"fieldName","token":"property"}],
  [1, 9, 689],
  ["(", 690,
   "{", 691],
  [1, 9, 692],
  [1, 9, 693],
  [1, 559, 694],
  [1, 559, 695],
  [1, 9, 696],
  [1, 9, 697],
  [")", -1],
  ["}", -1],
  [0, 699,
   "(", 706],
  [e[60], 700,
   1, 545, 701],
  [1, 9, 699],
  [1, 9, 702],
  ["[", 703,
   0, -1],
  [1, 9, 704],
  ["]", 705],
  [1, 9, 702],
  [1, 9, 707],
  [1, 698, 708],
  [1, 9, 709],
  [")", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}
function isLocalType(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
      if (state.context.name != "funcName") { return "def local" }
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var typeRE = /(^|\s)type($|\s)/;

function markTypeLocals(type, scopes, stream, state) {
  if (type == "type def") {
    var scope = getScope(state.context, scopes);
    if (scope) {
      if (!scope.localTypes) { scope.localTypes = []; }
      scope.localTypes.push(stream.current());
    }
  } else if (typeRE.test(type) && !/qualified/.test(type) &&
             isLocalType(state.context, stream.current())) {
    type += " local";
  }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", EnumBody: "}",
  ArrayInitializer: "}", NamespaceBlock: "}",
  ArrayLiteral: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")",
  TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
};

function baseIndent(cx, config) {
  for (var startLine = cx.startLine;; cx = cx.parent) {
    if (cx.name == "CondExpr")
      { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
    if (!cx.parent || cx.parent.startLine != startLine)
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function findIndent(cx, textAfter, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  var closed = textAfter && textAfter.charAt(0) == brack;
  if (brack && config.align !== false && aligned(cx))
    { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

  if (brack && (cx.name == "Block" || cx.name == "NamespaceBlock" || cx.name == "ClassBody" ||
                cx.name == "AnnotationTypeBody" || cx.name == "BlockOf" || cx.name == "EnumBody")) {
    var parent = cx.parent;
    if (parent && parent.name == "Statement" && parent.parent &&
        parent.parent.name == "Statement" && hasSubStatement(parent.parent))
      { parent = parent.parent; }
    var base$1 = statementIndent(parent, config);

    if (closed || cx.name == "NamespaceBlock") { return base$1 }
    if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
    if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
    return base$1 + config.indentUnit
  }

  var base = baseIndent(cx, config.tabSize);
  if (brack) {
    if (closed && brack != ")") { return base }
    return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "EnumConstant" ||
             cx.name == "AnnotationTypeItem") {
    if (hasSubStatement(cx)) { return base + config.indentUnit; }
    return base + 2 * config.indentUnit
  } else if (cx.name == "Alternative") {
    base = baseIndent(cx.parent, config.tabSize);
    if (!textAfter || /^else\b/.test(textAfter)) { return base }
    return base + config.indentUnit
  } else if (cx.name == "ArrowRest") {
    return base + config.indentUnit
  } else if (cx.name == "InitializerList") {
    return base + 2
  } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
    return base + 2 * config.indentUnit
  } else {
    return findIndent(cx.parent, textAfter, config)
  }
}

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr" ||
        cx.name == "EnumConstant" || cx.name == "Template" || cx.name == "AnnotationTypeItem" ||
        cx.parent && bracketed[cx.parent.name])
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

function localConstructorAhead(line, pos, cx) {
  var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
  if (!ahead) { return false }
  while (cx.name != "Statement") { cx = cx.parent; }
  var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
  return className ? className[1] == ahead[1] : false
}

var rawStringOpen = /R"(.*?)\(/g;

function rawStringContinues(line, pos, cx) {
  rawStringOpen.lastIndex = cx.startPos;
  var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
  return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
}

var scopes = ["Block", "FunctionDef"];
var typeScopes = ["Template"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.blockCommentContinue = " * ";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
