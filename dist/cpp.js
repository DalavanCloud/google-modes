(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^class(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z_]+|[A-Z]+_[A-Z_]*)/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^else(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\<)/, /^(?:\:\:|[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]* *\:\:)/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_])/, /^\@[a-zA-Z¡-￿_]+/, /^[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_]|\{)/, /^[^]/], /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 471]], /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?!\>)/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 12, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[7], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[26], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[17], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[1], -1,
   3, "keyword", e[54], -1,
   3, "keyword", e[36], -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "type", e[35], -1,
   3, "type", e[37], -1,
   3, "keyword", e[34], -1,
   3, "atom", e[53], -1,
   3, "meta", e[18], -1,
   1, 161, -1,
   3, "number", e[20], -1,
   2, 166, -1, {"name":"string","token":"string"},
   2, 171, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[45], -1,
   3, "operator", e[39], -1,
   2, 172, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[2], -1,
   3, "keyword", e[24], -1,
   3, "keyword", e[40], -1,
   3, "keyword", e[41], -1,
   3, "keyword", e[51], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[23], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[43], -1,
   3, "keyword", e[5], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[0], -1,
   3, "keyword", e[21], -1,
   3, "keyword", e[22], -1,
   3, "keyword", e[38], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[19], -1,
   3, "keyword", e[52], -1,
   3, "keyword", e[44], -1,
   /^[^]/, -1],
  ["#", 7],
  [/^(?!\/\/|\/\*|\\)./, 7,
   "\\", 8,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 172, 9, {"name":"comment","token":"comment"},
   0, -1],
  [/^[ \t]*/, 11],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [3, "keyword", e[0], 13,
   3, "keyword", e[1], 13,
   3, "keyword", e[2], 33,
   3, "keyword", e[3], 41,
   3, "keyword", e[4], 45,
   3, "keyword", e[5], 60,
   3, "keyword", e[6], 66,
   2, 178, -1, {"name":"Template"},
   [7, "constructorAhead"], 78,
   0, 81,
   3, "keyword", e[7], 91,
   3, "keyword", e[8], 95,
   3, "keyword", e[9], 96,
   3, "keyword", e[10], 97,
   3, "keyword", e[11], 121,
   3, "keyword", e[12], 129,
   2, 187, -1, {"name":"Block"},
   3, "keyword", e[13], 133,
   3, "keyword", e[14], 135,
   3, "keyword", e[15], 139,
   3, "keyword", e[1], 143,
   3, "keyword", e[16], 149,
   3, "keyword", e[17], 150,
   [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 191]], 149,
   3, "meta", e[18], 153,
   2, 192, 157, {"name":"DeclType"},
   ";", -1,
   1, 202, 159],
  [1, 9, 14],
  [3, "keyword", e[19], 15,
   0, 16],
  [1, 9, 17],
  [1, 9, 18],
  ["(", 19],
  [3, "type def", e[25], 20],
  [1, 9, 21],
  [1, 9, 22],
  [3, "number", e[20], 23],
  [":", 24,
   0, 25],
  [1, 9, 26],
  [1, 9, 27],
  [1, 9, 28],
  [")", 16],
  [3, "keyword", e[21], 29,
   0, 29],
  [";", -1,
   2, 207, -1, {"name":"ClassBody"}],
  [1, 9, 30],
  [3, "keyword", e[22], 31,
   0, 31],
  [1, 9, 32],
  [1, 217, 25],
  [1, 9, 34],
  [1, 227, 35,
   0, 35],
  [1, 9, 36],
  [3, "operator", "=", 37,
   2, 236, -1, {"name":"NamespaceBlock"}],
  [1, 9, 38],
  [1, 161, 39],
  [1, 9, 40],
  [";", -1],
  [1, 9, 42],
  [1, 202, 43],
  [1, 9, 44],
  [";", -1],
  [1, 9, 46],
  [2, 187, 47, {"name":"Block"}],
  [1, 9, 48],
  [3, "keyword", e[23], 49,
   0, -1],
  [1, 9, 50],
  ["(", 51],
  [1, 9, 52],
  [1, 217, 53],
  [1, 9, 54],
  [1, 240, 55,
   0, 55],
  [1, 9, 56],
  [")", 57],
  [1, 9, 58],
  [2, 187, 59, {"name":"Block"}],
  [1, 9, 48],
  [1, 9, 61],
  ["{", 62],
  [1, 9, 63],
  [2, 166, 64, {"name":"string","token":"string"}],
  [1, 9, 65],
  ["}", -1],
  [1, 9, 67],
  [3, "keyword", e[24], 68,
   3, "keyword", e[2], 69,
   0, 69],
  [1, 9, 70],
  [1, 9, 71],
  [1, 217, 72],
  [1, 161, 72],
  [1, 9, 73],
  [3, "operator", "=", 74,
   0, 75],
  [1, 9, 76],
  [1, 9, 77],
  [1, 217, 75],
  [";", -1],
  [1, 227, 79],
  [1, 9, 80],
  [2, 252, -1, {"name":"FunctionDef"}],
  [3, "meta", e[28], 82],
  [1, 9, 83],
  [0, 81,
   1, 283, 84,
   3, "variable qualified", e[27], 85,
   2, 290, 86, {"name":"qualifiedVariableName","token":"qualified"}],
  [1, 9, 87],
  [1, 9, 88],
  [1, 9, 89],
  [1, 291, -1],
  [2, 302, 86, {"name":"TemplateArgs"}],
  [1, 307, 90,
   ";", -1],
  [1, 9, 89],
  [1, 9, 92],
  [3, "type def", e[25], 93,
   0, 93],
  [1, 9, 94],
  [2, 324, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 98],
  [1, 9, 99],
  [1, 9, 100],
  ["(", 101],
  [2, 342, 102, {"name":"CondExpr"}],
  [2, 12, 103, {"name":"Statement"}],
  [1, 9, 104],
  [1, 9, 105],
  [1, 9, 106],
  [2, 12, 107, {"name":"Statement"}],
  [2, 12, -1, {"name":"Statement"}],
  [3, "keyword", e[9], 108],
  [1, 9, 109],
  [1, 9, 110],
  [1, 202, 111,
   0, 111],
  [2, 342, 112, {"name":"CondExpr"}],
  [1, 9, 113],
  [1, 9, 114],
  [";", 115],
  [";", -1],
  [1, 9, 116],
  [1, 202, 117,
   0, 117],
  [1, 9, 118],
  [")", 119],
  [1, 9, 120],
  [2, 12, -1, {"name":"Statement"}],
  [1, 9, 122],
  [2, 342, 123, {"name":"CondExpr"}],
  [1, 9, 124],
  [2, 12, 125, {"name":"Statement"}],
  [1, 9, 126],
  [3, "keyword", e[26], 127,
   0, -1],
  [1, 9, 128],
  [2, 12, -1, {"name":"Statement"}],
  [1, 9, 130],
  [2, 342, 131, {"name":"CondExpr"}],
  [1, 9, 132],
  [2, 187, -1, {"name":"Block"}],
  [1, 9, 134],
  [";", -1],
  [1, 9, 136],
  [e[25], 137],
  [1, 9, 138],
  [";", -1],
  [1, 9, 140],
  [1, 202, 141,
   0, 141],
  [1, 9, 142],
  [";", -1],
  [1, 9, 144],
  [1, 227, 145,
   0, 145],
  [1, 9, 146],
  [2, 347, 147, {"name":"BlockOf"},
   0, 147],
  [1, 9, 148],
  [";", -1],
  [1, 9, 151],
  [1, 9, 152],
  [":", -1],
  [1, 202, 149],
  [1, 9, 154],
  [2, 357, 155, {"name":"ArgList"},
   0, 155],
  [1, 9, 156],
  [/^\;?/, -1],
  [1, 9, 158],
  [1, 291, -1],
  [1, 9, 160],
  [";", -1],
  [0, 162,
   3, "type", e[29], -1,
   3, "variable", e[27], 165,
   2, 362, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [3, "meta", e[28], 163],
  [0, 162,
   3, "variable qualified", e[27], 164,
   3, "type", e[29], -1,
   2, 290, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [2, 302, -1, {"name":"TemplateArgs"}],
  [2, 302, -1, {"name":"TemplateArgs"}],
  [/^R\"(?:(?!\().)*\(/, 167,
   /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 168],
  [[0, [7, "rawStringContinues"], /^[^]/], 167,
   "\"", -1],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 169],
  ["\\", 170,
   [0, /^(?!\")/, /^[^]/], 169,
   "\"", -1],
  [/^[^]/, 169],
  [3, "keyword", e[24], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
  [/^\/\*\*(?!\/)/, 173,
   "/*", 177,
   /^\/\/.*/, -1],
  [0, 174,
   2, 363, 173, {"name":"doccomment.braced"},
   0, 175],
  [e[50], 176],
  [2, 371, 175, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 174,
   0, 173],
  [[0, /^(?!\*\/)/, /^[^]/], 177,
   "*/", -1],
  [3, "keyword", e[30], 179,
   0, 179],
  [1, 9, 180],
  [3, "keyword", e[31], 181],
  [1, 9, 182],
  [2, 379, 183, {"name":"TemplateParams"}],
  [1, 9, 184],
  [1, 9, 185],
  [1, 9, 186],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 188],
  [1, 9, 189],
  [2, 12, 190, {"name":"Statement"},
   "}", -1],
  [1, 9, 189],
  [e[46], 191,
   /^\:(?!\:)/, -1],
  [0, 193,
   0, 194,
   1, 283, -1],
  [3, "keyword", e[32], 195,
   3, "keyword", e[33], 195,
   3, "keyword", e[34], 195],
  [3, "type", e[35], 196],
  [1, 9, 197],
  [1, 9, 198],
  [0, 193,
   3, "keyword", e[36], 199,
   1, 384, 199],
  [0, 194,
   3, "type", e[37], 199,
   0, 199],
  [1, 9, 200],
  [1, 390, 201,
   0, -1],
  [1, 9, 200],
  [1, 397, 203,
   1, 412, 204],
  [1, 9, 202],
  [1, 9, 205],
  [1, 307, 206,
   0, -1],
  [1, 9, 205],
  ["{", 208],
  [1, 9, 209],
  [3, "keyword", e[22], 210,
   2, 178, 211, {"name":"Template"},
   3, "meta", e[18], 212,
   2, 443, 211, {"name":"ObjectMember"},
   "}", -1],
  [1, 9, 213],
  [1, 9, 209],
  [1, 9, 214],
  [":", 211],
  [2, 357, 215, {"name":"ArgList"},
   0, 215],
  [1, 9, 216],
  [/^\;?/, 211],
  [3, "keyword", e[24], 218,
   0, 220],
  [1, 9, 219],
  [1, 217, -1],
  [3, "keyword", e[32], 221,
   3, "keyword", e[33], 221,
   3, "keyword", e[34], 221,
   3, "keyword", e[1], 222,
   0, 222],
  [1, 9, 220],
  [1, 9, 223],
  [3, "keyword", e[36], 224,
   1, 384, 224],
  [1, 9, 225],
  [1, 390, 226,
   0, -1],
  [1, 9, 225],
  [3, "keyword", e[38], 228,
   0, 230,
   3, "def", e[42], -1],
  [3, "operator", "->*", -1,
   ",", -1,
   3, "operator", e[39], -1,
   2, 171, -1, {"name":"prefixOp","token":"operator"},
   /^(?:\(\)|\[\])/, -1,
   3, "keyword", e[40], 229,
   3, "keyword", e[41], 229],
  [/^(?:\[\])?/, -1],
  [3, "meta", /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\<)/, 231,
   3, "meta", e[28], 232],
  [1, 9, 233],
  [0, 230,
   3, "qualified def", e[42], -1],
  [2, 302, 234, {"name":"TemplateArgs"}],
  [3, "meta", "::", 235],
  [3, "qualified def", e[42], 232],
  ["{", 237],
  [1, 9, 238],
  [2, 12, 239, {"name":"Statement"},
   "}", -1],
  [1, 9, 238],
  [0, 241,
   "(", 248],
  [/^(?:\*|\&\&|\&)/, 242,
   1, 227, 243],
  [1, 9, 241],
  [1, 9, 244],
  ["[", 245,
   0, -1],
  [1, 9, 246],
  ["]", 247],
  [1, 9, 244],
  [1, 9, 249],
  [1, 240, 250],
  [1, 9, 251],
  [")", -1],
  [2, 457, 253, {"name":"ParamList"}],
  [1, 9, 254],
  [3, "keyword", e[34], 255,
   /^(?:\&|\&\&)?/, 256],
  [1, 9, 254],
  [1, 9, 257],
  [3, "keyword", e[43], 258,
   3, "keyword", e[3], 259,
   0, 270],
  [1, 9, 260],
  [1, 9, 261],
  ["(", 262,
   0, 270],
  ["(", 263],
  [1, 9, 264],
  [1, 9, 265],
  [1, 202, 266],
  [1, 462, 267],
  [1, 9, 268],
  [1, 9, 269],
  [")", 270],
  [")", 270],
  [1, 9, 271],
  ["->", 272,
   0, 274],
  [1, 9, 273],
  [1, 217, 274],
  [1, 9, 275],
  [3, "keyword", e[44], 276,
   2, 468, 277, {"name":"InitializerList"},
   0, 277],
  [1, 9, 275],
  [1, 9, 278],
  [";", -1,
   2, 187, -1, {"name":"Block"},
   3, "operator", "=", 279],
  [1, 9, 280],
  [3, "keyword", e[16], 281,
   3, "keyword", e[41], 281],
  [1, 9, 282],
  [";", -1],
  [3, "keyword", e[36], 287,
   3, "keyword", e[24], 284,
   e[55], 285],
  [1, 9, 286],
  [3, "meta", e[28], 285,
   3, "type", e[56], 287],
  [3, "meta", e[28], 286,
   3, "type", e[25], 287],
  [1, 9, 288],
  [1, 390, 289,
   0, -1],
  [1, 9, 288],
  [2, 362, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [1, 240, 292],
  [1, 9, 293],
  [[5, 474], 294,
   1, 480, 295,
   0, 295],
  [2, 252, -1, {"name":"FunctionDef"}],
  [1, 9, 296],
  [",", 297,
   ";", -1],
  [1, 9, 298],
  [1, 227, 299],
  [1, 9, 300],
  [1, 480, 301,
   0, 301],
  [1, 9, 296],
  ["<", 303],
  [1, 9, 304],
  [1, 483, 305],
  [1, 9, 306],
  [">", -1],
  [2, 509, -1, {"name":"BlockOf"},
   2, 357, 308, {"name":"ArgList"},
   2, 357, -1, {"name":"ArgList"},
   "[", 310,
   3, "operator", e[45], -1,
   /^(?:\-\>|\.)/, 314,
   3, "operator", e[39], 316,
   "?", 318],
  [1, 9, 309],
  [2, 187, -1, {"name":"Block"},
   0, -1],
  [1, 9, 311],
  [1, 202, 312],
  [1, 9, 313],
  ["]", -1],
  [1, 9, 315],
  [2, 519, -1, {"name":"fieldName","token":"property"}],
  [1, 9, 317],
  [1, 202, -1],
  [1, 9, 319],
  [1, 202, 320],
  [1, 9, 321],
  [":", 322],
  [1, 9, 323],
  [1, 202, -1],
  ["{", 325],
  [1, 9, 326],
  [1, 227, 327,
   0, 340],
  [1, 9, 328],
  [3, "operator", "=", 329,
   0, 330],
  [1, 9, 331],
  [1, 9, 332],
  [1, 202, 330],
  [",", 333,
   0, 340],
  [1, 9, 334],
  [1, 227, 335,
   0, 336],
  [1, 9, 337],
  [1, 9, 332],
  [3, "operator", "=", 338,
   0, 336],
  [1, 9, 339],
  [1, 202, 336],
  [1, 9, 341],
  ["}", -1],
  ["(", 343],
  [1, 9, 344],
  [1, 202, 345,
   0, 345],
  [1, 9, 346],
  [")", -1],
  ["{", 348],
  [1, 9, 349],
  [1, 520, 350,
   0, 355],
  [1, 9, 351],
  [";", 352,
   0, 355],
  [1, 9, 353],
  [1, 520, 354,
   0, 354],
  [1, 9, 351],
  [1, 9, 356],
  ["}", -1],
  ["(", 358],
  [1, 9, 359],
  [1, 531, 360],
  [1, 9, 361],
  [")", -1],
  [3, "callee", e[57], -1,
   e[25], -1],
  ["{", 364],
  [3, "tag", e[47], 365,
   3, "tag", e[48], 366,
   2, 537, 370, {"name":"doccomment.type","token":"type"}],
  [e[46], 365,
   "{", 367,
   0, 366],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 366,
   0, 370],
  [2, 537, 368, {"name":"doccomment.type","token":"type"}],
  ["}", 369],
  [e[46], 369,
   3, "def", e[49], 366,
   0, 366],
  ["}", -1],
  [3, "tag", e[47], 372,
   3, "tag", e[48], 376],
  [e[46], 372,
   "{", 373,
   0, 376],
  [2, 537, 374, {"name":"doccomment.type","token":"type"}],
  ["}", 375],
  [e[46], 375,
   3, "def", e[49], 376,
   0, 376],
  [0, 377,
   2, 363, 376, {"name":"doccomment.braced"},
   0, -1],
  [e[50], 378],
  [0, 377,
   0, 376],
  ["<", 380],
  [1, 9, 381],
  [1, 538, 382],
  [1, 9, 383],
  [">", -1],
  [0, 385,
   3, "keyword", e[24], 388,
   0, 389],
  [3, "type", e[35], 386],
  [0, 385,
   1, 9, 387,
   0, -1],
  [3, "type", e[37], -1],
  [1, 9, 389],
  [3, "meta", e[28], 389,
   3, "type", e[25], -1],
  [2, 302, -1, {"name":"TemplateArgs"},
   "::", 391,
   "[", 393,
   /^[\*\&]/, -1,
   3, "keyword", e[34], -1],
  [1, 9, 392],
  [1, 217, -1],
  [1, 9, 394],
  [3, "number", e[20], 395,
   0, 395],
  [1, 9, 396],
  ["]", -1],
  [3, "keyword", e[41], 398,
   3, "keyword", e[40], 402,
   2, 171, -1, {"name":"prefixOp","token":"operator"}],
  [1, 9, 399],
  ["[", 400,
   0, -1],
  [1, 9, 401],
  ["]", -1],
  [1, 9, 403],
  ["[", 404,
   0, 405],
  [1, 9, 406],
  [1, 9, 407],
  ["]", 405],
  ["(", 408,
   0, -1],
  [1, 9, 409],
  [1, 202, 410],
  [1, 9, 411],
  [")", -1],
  [3, "keyword", e[51], -1,
   "[", 413,
   3, "keyword", e[52], 419,
   2, 570, 431, {"name":"ParenExpr"},
   3, "atom", e[53], -1,
   3, "number", e[20], -1,
   2, 166, -1, {"name":"string","token":"string"},
   2, 509, -1, {"name":"BlockOf"},
   3, "keyword", e[54], 433,
   1, 161, -1],
  [1, 9, 414],
  [1, 575, 415],
  [1, 9, 416],
  ["]", 417],
  [1, 9, 418],
  [2, 252, -1, {"name":"FunctionDef"}],
  [1, 9, 420],
  ["<", 421],
  [1, 9, 422],
  [1, 217, 423],
  [1, 9, 424],
  [">", 425],
  [1, 9, 426],
  ["(", 427],
  [1, 9, 428],
  [1, 202, 429],
  [1, 9, 430],
  [")", -1],
  [1, 9, 432],
  [1, 202, -1,
   0, -1],
  [1, 9, 434],
  ["(", 435,
   /^(?:\.\.\.)?/, 436],
  [1, 9, 437],
  [1, 9, 438],
  [1, 217, 439],
  [1, 202, 440],
  [1, 9, 441],
  [1, 9, 442],
  [")", 440],
  [3, "meta", e[18], -1],
  [3, "keyword", e[32], 444,
   3, "keyword", e[33], 444,
   3, "keyword", e[34], 444,
   3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 447,
   1, 217, 445],
  [1, 9, 443],
  [1, 9, 446],
  [1, 240, 447],
  [1, 9, 448],
  [2, 252, -1, {"name":"FunctionDef"},
   1, 480, 449,
   ":", 450,
   "[", 451,
   0, 449],
  [1, 9, 452],
  [1, 9, 453],
  [1, 9, 454],
  [";", -1],
  [3, "number", e[20], 449],
  [3, "number", e[20], 455,
   0, 455],
  [1, 9, 456],
  ["]", 449],
  ["(", 458],
  [1, 9, 459],
  [1, 585, 460],
  [1, 9, 461],
  [")", -1],
  [1, 217, 463,
   0, -1],
  [1, 9, 464],
  [",", 465,
   0, -1],
  [1, 9, 466],
  [1, 217, 467],
  [1, 9, 464],
  [":", 469],
  [1, 9, 470],
  [1, 599, -1],
  [1, 9, 472],
  [1, 390, 473,
   /^[a-zA-Z¡-￿_]/, -1],
  [1, 9, 472],
  ["(", 475],
  [1, 9, 476],
  [")", -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "keyword", e[34], -1,
   3, "type", e[35], -1,
   3, "keyword", e[36], -1,
   3, "keyword", e[24], 477,
   e[55], 478],
  [1, 9, 479],
  [3, "meta", e[28], 478,
   3, "type", e[56], -1],
  [3, "meta", e[28], 479,
   3, "type", e[25], -1],
  [3, "operator", "=", 481,
   2, 509, -1, {"name":"BlockOf"},
   2, 357, -1, {"name":"ArgList"}],
  [1, 9, 482],
  [1, 202, -1],
  [3, "keyword", e[31], 484,
   0, 485,
   0, 486,
   3, "number", e[20], 487,
   0, -1],
  [1, 9, 488],
  [1, 9, 489],
  [3, "keyword", e[32], 490,
   3, "keyword", e[33], 490,
   1, 217, 491],
  [1, 9, 492],
  [2, 302, 485, {"name":"TemplateArgs"}],
  [3, "keyword", e[0], 493,
   3, "keyword", e[24], 493],
  [1, 9, 486],
  [1, 9, 494],
  [",", 495,
   0, -1],
  [1, 9, 496],
  [2, 457, 487, {"name":"ParamList"},
   1, 480, 487,
   0, 487],
  [1, 9, 497],
  [1, 217, 487],
  [3, "keyword", e[31], 498,
   0, 499,
   0, 500,
   3, "number", e[20], 501],
  [1, 9, 502],
  [1, 9, 503],
  [3, "keyword", e[32], 504,
   3, "keyword", e[33], 504,
   1, 217, 505],
  [1, 9, 492],
  [2, 302, 499, {"name":"TemplateArgs"}],
  [3, "keyword", e[0], 506,
   3, "keyword", e[24], 506],
  [1, 9, 500],
  [1, 9, 507],
  [1, 9, 508],
  [2, 457, 501, {"name":"ParamList"},
   1, 480, 501,
   0, 501],
  [1, 217, 501],
  ["{", 510],
  [1, 9, 511],
  [1, 202, 512,
   0, 517],
  [1, 9, 513],
  [",", 514,
   0, 517],
  [1, 9, 515],
  [1, 202, 516,
   0, 516],
  [1, 9, 513],
  [1, 9, 518],
  ["}", -1],
  [3, "callee", e[57], -1,
   e[25], -1],
  [1, 217, 521],
  [1, 9, 522],
  [2, 519, 523, {"name":"fieldName","token":"property"},
   0, 523],
  [1, 9, 524],
  [":", 525,
   "[", 526,
   0, -1],
  [1, 9, 527],
  [1, 9, 528],
  [3, "number", e[20], -1],
  [3, "number", e[20], 529,
   0, 529],
  [1, 9, 530],
  ["]", -1],
  [1, 202, 532,
   0, -1],
  [1, 9, 533],
  [",", 534,
   0, -1],
  [1, 9, 535],
  [1, 202, 536],
  [1, 9, 533],
  [1, 605, -1],
  [1, 609, 539,
   0, 540,
   0, -1],
  [1, 9, 541],
  [3, "keyword", e[32], 542,
   3, "keyword", e[33], 542,
   1, 217, 543],
  [",", 544,
   0, -1],
  [1, 9, 540],
  [1, 9, 545],
  [1, 9, 546],
  [1, 227, 547],
  [1, 609, 548,
   0, 549],
  [1, 9, 550],
  [1, 9, 541],
  [3, "keyword", e[32], 551,
   3, "keyword", e[33], 551,
   1, 217, 552],
  [3, "operator", "=", 553,
   0, 539],
  [1, 9, 549],
  [1, 9, 554],
  [1, 9, 555],
  [1, 227, 556],
  [1, 397, 557,
   1, 412, 558],
  [1, 9, 559],
  [1, 9, 555],
  [1, 9, 560],
  [3, "operator", "=", 561,
   0, 548],
  [e[58], 562,
   0, 539],
  [1, 9, 563],
  [1, 307, 564],
  [1, 397, 565,
   1, 412, 566],
  [1, 9, 560],
  [1, 9, 563],
  [1, 9, 567],
  [e[58], 568,
   0, 548],
  [1, 307, 569],
  [1, 9, 567],
  ["(", 571],
  [1, 9, 572],
  [1, 202, 573,
   0, 573],
  [1, 9, 574],
  [")", -1],
  ["&", 576,
   "=", 577,
   3, "keyword", e[51], 577,
   0, -1],
  [1, 9, 578],
  [1, 9, 579],
  [1, 161, 577,
   0, 577],
  [",", 580,
   0, -1],
  [1, 9, 581],
  ["&", 582,
   "=", 583,
   3, "keyword", e[51], 583],
  [1, 9, 584],
  [1, 9, 579],
  [1, 161, 583,
   0, 583],
  [1, 217, 586,
   0, -1],
  [1, 9, 587],
  [1, 240, 588,
   0, 589],
  [1, 9, 590],
  [1, 9, 591],
  [2, 457, 589, {"name":"ParamList"},
   0, 589],
  [",", 592,
   0, -1],
  [1, 9, 593],
  [1, 217, 594],
  [1, 9, 595],
  [1, 240, 596,
   0, 597],
  [1, 9, 598],
  [1, 9, 591],
  [2, 457, 597, {"name":"ParamList"},
   0, 597],
  [1, 620, 600,
   0, -1],
  [1, 9, 601],
  [",", 602,
   0, -1],
  [1, 9, 603],
  [1, 620, 604],
  [1, 9, 601],
  [/^(?!\}|\*\/)/, 606,
   0, -1],
  ["{", 607,
   /^[^]/, 605],
  [1, 605, 608],
  [/^\}?/, 605],
  [3, "keyword", e[31], 610,
   0, 612],
  [1, 9, 611],
  [2, 302, 612, {"name":"TemplateArgs"}],
  [1, 9, 613],
  [3, "keyword", e[0], 614,
   3, "keyword", e[24], 614],
  [1, 9, 615],
  [3, "type def", e[25], 616],
  [1, 9, 617],
  [3, "operator", "=", 618,
   0, -1],
  [1, 9, 619],
  [1, 161, -1,
   3, "number", e[20], -1],
  [2, 519, 621, {"name":"fieldName","token":"property"}],
  [1, 9, 622],
  ["(", 623,
   "{", 624],
  [1, 9, 625],
  [1, 9, 626],
  [1, 531, 627],
  [1, 531, 628],
  [1, 9, 629],
  [1, 9, 630],
  [")", -1],
  ["}", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}
function isLocalType(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var typeRE = /(^|\s)type($|\s)/;

function markTypeLocals(type, scopes, stream, state) {
  if (type == "type def") {
    var scope = getScope(state.context, scopes);
    if (scope) {
      if (!scope.localTypes) { scope.localTypes = []; }
      scope.localTypes.push(stream.current());
    }
  } else if (typeRE.test(type) && !/qualified/.test(type) &&
             isLocalType(state.context, stream.current())) {
    type += " local";
  }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", EnumBody: "}",
  ArrayInitializer: "}", NamespaceBlock: "}",
  ArrayLiteral: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")",
  TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
};

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr" ||
        cx.name == "EnumConstant" || cx.name == "Template" || cx.name == "AnnotationTypeItem")
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function plus(result, add) {
  return typeof result == "number" ? result + add : result
}

function findIndent(cx, textAfter, curLine, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  if (brack) {
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (config.align !== false && curLine != cx.startLine && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (cx.name == "Block" || cx.name == "NamespaceBlock" || cx.name == "ClassBody" || cx.name == "AnnotationTypeBody" || cx.name == "BlockOf" || cx.name == "EnumBody") {
      // Skip wrapping statement context
      var skipCx = cx;
      if (cx.parent && cx.parent.name == "Statement" && cx.parent.parent &&
          cx.parent.parent.name == "Statement" && hasSubStatement(cx.parent.parent))
        { skipCx = cx.parent.parent; }
      return statementIndent(skipCx, config) + (
        /^(public|private|protected)\s*:/.test(textAfter) ? 1 :
        closed || cx.name == "NamespaceBlock" ? 0 :
        isSwitch(cx.parent) && !isLabel(textAfter) ? 2 * config.indentUnit
        : config.indentUnit
      )
    }

    var flat = closed && brack != ")" || curLine == cx.startLine && cx.name != "CondExpr";
    return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) +
      (flat ? 0 : config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1))
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "EnumConstant" ||
             cx.name == "AnnotationTypeItem") {
    var base = statementIndent(cx, config), sub;
    if (!curLine && (sub = hasSubStatement(cx)))
      { return base + (sub == "if" && (/[{;]\s*(\/\/.*)?$/.test(cx.startLine) || /^else\b/.test(textAfter)) ? 0 : config.indentUnit); }
    var flat$1 = curLine == cx.startLine ||
        curLine && CodeMirror.countColumn(curLine, null, config.tabSize) <= base;
    return base + (flat$1 ? 0 : 2 * config.indentUnit)
  } else if (cx.name == "ArrowRest") {
    return plus(findIndent(cx.parent, textAfter, cx.startLine, config), config.indentUnit)
  } else {
    return plus(findIndent(cx.parent, textAfter, curLine, config),
                cx.name == "InitializerList" ? 2 :
                cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos)) ? 2 * config.indentUnit :
                0)
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

function localConstructorAhead(line, pos, cx) {
  var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
  if (!ahead) { return false }
  while (cx.name != "Statement") { cx = cx.parent; }
  var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
  return className ? className[1] == ahead[1] : false
}

var rawStringOpen = /R"(.*?)\(/g;

function rawStringContinues(line, pos, cx) {
  rawStringOpen.lastIndex = cx.startPos;
  var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
  return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
}

var scopes = ["Block", "FunctionDef"];
var typeScopes = ["Template"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.blockCommentContinue = " * ";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
