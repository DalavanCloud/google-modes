(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z_]+|[A-Z]+_[A-Z_]*)/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\<)/, /^(?:\:\:|[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]* *\:\:)/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^class(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_])/, /^\@[a-zA-Z¡-￿_]+/, /^[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_]|\{)/, /^[^]/], /^new(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 450]], /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?!\>)/, /^(?:\*|\&\&|\&)/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 12, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[5], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[20], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[7], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[53], -1,
   3, "keyword", e[36], -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "type", e[35], -1,
   3, "type", e[37], -1,
   3, "keyword", e[34], -1,
   3, "atom", e[52], -1,
   3, "meta", e[17], -1,
   1, 141, -1,
   3, "number", e[27], -1,
   2, 146, -1, {"name":"string","token":"string"},
   2, 151, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[42], -1,
   3, "operator", e[43], -1,
   2, 152, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[0], -1,
   3, "keyword", e[19], -1,
   3, "keyword", e[49], -1,
   3, "keyword", e[41], -1,
   3, "keyword", e[50], -1,
   3, "keyword", e[2], -1,
   3, "keyword", e[18], -1,
   3, "keyword", e[1], -1,
   3, "keyword", e[39], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[25], -1,
   3, "keyword", e[28], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[57], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[26], -1,
   3, "keyword", e[51], -1,
   3, "keyword", e[40], -1,
   /^[^]/, -1],
  ["#", 7],
  [/^(?!\/\/|\/\*|\\)./, 7,
   "\\", 8,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 152, 9, {"name":"comment","token":"comment"},
   0, -1],
  [/^[ \t]*/, 11],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [1, 158, -1,
   3, "keyword", e[0], 13,
   3, "keyword", e[1], 21,
   3, "keyword", e[2], 25,
   3, "keyword", e[3], 40,
   3, "keyword", e[4], 46,
   2, 179, -1, {"name":"Template"},
   [7, "constructorAhead"], 58,
   0, 61,
   3, "keyword", e[5], 71,
   3, "keyword", e[6], 75,
   3, "keyword", e[7], 76,
   3, "keyword", e[8], 77,
   3, "keyword", e[9], 101,
   3, "keyword", e[10], 109,
   2, 188, -1, {"name":"Block"},
   3, "keyword", e[11], 113,
   3, "keyword", e[12], 115,
   3, "keyword", e[13], 119,
   3, "keyword", e[14], 123,
   3, "keyword", e[15], 129,
   3, "keyword", e[16], 130,
   [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 192]], 129,
   3, "meta", e[17], 133,
   2, 193, 137, {"name":"DeclType"},
   ";", -1,
   1, 203, 139],
  [1, 9, 14],
  [1, 208, 15,
   0, 15],
  [1, 9, 16],
  [3, "operator", "=", 17,
   2, 215, -1, {"name":"NamespaceBlock"}],
  [1, 9, 18],
  [1, 141, 19],
  [1, 9, 20],
  [";", -1],
  [1, 9, 22],
  [1, 203, 23],
  [1, 9, 24],
  [";", -1],
  [1, 9, 26],
  [2, 188, 27, {"name":"Block"}],
  [1, 9, 28],
  [3, "keyword", e[18], 29,
   0, -1],
  [1, 9, 30],
  ["(", 31],
  [1, 9, 32],
  [1, 219, 33],
  [1, 9, 34],
  [1, 229, 35,
   0, 35],
  [1, 9, 36],
  [")", 37],
  [1, 9, 38],
  [2, 188, 39, {"name":"Block"}],
  [1, 9, 28],
  [1, 9, 41],
  ["{", 42],
  [1, 9, 43],
  [2, 146, 44, {"name":"string","token":"string"}],
  [1, 9, 45],
  ["}", -1],
  [1, 9, 47],
  [3, "keyword", e[19], 48,
   3, "keyword", e[0], 49,
   0, 49],
  [1, 9, 50],
  [1, 9, 51],
  [1, 219, 52],
  [1, 141, 52],
  [1, 9, 53],
  [3, "operator", "=", 54,
   0, 55],
  [1, 9, 56],
  [1, 9, 57],
  [1, 219, 55],
  [";", -1],
  [1, 208, 59],
  [1, 9, 60],
  [2, 241, -1, {"name":"FunctionDef"}],
  [3, "meta", e[23], 62],
  [1, 9, 63],
  [0, 61,
   1, 272, 64,
   3, "variable qualified", e[22], 65,
   2, 279, 66, {"name":"qualifiedVariableName","token":"qualified"}],
  [1, 9, 67],
  [1, 9, 68],
  [1, 9, 69],
  [1, 280, -1],
  [2, 291, 66, {"name":"TemplateArgs"}],
  [1, 296, 70,
   ";", -1],
  [1, 9, 69],
  [1, 9, 72],
  [3, "type def", e[21], 73,
   0, 73],
  [1, 9, 74],
  [2, 313, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 78],
  [1, 9, 79],
  [1, 9, 80],
  ["(", 81],
  [2, 331, 82, {"name":"CondExpr"}],
  [2, 12, 83, {"name":"Statement"}],
  [1, 9, 84],
  [1, 9, 85],
  [1, 9, 86],
  [2, 12, 87, {"name":"Statement"}],
  [2, 12, -1, {"name":"Statement"}],
  [3, "keyword", e[7], 88],
  [1, 9, 89],
  [1, 9, 90],
  [1, 203, 91,
   0, 91],
  [2, 331, 92, {"name":"CondExpr"}],
  [1, 9, 93],
  [1, 9, 94],
  [";", 95],
  [";", -1],
  [1, 9, 96],
  [1, 203, 97,
   0, 97],
  [1, 9, 98],
  [")", 99],
  [1, 9, 100],
  [2, 12, -1, {"name":"Statement"}],
  [1, 9, 102],
  [2, 331, 103, {"name":"CondExpr"}],
  [1, 9, 104],
  [2, 12, 105, {"name":"Statement"}],
  [1, 9, 106],
  [3, "keyword", e[20], 107,
   0, -1],
  [1, 9, 108],
  [2, 12, -1, {"name":"Statement"}],
  [1, 9, 110],
  [2, 331, 111, {"name":"CondExpr"}],
  [1, 9, 112],
  [2, 188, -1, {"name":"Block"}],
  [1, 9, 114],
  [";", -1],
  [1, 9, 116],
  [e[21], 117],
  [1, 9, 118],
  [";", -1],
  [1, 9, 120],
  [1, 203, 121,
   0, 121],
  [1, 9, 122],
  [";", -1],
  [1, 9, 124],
  [1, 208, 125,
   0, 125],
  [1, 9, 126],
  [2, 336, 127, {"name":"BlockOf"},
   0, 127],
  [1, 9, 128],
  [";", -1],
  [1, 9, 131],
  [1, 9, 132],
  [":", -1],
  [1, 203, 129],
  [1, 9, 134],
  [2, 346, 135, {"name":"ArgList"},
   0, 135],
  [1, 9, 136],
  [/^\;?/, -1],
  [1, 9, 138],
  [1, 280, -1],
  [1, 9, 140],
  [";", -1],
  [0, 142,
   3, "type", e[24], -1,
   3, "variable", e[22], 145,
   2, 351, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [3, "meta", e[23], 143],
  [0, 142,
   3, "variable qualified", e[22], 144,
   3, "type", e[24], -1,
   2, 279, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [2, 291, -1, {"name":"TemplateArgs"}],
  [2, 291, -1, {"name":"TemplateArgs"}],
  [/^R\"(?:(?!\().)*\(/, 147,
   /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 148],
  [[0, [7, "rawStringContinues"], /^[^]/], 147,
   "\"", -1],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 149],
  ["\\", 150,
   [0, /^(?!\")/, /^[^]/], 149,
   "\"", -1],
  [/^[^]/, 149],
  [3, "keyword", e[19], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
  [/^\/\*\*(?!\/)/, 153,
   "/*", 157,
   /^\/\/.*/, -1],
  [0, 154,
   2, 352, 153, {"name":"doccomment.braced"},
   0, 155],
  [e[48], 156],
  [2, 360, 155, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 154,
   0, 153],
  [[0, /^(?!\*\/)/, /^[^]/], 157,
   "*/", -1],
  [3, "keyword", e[25], 159,
   3, "keyword", e[14], 159],
  [1, 9, 160],
  [3, "keyword", e[26], 161,
   0, 167],
  [1, 9, 162],
  ["(", 163],
  [1, 9, 164],
  [3, "number", e[27], 165],
  [1, 9, 166],
  [")", 167],
  [1, 9, 168],
  [3, "type def", e[21], 169],
  [1, 9, 170],
  [":", 171,
   0, 177],
  [1, 9, 172],
  [3, "keyword", e[28], 173,
   0, 173],
  [1, 9, 174],
  [3, "keyword", e[29], 175,
   0, 175],
  [1, 9, 176],
  [1, 219, 177],
  [1, 9, 178],
  [";", -1,
   2, 368, -1, {"name":"ClassBody"}],
  [3, "keyword", e[30], 180,
   0, 180],
  [1, 9, 181],
  [3, "keyword", e[31], 182],
  [1, 9, 183],
  [2, 372, 184, {"name":"TemplateParams"}],
  [1, 9, 185],
  [1, 9, 186],
  [1, 9, 187],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 189],
  [1, 9, 190],
  [2, 12, 191, {"name":"Statement"},
   "}", -1],
  [1, 9, 190],
  [e[44], 192,
   /^\:(?!\:)/, -1],
  [0, 194,
   0, 195,
   1, 272, -1],
  [3, "keyword", e[32], 196,
   3, "keyword", e[33], 196,
   3, "keyword", e[34], 196],
  [3, "type", e[35], 197],
  [1, 9, 198],
  [1, 9, 199],
  [0, 194,
   3, "keyword", e[36], 200,
   1, 377, 200],
  [0, 195,
   3, "type", e[37], 200,
   0, 200],
  [1, 9, 201],
  [1, 383, 202,
   0, -1],
  [1, 9, 201],
  [1, 390, 204,
   1, 405, 205],
  [1, 9, 203],
  [1, 9, 206],
  [1, 296, 207,
   0, -1],
  [1, 9, 206],
  [0, 209,
   3, "def", e[38], -1],
  [3, "meta", /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\<)/, 210,
   3, "meta", e[23], 211],
  [1, 9, 212],
  [0, 209,
   3, "qualified def", e[38], -1],
  [2, 291, 213, {"name":"TemplateArgs"}],
  [3, "meta", "::", 214],
  [3, "qualified def", e[38], 211],
  ["{", 216],
  [1, 9, 217],
  [2, 12, 218, {"name":"Statement"},
   "}", -1],
  [1, 9, 217],
  [3, "keyword", e[19], 220,
   0, 222],
  [1, 9, 221],
  [1, 219, -1],
  [3, "keyword", e[32], 223,
   3, "keyword", e[33], 223,
   3, "keyword", e[34], 223,
   3, "keyword", e[14], 224,
   0, 224],
  [1, 9, 222],
  [1, 9, 225],
  [3, "keyword", e[36], 226,
   1, 377, 226],
  [1, 9, 227],
  [1, 383, 228,
   0, -1],
  [1, 9, 227],
  [0, 230,
   "(", 237],
  [e[59], 231,
   1, 208, 232],
  [1, 9, 230],
  [1, 9, 233],
  ["[", 234,
   0, -1],
  [1, 9, 235],
  ["]", 236],
  [1, 9, 233],
  [1, 9, 238],
  [1, 229, 239],
  [1, 9, 240],
  [")", -1],
  [2, 436, 242, {"name":"ParamList"}],
  [1, 9, 243],
  [3, "keyword", e[34], 244,
   /^(?:\&|\&\&)?/, 245],
  [1, 9, 243],
  [1, 9, 246],
  [3, "keyword", e[39], 247,
   3, "keyword", e[1], 248,
   0, 259],
  [1, 9, 249],
  [1, 9, 250],
  ["(", 251,
   0, 259],
  ["(", 252],
  [1, 9, 253],
  [1, 9, 254],
  [1, 203, 255],
  [1, 441, 256],
  [1, 9, 257],
  [1, 9, 258],
  [")", 259],
  [")", 259],
  [1, 9, 260],
  ["->", 261,
   0, 263],
  [1, 9, 262],
  [1, 219, 263],
  [1, 9, 264],
  [3, "keyword", e[40], 265,
   2, 447, 266, {"name":"InitializerList"},
   0, 266],
  [1, 9, 264],
  [1, 9, 267],
  [";", -1,
   2, 188, -1, {"name":"Block"},
   3, "operator", "=", 268],
  [1, 9, 269],
  [3, "keyword", e[15], 270,
   3, "keyword", e[41], 270],
  [1, 9, 271],
  [";", -1],
  [3, "keyword", e[36], 276,
   3, "keyword", e[19], 273,
   e[54], 274],
  [1, 9, 275],
  [3, "meta", e[23], 274,
   3, "type", e[55], 276],
  [3, "meta", e[23], 275,
   3, "type", e[21], 276],
  [1, 9, 277],
  [1, 383, 278,
   0, -1],
  [1, 9, 277],
  [2, 351, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [1, 229, 281],
  [1, 9, 282],
  [[5, 453], 283,
   1, 459, 284,
   0, 284],
  [2, 241, -1, {"name":"FunctionDef"}],
  [1, 9, 285],
  [",", 286,
   ";", -1],
  [1, 9, 287],
  [1, 208, 288],
  [1, 9, 289],
  [1, 459, 290,
   0, 290],
  [1, 9, 285],
  ["<", 292],
  [1, 9, 293],
  [1, 462, 294],
  [1, 9, 295],
  [">", -1],
  [2, 488, -1, {"name":"BlockOf"},
   2, 346, 297, {"name":"ArgList"},
   2, 346, -1, {"name":"ArgList"},
   "[", 299,
   3, "operator", e[42], -1,
   /^(?:\-\>|\.)/, 303,
   3, "operator", e[43], 305,
   "?", 307],
  [1, 9, 298],
  [2, 188, -1, {"name":"Block"},
   0, -1],
  [1, 9, 300],
  [1, 203, 301],
  [1, 9, 302],
  ["]", -1],
  [1, 9, 304],
  [2, 498, -1, {"name":"fieldName","token":"property"}],
  [1, 9, 306],
  [1, 203, -1],
  [1, 9, 308],
  [1, 203, 309],
  [1, 9, 310],
  [":", 311],
  [1, 9, 312],
  [1, 203, -1],
  ["{", 314],
  [1, 9, 315],
  [1, 499, 316,
   0, 329],
  [1, 9, 317],
  [3, "operator", "=", 318,
   0, 319],
  [1, 9, 320],
  [1, 9, 321],
  [1, 203, 319],
  [",", 322,
   0, 329],
  [1, 9, 323],
  [1, 499, 324,
   0, 325],
  [1, 9, 326],
  [1, 9, 321],
  [3, "operator", "=", 327,
   0, 325],
  [1, 9, 328],
  [1, 203, 325],
  [1, 9, 330],
  ["}", -1],
  ["(", 332],
  [1, 9, 333],
  [1, 203, 334,
   0, 334],
  [1, 9, 335],
  [")", -1],
  ["{", 337],
  [1, 9, 338],
  [1, 502, 339,
   0, 344],
  [1, 9, 340],
  [";", 341,
   0, 344],
  [1, 9, 342],
  [1, 502, 343,
   0, 343],
  [1, 9, 340],
  [1, 9, 345],
  ["}", -1],
  ["(", 347],
  [1, 9, 348],
  [1, 513, 349],
  [1, 9, 350],
  [")", -1],
  [3, "callee", e[56], -1,
   e[21], -1],
  ["{", 353],
  [3, "tag", e[45], 354,
   3, "tag", e[46], 355,
   2, 519, 359, {"name":"doccomment.type","token":"type"}],
  [e[44], 354,
   "{", 356,
   0, 355],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 355,
   0, 359],
  [2, 519, 357, {"name":"doccomment.type","token":"type"}],
  ["}", 358],
  [e[44], 358,
   3, "def", e[47], 355,
   0, 355],
  ["}", -1],
  [3, "tag", e[45], 361,
   3, "tag", e[46], 365],
  [e[44], 361,
   "{", 362,
   0, 365],
  [2, 519, 363, {"name":"doccomment.type","token":"type"}],
  ["}", 364],
  [e[44], 364,
   3, "def", e[47], 365,
   0, 365],
  [0, 366,
   2, 352, 365, {"name":"doccomment.braced"},
   0, -1],
  [e[48], 367],
  [0, 366,
   0, 365],
  ["{", 369],
  [1, 9, 370],
  [2, 520, 371, {"name":"ClassItem"},
   "}", -1],
  [1, 9, 370],
  ["<", 373],
  [1, 9, 374],
  [1, 527, 375],
  [1, 9, 376],
  [">", -1],
  [0, 378,
   3, "keyword", e[19], 381,
   0, 382],
  [3, "type", e[35], 379],
  [0, 378,
   1, 9, 380,
   0, -1],
  [3, "type", e[37], -1],
  [1, 9, 382],
  [3, "meta", e[23], 382,
   3, "type", e[21], -1],
  [2, 291, -1, {"name":"TemplateArgs"},
   "::", 384,
   "[", 386,
   /^[\*\&]/, -1,
   3, "keyword", e[34], -1],
  [1, 9, 385],
  [1, 219, -1],
  [1, 9, 387],
  [3, "number", e[27], 388,
   0, 388],
  [1, 9, 389],
  ["]", -1],
  [3, "keyword", e[41], 391,
   3, "keyword", e[49], 395,
   2, 151, -1, {"name":"prefixOp","token":"operator"}],
  [1, 9, 392],
  ["[", 393,
   0, -1],
  [1, 9, 394],
  ["]", -1],
  [1, 9, 396],
  ["[", 397,
   0, 398],
  [1, 9, 399],
  [1, 9, 400],
  ["]", 398],
  ["(", 401,
   0, -1],
  [1, 9, 402],
  [1, 203, 403],
  [1, 9, 404],
  [")", -1],
  [3, "keyword", e[50], -1,
   [0, [5, 559], "["], 406,
   3, "keyword", e[51], 412,
   2, 563, 424, {"name":"ParenExpr"},
   3, "atom", e[52], -1,
   3, "number", e[27], -1,
   2, 146, -1, {"name":"string","token":"string"},
   2, 488, -1, {"name":"BlockOf"},
   3, "keyword", e[53], 426,
   1, 141, -1],
  [1, 9, 407],
  [1, 568, 408],
  [1, 9, 409],
  ["]", 410],
  [1, 9, 411],
  [2, 241, -1, {"name":"FunctionDef"}],
  [1, 9, 413],
  ["<", 414],
  [1, 9, 415],
  [1, 219, 416],
  [1, 9, 417],
  [">", 418],
  [1, 9, 419],
  ["(", 420],
  [1, 9, 421],
  [1, 203, 422],
  [1, 9, 423],
  [")", -1],
  [1, 9, 425],
  [1, 203, -1,
   0, -1],
  [1, 9, 427],
  ["(", 428,
   /^(?:\.\.\.)?/, 429],
  [1, 9, 430],
  [1, 9, 431],
  [1, 219, 432],
  [1, 203, 433],
  [1, 9, 434],
  [1, 9, 435],
  [")", 433],
  [3, "meta", e[17], -1],
  ["(", 437],
  [1, 9, 438],
  [1, 578, 439],
  [1, 9, 440],
  [")", -1],
  [1, 219, 442,
   0, -1],
  [1, 9, 443],
  [",", 444,
   0, -1],
  [1, 9, 445],
  [1, 219, 446],
  [1, 9, 443],
  [":", 448],
  [1, 9, 449],
  [1, 592, -1],
  [1, 9, 451],
  [1, 383, 452,
   /^[a-zA-Z¡-￿_]/, -1],
  [1, 9, 451],
  ["(", 454],
  [1, 9, 455],
  [")", -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "keyword", e[34], -1,
   3, "type", e[35], -1,
   3, "keyword", e[36], -1,
   3, "keyword", e[19], 456,
   e[54], 457],
  [1, 9, 458],
  [3, "meta", e[23], 457,
   3, "type", e[55], -1],
  [3, "meta", e[23], 458,
   3, "type", e[21], -1],
  [3, "operator", "=", 460,
   2, 488, -1, {"name":"BlockOf"},
   2, 346, -1, {"name":"ArgList"}],
  [1, 9, 461],
  [1, 203, -1],
  [3, "keyword", e[31], 463,
   0, 464,
   0, 465,
   3, "number", e[27], 466,
   0, -1],
  [1, 9, 467],
  [1, 9, 468],
  [3, "keyword", e[32], 469,
   3, "keyword", e[33], 469,
   1, 219, 470],
  [1, 9, 471],
  [2, 291, 464, {"name":"TemplateArgs"}],
  [3, "keyword", e[25], 472,
   3, "keyword", e[19], 472],
  [1, 9, 465],
  [1, 9, 473],
  [",", 474,
   0, -1],
  [1, 9, 475],
  [2, 436, 466, {"name":"ParamList"},
   1, 459, 466,
   0, 466],
  [1, 9, 476],
  [1, 219, 466],
  [3, "keyword", e[31], 477,
   0, 478,
   0, 479,
   3, "number", e[27], 480],
  [1, 9, 481],
  [1, 9, 482],
  [3, "keyword", e[32], 483,
   3, "keyword", e[33], 483,
   1, 219, 484],
  [1, 9, 471],
  [2, 291, 478, {"name":"TemplateArgs"}],
  [3, "keyword", e[25], 485,
   3, "keyword", e[19], 485],
  [1, 9, 479],
  [1, 9, 486],
  [1, 9, 487],
  [2, 436, 480, {"name":"ParamList"},
   1, 459, 480,
   0, 480],
  [1, 219, 480],
  ["{", 489],
  [1, 9, 490],
  [1, 203, 491,
   0, 496],
  [1, 9, 492],
  [",", 493,
   0, 496],
  [1, 9, 494],
  [1, 203, 495,
   0, 495],
  [1, 9, 492],
  [1, 9, 497],
  ["}", -1],
  [3, "callee", e[56], -1,
   e[21], -1],
  [3, "keyword", e[57], 500,
   3, "def property", e[21], -1],
  [3, "operator", "->*", -1,
   ",", -1,
   3, "operator", e[43], -1,
   2, 151, -1, {"name":"prefixOp","token":"operator"},
   /^(?:\(\)|\[\])/, -1,
   3, "keyword", e[49], 501,
   3, "keyword", e[41], 501],
  [/^(?:\[\])?/, -1],
  [1, 219, 503],
  [1, 9, 504],
  [2, 498, 505, {"name":"fieldName","token":"property"},
   0, 505],
  [1, 9, 506],
  [":", 507,
   "[", 508,
   0, -1],
  [1, 9, 509],
  [1, 9, 510],
  [3, "number", e[27], -1],
  [3, "number", e[27], 511,
   0, 511],
  [1, 9, 512],
  ["]", -1],
  [1, 203, 514,
   0, -1],
  [1, 9, 515],
  [",", 516,
   0, -1],
  [1, 9, 517],
  [1, 203, 518],
  [1, 9, 515],
  [1, 598, -1],
  [3, "keyword", e[29], 521,
   2, 179, -1, {"name":"Template"},
   3, "meta", e[17], 523,
   1, 158, -1,
   2, 602, -1, {"name":"ObjectMember"}],
  [1, 9, 522],
  [":", -1],
  [1, 9, 524],
  [2, 346, 525, {"name":"ArgList"},
   0, 525],
  [1, 9, 526],
  [/^\;?/, -1],
  [1, 616, 528,
   0, 529,
   0, -1],
  [1, 9, 530],
  [3, "keyword", e[32], 531,
   3, "keyword", e[33], 531,
   1, 219, 532],
  [",", 533,
   0, -1],
  [1, 9, 529],
  [1, 9, 534],
  [1, 9, 535],
  [1, 208, 536],
  [1, 616, 537,
   0, 538],
  [1, 9, 539],
  [1, 9, 530],
  [3, "keyword", e[32], 540,
   3, "keyword", e[33], 540,
   1, 219, 541],
  [3, "operator", "=", 542,
   0, 528],
  [1, 9, 538],
  [1, 9, 543],
  [1, 9, 544],
  [1, 208, 545],
  [1, 390, 546,
   1, 405, 547],
  [1, 9, 548],
  [1, 9, 544],
  [1, 9, 549],
  [3, "operator", "=", 550,
   0, 537],
  [e[58], 551,
   0, 528],
  [1, 9, 552],
  [1, 296, 553],
  [1, 390, 554,
   1, 405, 555],
  [1, 9, 549],
  [1, 9, 552],
  [1, 9, 556],
  [e[58], 557,
   0, 537],
  [1, 296, 558],
  [1, 9, 556],
  ["[", 560],
  [1, 9, 561],
  [e[44], 562,
   /^(?:\&|\=|this|\])/, -1],
  [1, 9, 561],
  ["(", 564],
  [1, 9, 565],
  [1, 203, 566,
   0, 566],
  [1, 9, 567],
  [")", -1],
  ["&", 569,
   "=", 570,
   3, "keyword", e[50], 570,
   0, -1],
  [1, 9, 571],
  [1, 9, 572],
  [1, 141, 570,
   0, 570],
  [",", 573,
   0, -1],
  [1, 9, 574],
  ["&", 575,
   "=", 576,
   3, "keyword", e[50], 576],
  [1, 9, 577],
  [1, 9, 572],
  [1, 141, 576,
   0, 576],
  [1, 219, 579,
   0, -1],
  [1, 9, 580],
  [1, 229, 581,
   0, 582],
  [1, 9, 583],
  [1, 9, 584],
  [2, 436, 582, {"name":"ParamList"},
   0, 582],
  [",", 585,
   0, -1],
  [1, 9, 586],
  [1, 219, 587],
  [1, 9, 588],
  [1, 229, 589,
   0, 590],
  [1, 9, 591],
  [1, 9, 584],
  [2, 436, 590, {"name":"ParamList"},
   0, 590],
  [1, 627, 593,
   0, -1],
  [1, 9, 594],
  [",", 595,
   0, -1],
  [1, 9, 596],
  [1, 627, 597],
  [1, 9, 594],
  [/^(?!\}|\*\/)/, 599,
   0, -1],
  ["{", 600,
   /^[^]/, 598],
  [1, 598, 601],
  [/^\}?/, 598],
  [3, "keyword", e[32], 603,
   3, "keyword", e[33], 603,
   3, "keyword", e[34], 603,
   3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 606,
   1, 219, 604],
  [1, 9, 602],
  [1, 9, 605],
  [1, 638, 606],
  [1, 9, 607],
  [2, 241, -1, {"name":"FunctionDef"},
   1, 459, 608,
   ":", 609,
   "[", 610,
   0, 608],
  [1, 9, 611],
  [1, 9, 612],
  [1, 9, 613],
  [";", -1],
  [3, "number", e[27], 608],
  [3, "number", e[27], 614,
   0, 614],
  [1, 9, 615],
  ["]", 608],
  [3, "keyword", e[31], 617,
   0, 619],
  [1, 9, 618],
  [2, 291, 619, {"name":"TemplateArgs"}],
  [1, 9, 620],
  [3, "keyword", e[25], 621,
   3, "keyword", e[19], 621],
  [1, 9, 622],
  [3, "type def", e[21], 623],
  [1, 9, 624],
  [3, "operator", "=", 625,
   0, -1],
  [1, 9, 626],
  [1, 141, -1,
   3, "number", e[27], -1],
  [2, 498, 628, {"name":"fieldName","token":"property"}],
  [1, 9, 629],
  ["(", 630,
   "{", 631],
  [1, 9, 632],
  [1, 9, 633],
  [1, 513, 634],
  [1, 513, 635],
  [1, 9, 636],
  [1, 9, 637],
  [")", -1],
  ["}", -1],
  [0, 639,
   "(", 646],
  [e[59], 640,
   1, 499, 641],
  [1, 9, 639],
  [1, 9, 642],
  ["[", 643,
   0, -1],
  [1, 9, 644],
  ["]", 645],
  [1, 9, 642],
  [1, 9, 647],
  [1, 638, 648],
  [1, 9, 649],
  [")", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}
function isLocalType(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
      if (state.context.name != "funcName") { return "def local" }
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var typeRE = /(^|\s)type($|\s)/;

function markTypeLocals(type, scopes, stream, state) {
  if (type == "type def") {
    var scope = getScope(state.context, scopes);
    if (scope) {
      if (!scope.localTypes) { scope.localTypes = []; }
      scope.localTypes.push(stream.current());
    }
  } else if (typeRE.test(type) && !/qualified/.test(type) &&
             isLocalType(state.context, stream.current())) {
    type += " local";
  }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", EnumBody: "}",
  ArrayInitializer: "}", NamespaceBlock: "}",
  ArrayLiteral: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")",
  TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
};

function baseIndent(cx, config) {
  for (var startLine = cx.startLine;; cx = cx.parent) {
    if (cx.name == "CondExpr")
      { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
    if (!cx.parent || cx.parent.startLine != startLine)
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function findIndent(cx, textAfter, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  var closed = textAfter && textAfter.charAt(0) == brack;
  if (brack && config.align !== false && aligned(cx))
    { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

  if (brack && (cx.name == "Block" || cx.name == "NamespaceBlock" || cx.name == "ClassBody" ||
                cx.name == "AnnotationTypeBody" || cx.name == "BlockOf" || cx.name == "EnumBody")) {
    var parent = cx.parent;
    if (parent && parent.name == "Statement" && parent.parent &&
        parent.parent.name == "Statement" && hasSubStatement(parent.parent))
      { parent = parent.parent; }
    var base$1 = statementIndent(parent, config);

    if (closed || cx.name == "NamespaceBlock") { return base$1 }
    if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
    if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
    return base$1 + config.indentUnit
  }

  var base = baseIndent(cx, config.tabSize);
  if (brack) {
    if (closed && brack != ")") { return base }
    return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "EnumConstant" ||
             cx.name == "AnnotationTypeItem") {
    var sub = hasSubStatement(cx);
    if (sub == "if" && (/^else\b/.test(textAfter) || /[{;]\s*(\/\/.*)?$/.test(cx.startLine))) { return base }
    if (sub) { return base + config.indentUnit; }
    return base + 2 * config.indentUnit
  } else if (cx.name == "ArrowRest") {
    return base + config.indentUnit
  } else if (cx.name == "InitializerList") {
    return base + 2
  } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
    return base + 2 * config.indentUnit
  } else {
    return findIndent(cx.parent, textAfter, config)
  }
}

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr" ||
        cx.name == "EnumConstant" || cx.name == "Template" || cx.name == "AnnotationTypeItem")
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

function localConstructorAhead(line, pos, cx) {
  var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
  if (!ahead) { return false }
  while (cx.name != "Statement") { cx = cx.parent; }
  var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
  return className ? className[1] == ahead[1] : false
}

var rawStringOpen = /R"(.*?)\(/g;

function rawStringContinues(line, pos, cx) {
  rawStringOpen.lastIndex = cx.startPos;
  var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
  return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
}

var scopes = ["Block", "FunctionDef"];
var typeScopes = ["Template"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.blockCommentContinue = " * ";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
