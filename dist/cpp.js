(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z_]+|[A-Z]+_[A-Z_]*)/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\<)/, /^(?:\:\:|[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]* *\:\:)/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^else(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_])/, /^\@[a-zA-Z¡-￿_]+/, /^[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_]|\{)/, /^[^]/], /^(?:\.\.\.)?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 507]], /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?!\>)/, /^(?:\*|\&\&|\&)/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 12, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[5], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[44], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[7], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[55], -1,
   3, "keyword", e[36], -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "type", e[35], -1,
   3, "type", e[37], -1,
   3, "keyword", e[34], -1,
   3, "atom", e[54], -1,
   3, "meta", e[17], -1,
   1, 130, -1,
   3, "number", e[25], -1,
   2, 137, -1, {"name":"string","token":"string"},
   2, 142, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[42], -1,
   3, "operator", e[43], -1,
   2, 143, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[1], -1,
   3, "keyword", e[23], -1,
   3, "keyword", e[51], -1,
   3, "keyword", e[41], -1,
   3, "keyword", e[52], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[18], -1,
   3, "keyword", e[2], -1,
   3, "keyword", e[39], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[26], -1,
   3, "keyword", e[27], -1,
   3, "keyword", e[28], -1,
   3, "keyword", e[59], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[24], -1,
   3, "keyword", e[0], -1,
   3, "keyword", e[53], -1,
   3, "keyword", e[40], -1,
   /^[^]/, -1],
  ["#", 7],
  [/^(?!\/\/|\/\*|\\)./, 7,
   "\\", 8,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 143, 9, {"name":"comment","token":"comment"},
   0, -1],
  [/^[ \t]*/, 11],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [1, 149, -1,
   1, 166, -1,
   3, "keyword", e[0], 13,
   3, "keyword", e[1], 17,
   3, "keyword", e[2], 25,
   3, "keyword", e[3], 29,
   3, "keyword", e[4], 44,
   1, 183, -1,
   2, 196, -1, {"name":"Template"},
   [7, "constructorAhead"], 50,
   0, 53,
   3, "keyword", e[5], 63,
   3, "keyword", e[6], 67,
   3, "keyword", e[7], 68,
   3, "keyword", e[8], 69,
   3, "keyword", e[9], 93,
   3, "keyword", e[10], 98,
   2, 205, -1, {"name":"Block"},
   3, "keyword", e[11], 102,
   3, "keyword", e[12], 104,
   3, "keyword", e[13], 108,
   3, "keyword", e[14], 112,
   3, "keyword", e[15], 118,
   3, "keyword", e[16], 119,
   [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 209]], 118,
   3, "meta", e[17], 122,
   2, 210, 126, {"name":"DeclType"},
   ";", -1,
   1, 220, 128],
  [1, 9, 14],
  [2, 225, 15, {"name":"ArgList"}],
  [1, 9, 16],
  [";", -1],
  [1, 9, 18],
  [1, 230, 19,
   0, 19],
  [1, 9, 20],
  [3, "operator", "=", 21,
   2, 237, -1, {"name":"NamespaceBlock"}],
  [1, 9, 22],
  [1, 130, 23],
  [1, 9, 24],
  [";", -1],
  [1, 9, 26],
  [1, 220, 27],
  [1, 9, 28],
  [";", -1],
  [1, 9, 30],
  [2, 205, 31, {"name":"Block"}],
  [1, 9, 32],
  [3, "keyword", e[18], 33,
   0, -1],
  [1, 9, 34],
  ["(", 35],
  [1, 9, 36],
  [1, 241, 37],
  [1, 9, 38],
  [1, 251, 39,
   0, 39],
  [1, 9, 40],
  [")", 41],
  [1, 9, 42],
  [2, 205, 43, {"name":"Block"}],
  [1, 9, 32],
  [1, 9, 45],
  ["{", 46],
  [1, 9, 47],
  [2, 137, 48, {"name":"string","token":"string"}],
  [1, 9, 49],
  ["}", -1],
  [1, 230, 51],
  [1, 9, 52],
  [2, 263, -1, {"name":"FunctionDef"}],
  [3, "meta", e[21], 54],
  [1, 9, 55],
  [0, 53,
   1, 296, 56,
   3, "variable qualified", e[20], 57,
   2, 303, 58, {"name":"qualifiedVariableName","token":"qualified"}],
  [1, 9, 59],
  [1, 9, 60],
  [1, 9, 61],
  [1, 304, -1],
  [2, 315, 58, {"name":"TemplateArgs"}],
  [1, 320, 62,
   ";", -1],
  [1, 9, 61],
  [1, 9, 64],
  [3, "type def", e[19], 65,
   0, 65],
  [1, 9, 66],
  [2, 337, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 70],
  [1, 9, 71],
  [1, 9, 72],
  ["(", 73],
  [2, 355, 74, {"name":"CondExpr"}],
  [2, 12, 75, {"name":"Statement"}],
  [1, 9, 76],
  [1, 9, 77],
  [1, 9, 78],
  [2, 12, 79, {"name":"Statement"}],
  [2, 12, -1, {"name":"Statement"}],
  [3, "keyword", e[7], 80],
  [1, 9, 81],
  [1, 9, 82],
  [1, 220, 83,
   0, 83],
  [2, 355, 84, {"name":"CondExpr"}],
  [1, 9, 85],
  [1, 9, 86],
  [";", 87],
  [";", -1],
  [1, 9, 88],
  [1, 220, 89,
   0, 89],
  [1, 9, 90],
  [")", 91],
  [1, 9, 92],
  [2, 12, -1, {"name":"Statement"}],
  [1, 9, 94],
  [2, 355, 95, {"name":"CondExpr"}],
  [1, 9, 96],
  [2, 12, 97, {"name":"Statement"}],
  [2, 360, -1, {"name":"Alternative"}],
  [1, 9, 99],
  [2, 355, 100, {"name":"CondExpr"}],
  [1, 9, 101],
  [2, 205, -1, {"name":"Block"}],
  [1, 9, 103],
  [";", -1],
  [1, 9, 105],
  [e[19], 106],
  [1, 9, 107],
  [";", -1],
  [1, 9, 109],
  [1, 220, 110,
   0, 110],
  [1, 9, 111],
  [";", -1],
  [1, 9, 113],
  [1, 230, 114,
   0, 114],
  [1, 9, 115],
  [2, 364, 116, {"name":"BlockOf"},
   0, 116],
  [1, 9, 117],
  [";", -1],
  [1, 9, 120],
  [1, 9, 121],
  [":", -1],
  [1, 220, 118],
  [1, 9, 123],
  [2, 225, 124, {"name":"ArgList"},
   0, 124],
  [1, 9, 125],
  [/^\;?/, -1],
  [1, 9, 127],
  [1, 304, -1],
  [1, 9, 129],
  [";", -1],
  [0, 131,
   3, "type", e[22], -1,
   3, "variable", e[20], 136,
   2, 374, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [3, "meta", e[21], 132],
  [0, 131,
   3, "variable qualified", e[20], 133,
   3, "type", e[22], -1,
   2, 303, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [2, 315, 134, {"name":"TemplateArgs"}],
  [3, "meta", "::", 135,
   0, -1],
  [1, 130, -1],
  [2, 315, -1, {"name":"TemplateArgs"}],
  [/^R\"(?:(?!\().)*\(/, 138,
   /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 139],
  [[0, [7, "rawStringContinues"], /^[^]/], 138,
   "\"", -1],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 140],
  ["\\", 141,
   [0, /^(?!\")/, /^[^]/], 140,
   "\"", -1],
  [/^[^]/, 140],
  [3, "keyword", e[23], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
  [/^\/\*\*(?!\/)/, 144,
   "/*", 148,
   /^\/\/.*/, -1],
  [0, 145,
   2, 375, 144, {"name":"doccomment.braced"},
   0, 146],
  [e[49], 147],
  [2, 383, 146, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 145,
   0, 144],
  [[0, /^(?!\*\/)/, /^[^]/], 148,
   "*/", -1],
  [3, "keyword", e[24], 151,
   [0, [5, 391], "["], 152],
  [0, 149,
   0, -1],
  [1, 9, 153],
  [1, 9, 154],
  ["(", 155],
  ["[", 156],
  [1, 9, 157],
  [1, 9, 158],
  [3, "number", e[25], 159],
  [1, 395, 160],
  [1, 9, 161],
  [1, 9, 162],
  [")", 163],
  ["]", 164],
  [1, 9, 150],
  [1, 9, 165],
  ["]", 163],
  [3, "keyword", e[26], 167,
   3, "keyword", e[14], 167],
  [1, 9, 168],
  [1, 149, 169,
   0, 169],
  [1, 9, 170],
  [3, "type def", e[19], 171],
  [1, 9, 172],
  [":", 173,
   0, 179],
  [1, 9, 174],
  [3, "keyword", e[27], 175,
   0, 175],
  [1, 9, 176],
  [3, "keyword", e[28], 177,
   0, 177],
  [1, 9, 178],
  [1, 241, 179],
  [1, 9, 180],
  [";", -1,
   2, 417, 181, {"name":"ClassBody"}],
  [1, 9, 182],
  [/^\;?/, -1],
  [3, "keyword", e[29], 184],
  [1, 9, 185],
  [3, "keyword", e[23], 186,
   3, "keyword", e[1], 187,
   0, 187],
  [1, 9, 188],
  [1, 9, 189],
  [1, 241, 190],
  [1, 130, 190],
  [1, 9, 191],
  [3, "operator", "=", 192,
   0, 194],
  [1, 9, 193],
  [1, 241, 194],
  [1, 9, 195],
  [";", -1],
  [3, "keyword", e[30], 197,
   0, 197],
  [1, 9, 198],
  [3, "keyword", e[31], 199],
  [1, 9, 200],
  [2, 421, 201, {"name":"TemplateParams"}],
  [1, 9, 202],
  [1, 9, 203],
  [1, 9, 204],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 206],
  [1, 9, 207],
  [2, 12, 208, {"name":"Statement"},
   "}", -1],
  [1, 9, 207],
  [e[45], 209,
   /^\:(?!\:)/, -1],
  [0, 211,
   0, 212,
   1, 296, -1],
  [3, "keyword", e[32], 213,
   3, "keyword", e[33], 213,
   3, "keyword", e[34], 213],
  [3, "type", e[35], 214],
  [1, 9, 215],
  [1, 9, 216],
  [0, 211,
   3, "keyword", e[36], 217,
   1, 426, 217],
  [0, 212,
   3, "type", e[37], 217,
   0, 217],
  [1, 9, 218],
  [1, 432, 219,
   0, -1],
  [1, 9, 218],
  [1, 439, 221,
   1, 456, 222],
  [1, 9, 220],
  [1, 9, 223],
  [1, 320, 224,
   0, -1],
  [1, 9, 223],
  ["(", 226],
  [1, 9, 227],
  [1, 487, 228],
  [1, 9, 229],
  [")", -1],
  [0, 231,
   3, "def", e[38], -1],
  [3, "meta", /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\<)/, 232,
   3, "meta", e[21], 233],
  [1, 9, 234],
  [0, 231,
   3, "qualified def", e[38], -1],
  [2, 315, 235, {"name":"TemplateArgs"}],
  [3, "meta", "::", 236],
  [3, "qualified def", e[38], 233],
  ["{", 238],
  [1, 9, 239],
  [2, 12, 240, {"name":"Statement"},
   "}", -1],
  [1, 9, 239],
  [3, "keyword", e[23], 242,
   0, 244],
  [1, 9, 243],
  [1, 241, -1],
  [3, "keyword", e[32], 245,
   3, "keyword", e[33], 245,
   3, "keyword", e[34], 245,
   3, "keyword", e[14], 246,
   0, 246],
  [1, 9, 244],
  [1, 9, 247],
  [3, "keyword", e[36], 248,
   1, 426, 248],
  [1, 9, 249],
  [1, 432, 250,
   0, -1],
  [1, 9, 249],
  [0, 252,
   "(", 259],
  [e[61], 253,
   1, 230, 254],
  [1, 9, 252],
  [1, 9, 255],
  ["[", 256,
   0, -1],
  [1, 9, 257],
  ["]", 258],
  [1, 9, 255],
  [1, 9, 260],
  [1, 251, 261],
  [1, 9, 262],
  [")", -1],
  [2, 493, 264, {"name":"ParamList"}],
  [1, 9, 265],
  [3, "keyword", e[34], 266,
   /^(?:\&|\&\&)?/, 267],
  [1, 9, 265],
  [1, 9, 268],
  [3, "keyword", e[39], 269,
   3, "keyword", e[2], 270,
   0, 281],
  [1, 9, 271],
  [1, 9, 272],
  ["(", 273,
   0, 281],
  ["(", 274],
  [1, 9, 275],
  [1, 9, 276],
  [1, 220, 277],
  [1, 498, 278],
  [1, 9, 279],
  [1, 9, 280],
  [")", 281],
  [")", 281],
  [1, 9, 282],
  [1, 149, 283,
   0, 283],
  [1, 9, 284],
  ["->", 285,
   0, 287],
  [1, 9, 286],
  [1, 241, 287],
  [1, 9, 288],
  [3, "keyword", e[40], 289,
   2, 504, 290, {"name":"InitializerList"},
   0, 290],
  [1, 9, 288],
  [1, 9, 291],
  [";", -1,
   2, 205, -1, {"name":"Block"},
   3, "operator", "=", 292],
  [1, 9, 293],
  [3, "keyword", e[15], 294,
   3, "keyword", e[41], 294],
  [1, 9, 295],
  [";", -1],
  [3, "keyword", e[36], 300,
   3, "keyword", e[23], 297,
   e[56], 298],
  [1, 9, 299],
  [3, "meta", e[21], 298,
   3, "type", e[57], 300],
  [3, "meta", e[21], 299,
   3, "type", e[19], 300],
  [1, 9, 301],
  [1, 432, 302,
   0, -1],
  [1, 9, 301],
  [2, 374, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [1, 251, 305],
  [1, 9, 306],
  [[5, 510], 307,
   1, 516, 308,
   0, 308],
  [2, 263, -1, {"name":"FunctionDef"}],
  [1, 9, 309],
  [",", 310,
   ";", -1],
  [1, 9, 311],
  [1, 230, 312],
  [1, 9, 313],
  [1, 516, 314,
   0, 314],
  [1, 9, 309],
  ["<", 316],
  [1, 9, 317],
  [1, 519, 318],
  [1, 9, 319],
  [">", -1],
  [2, 549, -1, {"name":"BlockOf"},
   2, 225, 321, {"name":"ArgList"},
   2, 225, -1, {"name":"ArgList"},
   "[", 323,
   3, "operator", e[42], -1,
   /^(?:\-\>|\.)/, 327,
   3, "operator", e[43], 329,
   "?", 331],
  [1, 9, 322],
  [2, 205, -1, {"name":"Block"},
   0, -1],
  [1, 9, 324],
  [1, 220, 325],
  [1, 9, 326],
  ["]", -1],
  [1, 9, 328],
  [2, 559, -1, {"name":"fieldName","token":"property"}],
  [1, 9, 330],
  [1, 220, -1],
  [1, 9, 332],
  [1, 220, 333],
  [1, 9, 334],
  [":", 335],
  [1, 9, 336],
  [1, 220, -1],
  ["{", 338],
  [1, 9, 339],
  [1, 560, 340,
   0, 353],
  [1, 9, 341],
  [3, "operator", "=", 342,
   0, 343],
  [1, 9, 344],
  [1, 9, 345],
  [1, 220, 343],
  [",", 346,
   0, 353],
  [1, 9, 347],
  [1, 560, 348,
   0, 349],
  [1, 9, 350],
  [1, 9, 345],
  [3, "operator", "=", 351,
   0, 349],
  [1, 9, 352],
  [1, 220, 349],
  [1, 9, 354],
  ["}", -1],
  ["(", 356],
  [1, 9, 357],
  [1, 220, 358,
   0, 358],
  [1, 9, 359],
  [")", -1],
  [1, 9, 361],
  [3, "keyword", e[44], 362,
   0, -1],
  [1, 9, 363],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 365],
  [1, 9, 366],
  [1, 563, 367,
   0, 372],
  [1, 9, 368],
  [";", 369,
   0, 372],
  [1, 9, 370],
  [1, 563, 371,
   0, 371],
  [1, 9, 368],
  [1, 9, 373],
  ["}", -1],
  [3, "callee", e[58], -1,
   e[19], -1],
  ["{", 376],
  [3, "tag", e[46], 377,
   3, "tag", e[47], 378,
   2, 574, 382, {"name":"doccomment.type","token":"type"}],
  [e[45], 377,
   "{", 379,
   0, 378],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 378,
   0, 382],
  [2, 574, 380, {"name":"doccomment.type","token":"type"}],
  ["}", 381],
  [e[45], 381,
   3, "def", e[48], 378,
   0, 378],
  ["}", -1],
  [3, "tag", e[46], 384,
   3, "tag", e[47], 388],
  [e[45], 384,
   "{", 385,
   0, 388],
  [2, 574, 386, {"name":"doccomment.type","token":"type"}],
  ["}", 387],
  [e[45], 387,
   3, "def", e[48], 388,
   0, 388],
  [0, 389,
   2, 375, 388, {"name":"doccomment.braced"},
   0, -1],
  [e[49], 390],
  [0, 389,
   0, 388],
  ["[", 392],
  [1, 9, 393],
  [" ", 394,
   "[", -1],
  [1, 9, 393],
  [3, "meta", e[21], 396,
   3, "meta", e[19], 397,
   0, -1],
  [1, 9, 395],
  [1, 9, 398],
  ["(", 399,
   0, 400],
  [1, 9, 401],
  [1, 9, 402],
  [1, 575, 403,
   ")", 400],
  [e[50], 404],
  [1, 9, 401],
  [1, 9, 405],
  [",", 406,
   0, -1],
  [1, 9, 407],
  [3, "meta", e[21], 408,
   3, "meta", e[19], 409],
  [1, 9, 407],
  [1, 9, 410],
  ["(", 411,
   0, 412],
  [1, 9, 413],
  [1, 9, 414],
  [1, 575, 415,
   ")", 412],
  [e[50], 416],
  [1, 9, 413],
  [1, 9, 405],
  ["{", 418],
  [1, 9, 419],
  [2, 585, 420, {"name":"ClassItem"},
   "}", -1],
  [1, 9, 419],
  ["<", 422],
  [1, 9, 423],
  [1, 596, 424],
  [1, 9, 425],
  [">", -1],
  [0, 427,
   3, "keyword", e[23], 430,
   0, 431],
  [3, "type", e[35], 428],
  [0, 427,
   1, 9, 429,
   0, -1],
  [3, "type", e[37], -1],
  [1, 9, 431],
  [3, "meta", e[21], 431,
   3, "type", e[19], -1],
  [2, 315, -1, {"name":"TemplateArgs"},
   3, "meta", "::", 433,
   1, 149, -1,
   "[", 435,
   /^[\*\&]/, -1,
   3, "keyword", e[34], -1],
  [1, 9, 434],
  [1, 241, -1],
  [1, 9, 436],
  [3, "number", e[25], 437,
   0, 437],
  [1, 9, 438],
  ["]", -1],
  [3, "keyword", e[41], 440,
   3, "keyword", e[51], 444,
   2, 142, -1, {"name":"prefixOp","token":"operator"}],
  [1, 9, 441],
  ["[", 442,
   0, -1],
  [1, 9, 443],
  ["]", -1],
  [1, 9, 445],
  ["[", 446,
   0, 447],
  [1, 9, 448],
  [1, 9, 449],
  ["]", 447],
  ["(", 450,
   0, 451],
  [1, 9, 452],
  [1, 9, 453],
  [1, 220, 454],
  [1, 149, -1,
   0, -1],
  [1, 9, 455],
  [")", 451],
  [3, "keyword", e[52], -1,
   [0, [5, 632], "["], 457,
   3, "keyword", e[53], 463,
   2, 636, 475, {"name":"ParenExpr"},
   3, "atom", e[54], -1,
   3, "number", e[25], -1,
   2, 137, -1, {"name":"string","token":"string"},
   2, 549, -1, {"name":"BlockOf"},
   3, "keyword", e[55], 477,
   1, 130, -1],
  [1, 9, 458],
  [1, 641, 459],
  [1, 9, 460],
  ["]", 461],
  [1, 9, 462],
  [2, 263, -1, {"name":"FunctionDef"},
   2, 205, -1, {"name":"Block"}],
  [1, 9, 464],
  ["<", 465],
  [1, 9, 466],
  [1, 241, 467],
  [1, 9, 468],
  [">", 469],
  [1, 9, 470],
  ["(", 471],
  [1, 9, 472],
  [1, 220, 473],
  [1, 9, 474],
  [")", -1],
  [1, 9, 476],
  [1, 220, -1,
   0, -1],
  [1, 9, 478],
  ["(", 479,
   e[50], 480],
  [1, 9, 481],
  [1, 9, 482],
  [1, 241, 483],
  [1, 220, 484],
  [1, 9, 485],
  [1, 9, 486],
  [")", 484],
  [3, "meta", e[17], -1],
  [1, 220, 488,
   0, -1],
  [1, 9, 489],
  [",", 490,
   0, -1],
  [1, 9, 491],
  [1, 220, 492],
  [1, 9, 489],
  ["(", 494],
  [1, 9, 495],
  [1, 651, 496],
  [1, 9, 497],
  [")", -1],
  [1, 241, 499,
   0, -1],
  [1, 9, 500],
  [",", 501,
   0, -1],
  [1, 9, 502],
  [1, 241, 503],
  [1, 9, 500],
  [":", 505],
  [1, 9, 506],
  [1, 665, -1],
  [1, 9, 508],
  [1, 432, 509,
   /^[a-zA-Z¡-￿_]/, -1],
  [1, 9, 508],
  ["(", 511],
  [1, 9, 512],
  [")", -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "keyword", e[34], -1,
   3, "type", e[35], -1,
   3, "keyword", e[36], -1,
   3, "keyword", e[23], 513,
   e[56], 514],
  [1, 9, 515],
  [3, "meta", e[21], 514,
   3, "type", e[57], -1],
  [3, "meta", e[21], 515,
   3, "type", e[19], -1],
  [3, "operator", "=", 517,
   2, 549, -1, {"name":"BlockOf"},
   2, 225, -1, {"name":"ArgList"}],
  [1, 9, 518],
  [1, 220, -1],
  [3, "keyword", e[31], 520,
   0, 521,
   0, 522,
   3, "number", e[25], 523,
   0, -1],
  [1, 9, 524],
  [1, 9, 525],
  [3, "keyword", e[32], 526,
   3, "keyword", e[33], 526,
   1, 241, 527],
  [1, 9, 528],
  [2, 315, 521, {"name":"TemplateArgs"}],
  [3, "keyword", e[26], 529,
   3, "keyword", e[23], 529],
  [1, 9, 522],
  [1, 9, 530],
  [",", 531,
   0, -1],
  [1, 9, 532],
  [e[50], 533],
  [1, 9, 534],
  [1, 241, 523],
  [1, 9, 535],
  [3, "keyword", e[31], 536,
   0, 537,
   0, 538,
   3, "number", e[25], 539],
  [2, 493, 523, {"name":"ParamList"},
   1, 516, 523,
   0, 523],
  [1, 9, 540],
  [1, 9, 541],
  [3, "keyword", e[32], 542,
   3, "keyword", e[33], 542,
   1, 241, 543],
  [1, 9, 528],
  [2, 315, 537, {"name":"TemplateArgs"}],
  [3, "keyword", e[26], 544,
   3, "keyword", e[23], 544],
  [1, 9, 538],
  [1, 9, 545],
  [1, 9, 546],
  [e[50], 547],
  [1, 241, 539],
  [1, 9, 548],
  [2, 493, 539, {"name":"ParamList"},
   1, 516, 539,
   0, 539],
  ["{", 550],
  [1, 9, 551],
  [1, 220, 552,
   0, 557],
  [1, 9, 553],
  [",", 554,
   0, 557],
  [1, 9, 555],
  [1, 220, 556,
   0, 556],
  [1, 9, 553],
  [1, 9, 558],
  ["}", -1],
  [3, "callee", e[58], -1,
   e[19], -1],
  [3, "keyword", e[59], 561,
   3, "def property", e[19], -1],
  [3, "operator", "->*", -1,
   ",", -1,
   3, "operator", e[43], -1,
   2, 142, -1, {"name":"prefixOp","token":"operator"},
   /^(?:\(\)|\[\])/, -1,
   3, "keyword", e[51], 562,
   3, "keyword", e[41], 562],
  [/^(?:\[\])?/, -1],
  [1, 241, 564],
  [1, 9, 565],
  [2, 559, 566, {"name":"fieldName","token":"property"},
   0, 566],
  [1, 9, 567],
  [":", 568,
   "[", 569,
   0, -1],
  [1, 9, 570],
  [1, 9, 571],
  [3, "number", e[25], -1],
  [3, "number", e[25], 572,
   0, 572],
  [1, 9, 573],
  ["]", -1],
  [1, 671, -1],
  [3, "number", e[25], -1,
   2, 137, -1, {"name":"string","token":"string"},
   e[19], -1,
   3, "operator", e[43], -1,
   ",", -1,
   "(", 576,
   "[", 579,
   "{", 582],
  [1, 9, 577],
  [1, 575, 578,
   ")", -1],
  [1, 9, 577],
  [1, 9, 580],
  [1, 575, 581,
   "]", -1],
  [1, 9, 580],
  [1, 9, 583],
  [1, 575, 584,
   "}", -1],
  [1, 9, 583],
  [3, "keyword", e[28], 586,
   2, 196, -1, {"name":"Template"},
   1, 183, -1,
   3, "keyword", e[0], 588,
   3, "meta", e[17], 592,
   1, 166, -1,
   2, 675, -1, {"name":"ObjectMember"}],
  [1, 9, 587],
  [":", -1],
  [1, 9, 589],
  [2, 225, 590, {"name":"ArgList"}],
  [1, 9, 591],
  [";", -1],
  [1, 9, 593],
  [2, 225, 594, {"name":"ArgList"},
   0, 594],
  [1, 9, 595],
  [/^\;?/, -1],
  [1, 689, 597,
   0, 598,
   0, -1],
  [1, 9, 599],
  [3, "keyword", e[32], 600,
   3, "keyword", e[33], 600,
   1, 241, 601],
  [",", 602,
   0, -1],
  [1, 9, 598],
  [1, 9, 603],
  [1, 9, 604],
  [e[50], 605],
  [1, 689, 606,
   0, 607],
  [1, 9, 608],
  [1, 9, 599],
  [3, "keyword", e[32], 609,
   3, "keyword", e[33], 609,
   1, 241, 610],
  [1, 230, 611],
  [1, 9, 607],
  [1, 9, 612],
  [1, 9, 613],
  [e[50], 614],
  [3, "operator", "=", 615,
   0, 597],
  [1, 9, 616],
  [1, 9, 617],
  [1, 230, 618],
  [1, 439, 619,
   1, 456, 620],
  [1, 9, 621],
  [1, 9, 617],
  [1, 9, 622],
  [3, "operator", "=", 623,
   0, 606],
  [e[60], 624,
   0, 597],
  [1, 9, 625],
  [1, 320, 626],
  [1, 439, 627,
   1, 456, 628],
  [1, 9, 622],
  [1, 9, 625],
  [1, 9, 629],
  [e[60], 630,
   0, 606],
  [1, 320, 631],
  [1, 9, 629],
  ["[", 633],
  [1, 9, 634],
  [e[45], 635,
   /^(?:\&|\=|this|\])/, -1],
  [1, 9, 634],
  ["(", 637],
  [1, 9, 638],
  [1, 220, 639,
   0, 639],
  [1, 9, 640],
  [")", -1],
  ["&", 642,
   "=", 643,
   3, "keyword", e[52], 643,
   0, -1],
  [1, 9, 644],
  [1, 9, 645],
  [1, 130, 643,
   0, 643],
  [",", 646,
   0, -1],
  [1, 9, 647],
  ["&", 648,
   "=", 649,
   3, "keyword", e[52], 649],
  [1, 9, 650],
  [1, 9, 645],
  [1, 130, 649,
   0, 649],
  [1, 241, 652,
   0, -1],
  [1, 9, 653],
  [1, 251, 654,
   0, 655],
  [1, 9, 656],
  [1, 9, 657],
  [2, 493, 655, {"name":"ParamList"},
   0, 655],
  [",", 658,
   0, -1],
  [1, 9, 659],
  [1, 241, 660],
  [1, 9, 661],
  [1, 251, 662,
   0, 663],
  [1, 9, 664],
  [1, 9, 657],
  [2, 493, 663, {"name":"ParamList"},
   0, 663],
  [1, 700, 666,
   0, -1],
  [1, 9, 667],
  [",", 668,
   0, -1],
  [1, 9, 669],
  [1, 700, 670],
  [1, 9, 667],
  [/^(?!\}|\*\/)/, 672,
   0, -1],
  ["{", 673,
   /^[^]/, 671],
  [1, 671, 674],
  [/^\}?/, 671],
  [3, "keyword", e[32], 676,
   3, "keyword", e[33], 676,
   3, "keyword", e[34], 676,
   3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 679,
   1, 241, 677],
  [1, 9, 675],
  [1, 9, 678],
  [1, 711, 679],
  [1, 9, 680],
  [2, 263, -1, {"name":"FunctionDef"},
   1, 516, 681,
   ":", 682,
   "[", 683,
   0, 681],
  [1, 9, 684],
  [1, 9, 685],
  [1, 9, 686],
  [";", -1],
  [3, "number", e[25], 681],
  [3, "number", e[25], 687,
   0, 687],
  [1, 9, 688],
  ["]", 681],
  [3, "keyword", e[31], 690,
   0, 692],
  [1, 9, 691],
  [2, 315, 692, {"name":"TemplateArgs"}],
  [1, 9, 693],
  [3, "keyword", e[26], 694,
   3, "keyword", e[23], 694],
  [1, 9, 695],
  [3, "type def", e[19], 696],
  [1, 9, 697],
  [3, "operator", "=", 698,
   0, -1],
  [1, 9, 699],
  [1, 130, -1,
   3, "number", e[25], -1],
  [2, 559, 701, {"name":"fieldName","token":"property"}],
  [1, 9, 702],
  ["(", 703,
   "{", 704],
  [1, 9, 705],
  [1, 9, 706],
  [1, 487, 707],
  [1, 487, 708],
  [1, 9, 709],
  [1, 9, 710],
  [")", -1],
  ["}", -1],
  [0, 712,
   "(", 719],
  [e[61], 713,
   1, 560, 714],
  [1, 9, 712],
  [1, 9, 715],
  ["[", 716,
   0, -1],
  [1, 9, 717],
  ["]", 718],
  [1, 9, 715],
  [1, 9, 720],
  [1, 711, 721],
  [1, 9, 722],
  [")", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}
function isLocalType(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
      if (state.context.name != "funcName") { return "def local" }
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var typeRE = /(^|\s)type($|\s)/;

function markTypeLocals(type, scopes, stream, state) {
  if (type == "type def") {
    var scope = getScope(state.context, scopes);
    if (scope) {
      if (!scope.localTypes) { scope.localTypes = []; }
      scope.localTypes.push(stream.current());
    }
  } else if (typeRE.test(type) && !/qualified/.test(type) &&
             isLocalType(state.context, stream.current())) {
    type += " local";
  }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", EnumBody: "}",
  ArrayInitializer: "}", NamespaceBlock: "}",
  ArrayLiteral: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")",
  TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
};

function baseIndent(cx, config) {
  for (var startLine = cx.startLine;; cx = cx.parent) {
    if (cx.name == "CondExpr")
      { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
    if (!cx.parent || cx.parent.startLine != startLine)
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function findIndent(cx, textAfter, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  var closed = textAfter && textAfter.charAt(0) == brack;
  if (brack && config.align !== false && aligned(cx))
    { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

  if (brack && (cx.name == "Block" || cx.name == "NamespaceBlock" || cx.name == "ClassBody" ||
                cx.name == "AnnotationTypeBody" || cx.name == "BlockOf" || cx.name == "EnumBody")) {
    var parent = cx.parent;
    if (parent && parent.name == "Statement" && parent.parent &&
        parent.parent.name == "Statement" && hasSubStatement(parent.parent))
      { parent = parent.parent; }
    var base$1 = statementIndent(parent, config);

    if (closed || cx.name == "NamespaceBlock") { return base$1 }
    if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
    if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
    return base$1 + config.indentUnit
  }

  var base = baseIndent(cx, config.tabSize);
  if (brack) {
    if (closed && brack != ")") { return base }
    return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "EnumConstant" ||
             cx.name == "AnnotationTypeItem") {
    if (hasSubStatement(cx)) { return base + config.indentUnit; }
    return base + 2 * config.indentUnit
  } else if (cx.name == "Alternative") {
    base = baseIndent(cx.parent, config.tabSize);
    if (!textAfter || /^else\b/.test(textAfter)) { return base }
    return base + config.indentUnit
  } else if (cx.name == "ArrowRest") {
    return base + config.indentUnit
  } else if (cx.name == "InitializerList") {
    return base + 2
  } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
    return base + 2 * config.indentUnit
  } else {
    return findIndent(cx.parent, textAfter, config)
  }
}

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr" ||
        cx.name == "EnumConstant" || cx.name == "Template" || cx.name == "AnnotationTypeItem" ||
        cx.parent && bracketed[cx.parent.name])
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

function localConstructorAhead(line, pos, cx) {
  var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
  if (!ahead) { return false }
  while (cx.name != "Statement") { cx = cx.parent; }
  var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
  return className ? className[1] == ahead[1] : false
}

var rawStringOpen = /R"(.*?)\(/g;

function rawStringContinues(line, pos, cx) {
  rawStringOpen.lastIndex = cx.startPos;
  var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
  return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
}

var scopes = ["Block", "FunctionDef"];
var typeScopes = ["Template"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.blockCommentContinue = " * ";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
