(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z0-9_]+(?![a-zA-Z¡-￿_0-9])|[A-Z]+[A-Z0-9]*_[A-Z0-9_]*(?![a-zA-Z¡-￿_0-9]))/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^(?:final|explicit)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr|mutable|thread_local)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\-\>|(?!\.\.)\.)/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^(?:\.\.\.)?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^(?:\(\)|\[\])/, /^(?:\[\])?/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?!\>)/, /^(?:\.\.\.|\(|\=|\>|\,)/, /^(?:\*|\&\&|\&|\.\.\.)/];
  var nodes = [
    [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
     0, 2],
    [/^[^]/, 0],
    [1, 9, 3],
    [2, 12, 4, {"name":"Statement"}],
    [0, 2,
     0, 1],
    [3, "keyword", e[5], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[55], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "type", e[32], -1,
     3, "type", e[33], -1,
     3, "keyword", e[31], -1,
     3, "atom", e[54], -1,
     3, "meta", e[17], -1,
     1, 125, -1,
     3, "number", e[22], -1,
     2, 132, -1, {"name":"string","token":"string"},
     2, 137, -1, {"name":"prefixOp","token":"operator"},
     3, "operator", e[43], -1,
     3, "operator", e[35], -1,
     2, 138, -1, {"name":"comment","token":"comment"},
     3, "keyword", e[1], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[52], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[39], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[27], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[50], -1,
     3, "keyword", e[51], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[53], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[24], -1,
     /^[^]/, -1],
    ["#", 7],
    [2, 138, 7, {"name":"comment","token":"comment"},
     "\\", 8,
     /^./, 7,
     0, -1],
    [/^[^]/, 7],
    [/^[ \t]/, 9,
     "\n", 10,
     2, 138, 9, {"name":"comment","token":"comment"},
     0, -1],
    [/^[ \t]*/, 11],
    [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
     0, 9],
    [1, 143, -1,
     1, 160, -1,
     3, "keyword", e[0], 13,
     3, "keyword", e[1], 17,
     3, "keyword", e[2], 25,
     3, "keyword", e[3], 29,
     3, "keyword", e[4], 33,
     1, 175, -1,
     2, 188, -1, {"name":"Template"},
     [7, "constructorAhead"], 39,
     3, "keyword", e[5], 42,
     3, "keyword", e[6], 46,
     3, "keyword", e[7], 47,
     3, "keyword", e[8], 48,
     3, "keyword", e[9], 72,
     3, "keyword", e[10], 77,
     2, 197, -1, {"name":"Block"},
     3, "keyword", e[11], 81,
     3, "keyword", e[12], 83,
     3, "keyword", e[13], 87,
     3, "keyword", e[14], 91,
     3, "keyword", e[15], 97,
     3, "keyword", e[16], 98,
     [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 201]], 97,
     3, "meta", e[17], 101,
     2, 202, 107, {"name":"DeclType"},
     ";", -1,
     1, 219, 123],
    [1, 9, 14],
    [2, 224, 15, {"name":"ArgList"}],
    [1, 9, 16],
    [";", -1],
    [1, 9, 18],
    [1, 229, 19,
     0, 19],
    [1, 9, 20],
    [3, "operator", "=", 21,
     2, 234, -1, {"name":"NamespaceBlock"}],
    [1, 9, 22],
    [1, 125, 23],
    [1, 9, 24],
    [";", -1],
    [1, 9, 26],
    [1, 219, 27],
    [1, 9, 28],
    [";", -1],
    [1, 9, 30],
    [2, 197, 31, {"name":"Block"}],
    [1, 9, 32],
    [2, 238, -1, {"name":"Catch"}],
    [1, 9, 34],
    ["{", 35],
    [1, 9, 36],
    [2, 132, 37, {"name":"string","token":"string"}],
    [1, 9, 38],
    ["}", -1],
    [1, 229, 40],
    [1, 9, 41],
    [2, 250, -1, {"name":"FunctionDef"}],
    [1, 9, 43],
    [3, "type def", e[18], 44,
     0, 44],
    [1, 9, 45],
    [2, 283, -1, {"name":"BlockOf"},
     0, -1],
    [1, 9, 49],
    [1, 9, 50],
    [1, 9, 51],
    ["(", 52],
    [2, 301, 53, {"name":"CondExpr"}],
    [2, 12, 54, {"name":"Statement"}],
    [1, 9, 55],
    [1, 9, 56],
    [1, 9, 57],
    [2, 12, 58, {"name":"Statement"}],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[7], 59],
    [1, 9, 60],
    [1, 9, 61],
    [1, 219, 62,
     0, 62],
    [2, 301, 63, {"name":"CondExpr"}],
    [1, 9, 64],
    [1, 9, 65],
    [";", 66],
    [";", -1],
    [1, 9, 67],
    [1, 219, 68,
     0, 68],
    [1, 9, 69],
    [")", 70],
    [1, 9, 71],
    [2, 12, -1, {"name":"Statement"}],
    [1, 9, 73],
    [2, 301, 74, {"name":"CondExpr"}],
    [1, 9, 75],
    [2, 12, 76, {"name":"Statement"}],
    [2, 306, -1, {"name":"Alternative"}],
    [1, 9, 78],
    [2, 301, 79, {"name":"CondExpr"}],
    [1, 9, 80],
    [2, 197, -1, {"name":"Block"}],
    [1, 9, 82],
    [";", -1],
    [1, 9, 84],
    [e[18], 85],
    [1, 9, 86],
    [";", -1],
    [1, 9, 88],
    [1, 219, 89,
     0, 89],
    [1, 9, 90],
    [";", -1],
    [1, 9, 92],
    [1, 229, 93,
     0, 93],
    [1, 9, 94],
    [2, 310, 95, {"name":"BlockOf"},
     0, 95],
    [1, 9, 96],
    [";", -1],
    [1, 9, 99],
    [1, 9, 100],
    [":", -1],
    [1, 219, 97],
    [1, 9, 102],
    [2, 320, 103, {"name":"ParenTokens"},
     0, 103],
    [1, 9, 104],
    [2, 197, -1, {"name":"Block"},
     0, 105],
    [1, 324, 106,
     0, -1],
    [1, 9, 105],
    [1, 9, 108],
    [1, 345, 109],
    [1, 9, 110],
    [3, "meta", e[17], 111,
     [5, 357], 112,
     1, 361, 113,
     0, 113],
    [1, 9, 114],
    [2, 250, -1, {"name":"FunctionDef"}],
    [1, 9, 115],
    [2, 320, 116, {"name":"ParenTokens"},
     0, 116],
    [",", 117,
     ";", -1],
    [1, 9, 118],
    [1, 9, 119],
    [/^\;?/, -1],
    [1, 229, 120],
    [1, 9, 121],
    [1, 361, 122,
     0, 122],
    [1, 9, 115],
    [1, 9, 124],
    [";", -1],
    [0, 126,
     3, "type", e[19], -1,
     2, 364, 131, {"name":"unqualifiedVariableName","token":"variable"}],
    [1, 365, 127],
    [0, 126,
     3, "type qualified", e[19], 128,
     2, 370, 128, {"name":"qualifiedVariableName","token":"qualified"}],
    [2, 371, 129, {"name":"TemplateArgs"},
     0, -1],
    [/^(?=\:\:)/, 130,
     0, -1],
    [1, 125, -1],
    [2, 371, -1, {"name":"TemplateArgs"},
     0, -1],
    [/^R\"(?:(?!\().)*\(/, 133,
     /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 134],
    [[0, [7, "rawStringContinues"], /^[^]/], 133,
     "\"", -1],
    [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
     "\"", 135],
    ["\\", 136,
     [0, /^(?!\")/, /^[^]/], 135,
     "\"", -1],
    [/^[^]/, 135],
    [3, "keyword", e[20], -1,
     /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
    [/^\/\*\*(?!\/)/, 139,
     "/*", 142,
     /^\/\/.*/, -1],
    [e[48], 140,
     0, 141],
    [0, 139,
     0, 139],
    [2, 376, 141, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 142,
     "*/", -1],
    [3, "keyword", e[21], 145,
     [0, [5, 387], "["], 146],
    [0, 143,
     0, -1],
    [1, 9, 147],
    [1, 9, 148],
    ["(", 149],
    ["[", 150],
    [1, 9, 151],
    [1, 9, 152],
    [3, "number", e[22], 153],
    [1, 391, 154],
    [1, 9, 155],
    [1, 9, 156],
    [")", 157],
    ["]", 158],
    [1, 9, 144],
    [1, 9, 159],
    ["]", 157],
    [3, "keyword", e[23], 161,
     3, "keyword", e[14], 161],
    [1, 9, 162],
    [1, 143, 163,
     0, 163],
    [1, 9, 164],
    [0, 165,
     3, "type def", e[18], 168],
    [1, 413, 166],
    [1, 9, 167],
    [0, 165,
     3, "type qualified", e[18], 168],
    [1, 9, 169],
    [3, "keyword", e[24], 170,
     ":", 171,
     0, 173],
    [1, 9, 169],
    [1, 9, 172],
    [1, 418, 173],
    [1, 9, 174],
    [";", -1,
     2, 432, -1, {"name":"ClassBody"}],
    [3, "keyword", e[25], 176],
    [1, 9, 177],
    [3, "keyword", e[20], 178,
     3, "keyword", e[1], 179,
     0, 179],
    [1, 9, 180],
    [1, 9, 181],
    [1, 436, 182],
    [1, 125, 182],
    [1, 9, 183],
    [3, "operator", "=", 184,
     0, 186],
    [1, 9, 185],
    [1, 436, 186],
    [1, 9, 187],
    [";", -1],
    [3, "keyword", e[26], 189,
     0, 189],
    [1, 9, 190],
    [3, "keyword", e[27], 191],
    [1, 9, 192],
    [2, 449, 193, {"name":"TemplateParams"}],
    [1, 9, 194],
    [1, 9, 195],
    [1, 9, 196],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 198],
    [1, 9, 199],
    [2, 12, 200, {"name":"Statement"},
     "}", -1],
    [1, 9, 199],
    [e[45], 201,
     /^\:(?!\:)/, -1],
    [0, 203,
     0, 204,
     3, "keyword", e[28], 215,
     [5, 454], 216],
    [3, "keyword", e[29], 205,
     3, "keyword", e[30], 205,
     3, "keyword", e[31], 205],
    [3, "type", e[32], 206],
    [1, 9, 207],
    [1, 9, 208],
    [0, 203,
     3, "keyword", e[28], 209,
     0, 210,
     1, 459, 209],
    [0, 204,
     3, "type", e[33], 209,
     0, 209],
    [1, 9, 211],
    [3, "type", e[32], 212],
    [1, 464, 213,
     0, -1],
    [0, 210,
     1, 9, 214,
     0, 209],
    [1, 9, 211],
    [3, "type", e[33], 209],
    [1, 9, 217],
    [1, 459, 215],
    [1, 464, 218,
     0, -1],
    [1, 9, 217],
    [1, 471, 220,
     1, 488, 221],
    [1, 9, 219],
    [1, 9, 222],
    [1, 324, 223,
     0, -1],
    [1, 9, 222],
    ["(", 225],
    [1, 9, 226],
    [1, 523, 227],
    [1, 9, 228],
    [")", -1],
    [3, "keyword", e[34], 230,
     0, 232,
     3, "def", e[38], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[35], -1,
     2, 137, -1, {"name":"prefixOp","token":"operator"},
     e[56], -1,
     3, "keyword", e[36], 231,
     3, "keyword", e[37], 231],
    [e[57], -1],
    [1, 533, 233],
    [0, 232,
     3, "qualified def", e[38], -1],
    ["{", 235],
    [1, 9, 236],
    [2, 12, 237, {"name":"Statement"},
     "}", -1],
    [1, 9, 236],
    [3, "keyword", e[39], 239,
     0, -1],
    [1, 9, 240],
    ["(", 241],
    [1, 9, 242],
    [1, 436, 243],
    [1, 9, 244],
    [1, 345, 245,
     0, 245],
    [1, 9, 246],
    [")", 247],
    [1, 9, 248],
    [2, 197, 249, {"name":"Block"}],
    [1, 9, 238],
    [2, 538, 251, {"name":"ParamList"}],
    [1, 9, 252],
    [3, "keyword", e[31], 253,
     /^(?:\&|\&\&)?/, 254],
    [1, 9, 252],
    [1, 9, 255],
    [3, "keyword", e[40], 256,
     3, "keyword", e[2], 257,
     0, 268],
    [1, 9, 258],
    [1, 9, 259],
    ["(", 260,
     0, 268],
    ["(", 261],
    [1, 9, 262],
    [1, 9, 263],
    [1, 219, 264],
    [1, 543, 265],
    [1, 9, 266],
    [1, 9, 267],
    [")", 268],
    [")", 268],
    [1, 9, 269],
    [1, 143, 270,
     0, 270],
    [1, 9, 271],
    ["->", 272,
     0, 274],
    [1, 9, 273],
    [1, 436, 274],
    [1, 9, 275],
    [3, "keyword", e[41], 276,
     2, 549, 277, {"name":"InitializerList"},
     0, 277],
    [1, 9, 275],
    [1, 9, 278],
    [";", -1,
     2, 197, -1, {"name":"Block"},
     3, "operator", "=", 279],
    [1, 9, 280],
    [3, "keyword", e[15], 281,
     3, "keyword", e[37], 281],
    [1, 9, 282],
    [";", -1],
    ["{", 284],
    [1, 9, 285],
    [1, 552, 286,
     0, 299],
    [1, 9, 287],
    [3, "operator", "=", 288,
     0, 289],
    [1, 9, 290],
    [1, 9, 291],
    [1, 219, 289],
    [",", 292,
     0, 299],
    [1, 9, 293],
    [1, 552, 294,
     0, 295],
    [1, 9, 296],
    [1, 9, 291],
    [3, "operator", "=", 297,
     0, 295],
    [1, 9, 298],
    [1, 219, 295],
    [1, 9, 300],
    ["}", -1],
    ["(", 302],
    [1, 9, 303],
    [1, 219, 304,
     0, 304],
    [1, 9, 305],
    [")", -1],
    [1, 9, 307],
    [3, "keyword", e[42], 308,
     0, -1],
    [1, 9, 309],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 311],
    [1, 9, 312],
    [1, 555, 313,
     0, 318],
    [1, 9, 314],
    [";", 315,
     0, 318],
    [1, 9, 316],
    [1, 555, 317,
     0, 317],
    [1, 9, 314],
    [1, 9, 319],
    ["}", -1],
    ["(", 321],
    [1, 9, 322],
    [1, 566, 323,
     ")", -1],
    [1, 9, 322],
    [2, 571, -1, {"name":"BlockOf"},
     2, 224, 325, {"name":"ArgList"},
     e[44], 327,
     2, 224, -1, {"name":"ArgList"},
     "[", 331,
     3, "operator", e[43], -1,
     e[44], 335,
     3, "operator", e[35], 337,
     "?", 339],
    [1, 9, 326],
    [2, 197, -1, {"name":"Block"},
     0, -1],
    [1, 9, 328],
    [2, 581, 329, {"name":"fieldName","token":"property"}],
    [1, 9, 330],
    [2, 371, -1, {"name":"TemplateArgs"},
     0, -1],
    [1, 9, 332],
    [1, 219, 333],
    [1, 9, 334],
    ["]", -1],
    [1, 9, 336],
    [2, 581, -1, {"name":"fieldName","token":"property"}],
    [1, 9, 338],
    [1, 219, -1,
     0, -1],
    [1, 9, 340],
    [1, 219, 341],
    [1, 9, 342],
    [":", 343],
    [1, 9, 344],
    [1, 219, -1],
    [0, 346,
     "(", 353],
    [e[61], 347,
     1, 229, 348],
    [1, 9, 346],
    [1, 9, 349],
    ["[", 350,
     0, -1],
    [1, 9, 351],
    ["]", 352],
    [1, 9, 349],
    [1, 9, 354],
    [1, 345, 355],
    [1, 9, 356],
    [")", -1],
    ["(", 358],
    [1, 9, 359],
    [")", -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "type", e[32], -1,
     3, "keyword", e[28], -1,
     [5, 454], 360],
    [1, 459, -1],
    [3, "operator", "=", 362,
     2, 571, -1, {"name":"BlockOf"},
     2, 224, -1, {"name":"ArgList"}],
    [1, 9, 363],
    [1, 219, -1],
    [3, "callee", e[58], -1,
     e[18], -1],
    ["::", -1,
     [5, 582], 366],
    [3, "variable qualifier", e[18], 367],
    [2, 371, 368, {"name":"TemplateArgs"},
     0, 368],
    [1, 9, 369],
    ["::", -1],
    [2, 364, -1, {"name":"unqualifiedVariableName","token":"variable"}],
    ["<", 372],
    [1, 9, 373],
    [1, 586, 374],
    [1, 9, 375],
    [">", -1],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 377,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 378,
     3, "tag", e[47], 385,
     "{", 379],
    [e[45], 377,
     3, "def", e[46], 385,
     "<", 380,
     0, 385],
    [e[45], 378,
     3, "type", e[46], 385,
     0, 385],
    [3, "tag", e[47], 381],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 382],
    [/^[\t ]*/, 383],
    [">", 385],
    [1, 618, 384],
    ["}", 385],
    [e[48], 386,
     0, -1],
    [0, 385,
     0, 385],
    ["[", 388],
    [1, 9, 389],
    [" ", 390,
     "[", -1],
    [1, 9, 389],
    [1, 622, 392,
     3, "meta", e[18], 393,
     0, -1],
    [1, 9, 391],
    [1, 9, 394],
    ["(", 395,
     0, 396],
    [1, 9, 397],
    [1, 9, 398],
    [1, 627, 399,
     ")", 396],
    [e[49], 400],
    [1, 9, 397],
    [1, 9, 401],
    [",", 402,
     0, -1],
    [1, 9, 403],
    [1, 622, 404,
     3, "meta", e[18], 405],
    [1, 9, 403],
    [1, 9, 406],
    ["(", 407,
     0, 408],
    [1, 9, 409],
    [1, 9, 410],
    [1, 627, 411,
     ")", 408],
    [e[49], 412],
    [1, 9, 409],
    [1, 9, 401],
    ["::", -1,
     [5, 637], 414],
    [3, "type qualifier", e[18], 415],
    [2, 371, 416, {"name":"TemplateArgs"},
     0, 416],
    [1, 9, 417],
    ["::", -1],
    [3, "keyword", e[50], 419,
     0, 419,
     0, -1],
    [1, 9, 420],
    [3, "keyword", e[51], 421,
     0, 421],
    [1, 9, 422],
    [1, 436, 423],
    [1, 9, 424],
    [",", 425,
     0, -1],
    [1, 9, 426],
    [3, "keyword", e[50], 427,
     0, 427],
    [1, 9, 428],
    [3, "keyword", e[51], 429,
     0, 429],
    [1, 9, 430],
    [1, 436, 431],
    [1, 9, 424],
    ["{", 433],
    [1, 9, 434],
    [2, 641, 435, {"name":"ClassItem"},
     "}", -1],
    [1, 9, 434],
    [3, "keyword", e[20], 437,
     0, 439],
    [1, 9, 438],
    [1, 436, -1],
    [3, "keyword", e[29], 440,
     3, "keyword", e[30], 440,
     3, "keyword", e[31], 440,
     3, "keyword", e[14], 441,
     0, 441],
    [1, 9, 439],
    [1, 9, 442],
    [3, "keyword", e[28], 443,
     0, 444,
     1, 459, 443],
    [1, 9, 445],
    [3, "type", e[32], 446],
    [1, 464, 447,
     0, -1],
    [0, 444,
     1, 9, 448,
     0, 443],
    [1, 9, 445],
    [3, "type", e[33], 443],
    ["<", 450],
    [1, 9, 451],
    [1, 654, 452],
    [1, 9, 453],
    [">", -1],
    [/^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, 455],
    [1, 459, 456],
    [1, 9, 457],
    [1, 464, 458,
     /^[a-zA-Z¡-￿_]/, -1],
    [1, 9, 457],
    [3, "keyword", e[20], 460,
     0, 461],
    [1, 9, 461],
    [0, 462,
     3, "type", e[18], -1],
    [1, 413, 463],
    [0, 462,
     3, "type qualified", e[18], -1],
    [2, 371, -1, {"name":"TemplateArgs"},
     "::", 465,
     1, 143, -1,
     "[", 467,
     /^[\*\&]/, -1,
     3, "keyword", e[31], -1],
    [1, 9, 466],
    [3, "type qualified", e[18], -1],
    [1, 9, 468],
    [1, 219, 469,
     0, 469],
    [1, 9, 470],
    ["]", -1],
    [3, "keyword", e[37], 472,
     3, "keyword", e[36], 476,
     2, 137, -1, {"name":"prefixOp","token":"operator"}],
    [1, 9, 473],
    ["[", 474,
     0, -1],
    [1, 9, 475],
    ["]", -1],
    [1, 9, 477],
    ["[", 478,
     0, 479],
    [1, 9, 480],
    [1, 9, 481],
    ["]", 479],
    ["(", 482,
     0, 483],
    [1, 9, 484],
    [1, 9, 485],
    [1, 219, 486],
    [1, 143, -1,
     0, -1],
    [1, 9, 487],
    [")", 483],
    [3, "keyword", e[52], -1,
     "[", 489,
     3, "keyword", e[53], 496,
     2, 684, 508, {"name":"ParenExpr"},
     3, "atom", e[54], -1,
     3, "number", e[22], -1,
     2, 132, -1, {"name":"string","token":"string"},
     2, 571, -1, {"name":"BlockOf"},
     3, "keyword", e[55], 511,
     1, 125, -1],
    [1, 9, 490],
    [/^(?!\[)/, 491],
    [1, 689, 492],
    [1, 9, 493],
    ["]", 494],
    [1, 9, 495],
    [2, 250, -1, {"name":"FunctionDef"},
     2, 197, -1, {"name":"Block"}],
    [1, 9, 497],
    ["<", 498],
    [1, 9, 499],
    [1, 436, 500],
    [1, 9, 501],
    [">", 502],
    [1, 9, 503],
    ["(", 504],
    [1, 9, 505],
    [1, 219, 506],
    [1, 9, 507],
    [")", -1],
    [1, 9, 509],
    [/^(?![\[\(\-\+])/, 510,
     0, -1],
    [1, 219, -1],
    [1, 9, 512],
    ["(", 513,
     e[49], 514],
    [1, 9, 515],
    [1, 9, 516],
    [1, 436, 517],
    [1, 219, 518],
    [1, 9, 519],
    [1, 9, 520],
    [")", 518],
    [3, "meta", e[17], 521],
    [1, 9, 522],
    [2, 320, -1, {"name":"ParenTokens"},
     0, -1],
    [1, 219, 524,
     0, -1],
    [1, 9, 525],
    [e[49], 526],
    [1, 9, 527],
    [",", 528,
     0, -1],
    [1, 9, 529],
    [1, 219, 530],
    [1, 9, 531],
    [e[49], 532],
    [1, 9, 527],
    ["::", -1,
     [5, 699], 534],
    [3, "qualifier def", e[18], 535],
    [2, 371, 536, {"name":"TemplateArgs"},
     0, 536],
    [1, 9, 537],
    ["::", -1],
    ["(", 539],
    [1, 9, 540],
    [1, 703, 541],
    [1, 9, 542],
    [")", -1],
    [1, 436, 544,
     0, -1],
    [1, 9, 545],
    [",", 546,
     0, -1],
    [1, 9, 547],
    [1, 436, 548],
    [1, 9, 545],
    [":", 550],
    [1, 9, 551],
    [1, 717, -1],
    [3, "keyword", e[34], 553,
     3, "def property", e[18], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[35], -1,
     2, 137, -1, {"name":"prefixOp","token":"operator"},
     e[56], -1,
     3, "keyword", e[36], 554,
     3, "keyword", e[37], 554],
    [e[57], -1],
    [1, 436, 556],
    [1, 9, 557],
    [2, 581, 558, {"name":"fieldName","token":"property"},
     0, 558],
    [1, 9, 559],
    [":", 560,
     "[", 561,
     0, -1],
    [1, 9, 562],
    [1, 9, 563],
    [3, "number", e[22], -1],
    [1, 219, 564,
     0, 564],
    [1, 9, 565],
    ["]", -1],
    [2, 320, -1, {"name":"ParenTokens"},
     2, 723, -1, {"name":"BracketTokens"},
     2, 727, -1, {"name":"BraceTokens"},
     3, "keyword", /^(?:auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|volatile|do|if|static|while|asm|alignof)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "keyword", /^(?:alignas|asm|bool|catch|class|compl|concept|constexpr|const_cast|decltype|delete|dynamic_cast|explicit|export|friend|import|module|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|reinterpret_cast|requires|static_assert|static_cast|synchronized|template|this|throw|try|typedef|typeid|using|virtual|wchar_t)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "atom", e[54], -1,
     3, "number", e[22], -1,
     2, 132, -1, {"name":"string","token":"string"},
     3, "operator", e[35], -1,
     2, 137, -1, {"name":"prefixOp","token":"operator"},
     0, 567,
     2, 364, -1, {"name":"unqualifiedVariableName","token":"variable"},
     /^(?![\)\]\}])./, -1],
    ["::", 568,
     /^(?=[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*\:\:)/, 569],
    [0, 567,
     2, 370, -1, {"name":"qualifiedVariableName","token":"qualified"}],
    [3, "variable qualifier", e[18], 570],
    ["::", 568],
    ["{", 572],
    [1, 9, 573],
    [1, 219, 574,
     0, 579],
    [1, 9, 575],
    [",", 576,
     0, 579],
    [1, 9, 577],
    [1, 219, 578,
     0, 578],
    [1, 9, 575],
    [1, 9, 580],
    ["}", -1],
    [3, "callee", e[58], -1,
     e[18], -1],
    [3, "variable qualifier", e[18], 583],
    [1, 731, 584,
     0, 584],
    [1, 9, 585],
    ["::", -1],
    [3, "keyword", e[27], 587,
     0, 588,
     0, 589,
     0, -1],
    [1, 9, 590],
    [1, 9, 591],
    [3, "keyword", e[29], 592,
     3, "keyword", e[30], 592,
     [5, 736], 593,
     1, 739, 594],
    [2, 371, 588, {"name":"TemplateArgs"}],
    [3, "keyword", e[23], 595,
     3, "keyword", e[20], 595],
    [1, 9, 589],
    [1, 436, 596],
    [1, 9, 597],
    [1, 9, 598],
    [1, 9, 599],
    [e[49], 600],
    [1, 436, 600],
    [2, 538, 594, {"name":"ParamList"},
     1, 361, 594,
     0, 594],
    [1, 9, 601],
    [",", 602,
     0, -1],
    [1, 9, 603],
    [3, "keyword", e[27], 604,
     0, 605,
     0, 606],
    [1, 9, 607],
    [1, 9, 608],
    [3, "keyword", e[29], 609,
     3, "keyword", e[30], 609,
     [5, 745], 610,
     1, 739, 611],
    [2, 371, 605, {"name":"TemplateArgs"}],
    [3, "keyword", e[23], 612,
     3, "keyword", e[20], 612],
    [1, 9, 606],
    [1, 436, 613],
    [1, 9, 614],
    [1, 9, 615],
    [1, 9, 616],
    [e[49], 617],
    [1, 436, 617],
    [2, 538, 611, {"name":"ParamList"},
     1, 361, 611,
     0, 611],
    [1, 9, 601],
    [3, "attribute", "{", 619,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 618,
     "\n", 620,
     0, -1],
    [1, 618, 621],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 618],
    [/^(?=\*\/)/, 618,
     3, "attribute", "}", 618],
    ["::", -1,
     [5, 748], 623],
    [3, "meta", e[18], 624],
    [2, 371, 625, {"name":"TemplateArgs"},
     0, 625],
    [1, 9, 626],
    ["::", -1],
    [3, "number", e[22], -1,
     2, 132, -1, {"name":"string","token":"string"},
     e[18], -1,
     3, "operator", e[35], -1,
     ",", -1,
     "(", 628,
     "[", 631,
     "{", 634],
    [1, 9, 629],
    [1, 627, 630,
     ")", -1],
    [1, 9, 629],
    [1, 9, 632],
    [1, 627, 633,
     "]", -1],
    [1, 9, 632],
    [1, 9, 635],
    [1, 627, 636,
     "}", -1],
    [1, 9, 635],
    [3, "type qualifier", e[18], 638],
    [1, 731, 639,
     0, 639],
    [1, 9, 640],
    ["::", -1],
    [3, "keyword", e[51], 642,
     2, 188, -1, {"name":"Template"},
     1, 175, -1,
     3, "keyword", e[0], 644,
     3, "meta", e[17], 648,
     1, 160, 652,
     2, 752, -1, {"name":"ObjectMember"}],
    [1, 9, 643],
    [":", -1],
    [1, 9, 645],
    [2, 224, 646, {"name":"ArgList"}],
    [1, 9, 647],
    [";", -1],
    [1, 9, 649],
    [2, 320, 650, {"name":"ParenTokens"},
     0, 650],
    [1, 9, 651],
    [/^\;?/, -1],
    [1, 9, 653],
    [/^\;?/, -1],
    [1, 770, 655,
     0, 656,
     0, -1],
    [1, 9, 657],
    [3, "keyword", e[29], 658,
     3, "keyword", e[30], 658,
     1, 436, 659],
    [",", 660,
     0, -1],
    [1, 9, 656],
    [1, 9, 661],
    [1, 9, 662],
    [e[49], 663],
    [1, 770, 664,
     0, 665],
    [1, 9, 666],
    [1, 9, 657],
    [3, "keyword", e[29], 667,
     3, "keyword", e[30], 667,
     1, 436, 668],
    [e[49], 669],
    [1, 9, 665],
    [1, 9, 670],
    [1, 9, 671],
    [e[49], 672],
    [1, 229, 673],
    [1, 9, 674],
    [1, 9, 675],
    [e[49], 676],
    [3, "operator", "=", 677,
     0, 655],
    [1, 9, 678],
    [1, 9, 679],
    [1, 229, 680],
    [1, 739, 655],
    [1, 9, 681],
    [3, "operator", "=", 682,
     0, 664],
    [1, 9, 683],
    [1, 739, 664],
    ["(", 685],
    [1, 9, 686],
    [1, 219, 687,
     0, 687],
    [1, 9, 688],
    [")", -1],
    [/^\&?/, 690,
     "=", 691,
     3, "keyword", e[52], 691,
     0, -1],
    [1, 9, 692],
    [1, 9, 693],
    [1, 125, 691,
     0, 691],
    [",", 694,
     0, -1],
    [1, 9, 695],
    [/^\&?/, 696,
     "=", 697,
     3, "keyword", e[52], 697],
    [1, 9, 698],
    [1, 9, 693],
    [1, 125, 697,
     0, 697],
    [3, "qualifier def", e[18], 700],
    [1, 731, 701,
     0, 701],
    [1, 9, 702],
    ["::", -1],
    [1, 436, 704,
     0, -1],
    [1, 9, 705],
    [1, 345, 706,
     0, 707],
    [1, 9, 708],
    [1, 9, 709],
    [2, 538, 707, {"name":"ParamList"},
     0, 707],
    [",", 710,
     0, -1],
    [1, 9, 711],
    [1, 436, 712],
    [1, 9, 713],
    [1, 345, 714,
     0, 715],
    [1, 9, 716],
    [1, 9, 709],
    [2, 538, 715, {"name":"ParamList"},
     0, 715],
    [1, 781, 718,
     0, -1],
    [1, 9, 719],
    [",", 720,
     0, -1],
    [1, 9, 721],
    [1, 781, 722],
    [1, 9, 719],
    ["[", 724],
    [1, 9, 725],
    [1, 566, 726,
     "]", -1],
    [1, 9, 725],
    ["{", 728],
    [1, 9, 729],
    [1, 566, 730,
     "}", -1],
    [1, 9, 729],
    ["<", 732],
    [1, 9, 733],
    [e[59], 734,
     ">", -1],
    [1, 731, 735,
     2, 132, 735, {"name":"string","token":"string"},
     /^[^]/, 735],
    [1, 9, 733],
    [1, 436, 737],
    [1, 9, 738],
    [e[60], -1],
    [1, 471, 740,
     1, 488, 741],
    [1, 9, 739],
    [1, 9, 742],
    [e[59], 743,
     0, -1],
    [1, 324, 744],
    [1, 9, 742],
    [1, 436, 746],
    [1, 9, 747],
    [e[60], -1],
    [3, "meta", e[18], 749],
    [1, 731, 750,
     0, 750],
    [1, 9, 751],
    ["::", -1],
    [3, "keyword", e[29], 753,
     3, "keyword", e[30], 753,
     3, "keyword", e[31], 753,
     3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 756,
     1, 436, 754],
    [1, 9, 752],
    [1, 9, 755],
    [1, 793, 756],
    [1, 9, 757],
    [2, 250, -1, {"name":"FunctionDef"},
     1, 361, 758,
     ":", 759,
     "[", 760,
     0, 758,
     3, "meta", e[17], 761],
    [1, 9, 762],
    [1, 9, 763],
    [1, 9, 764],
    [1, 9, 765],
    [";", -1],
    [3, "number", e[22], 758],
    [1, 219, 766,
     0, 766],
    [2, 320, 767, {"name":"ParenTokens"},
     0, 767],
    [1, 9, 768],
    [1, 9, 769],
    ["]", 758],
    [/^\;?/, -1],
    [3, "keyword", e[27], 771,
     0, 773],
    [1, 9, 772],
    [2, 371, 773, {"name":"TemplateArgs"}],
    [1, 9, 774],
    [3, "keyword", e[23], 775,
     3, "keyword", e[20], 775],
    [1, 9, 776],
    [3, "type def", e[18], 777],
    [1, 9, 778],
    [3, "operator", "=", 779,
     0, -1],
    [1, 9, 780],
    [1, 125, -1,
     3, "number", e[22], -1],
    [1, 365, 782,
     2, 581, 783, {"name":"fieldName","token":"property"}],
    [1, 9, 781],
    [1, 9, 784],
    ["(", 785,
     "{", 786],
    [1, 9, 787],
    [1, 9, 788],
    [1, 805, 789],
    [1, 805, 790],
    [1, 9, 791],
    [1, 9, 792],
    [")", -1],
    ["}", -1],
    [0, 794,
     "(", 801],
    [e[61], 795,
     1, 552, 796],
    [1, 9, 794],
    [1, 9, 797],
    ["[", 798,
     0, -1],
    [1, 9, 799],
    ["]", 800],
    [1, 9, 797],
    [1, 9, 802],
    [1, 793, 803],
    [1, 9, 804],
    [")", -1],
    [1, 219, 806,
     0, -1],
    [1, 9, 807],
    [",", 808,
     0, -1],
    [1, 9, 809],
    [1, 219, 810],
    [1, 9, 807]
  ];
  var start = 0;
  var token = 5;

  var cpp = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", ObjectPattern: "}", EnumBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && brack != ")") { return base }
      return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^else\b/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
  }

  function constructorAhead(line, pos) {
    var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
    return match && match[1] == match[2]
  }

  function localConstructorAhead(line, pos, cx) {
    var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
    if (!ahead) { return false }
    while (cx.name != "Statement") { cx = cx.parent; }
    var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
    return className ? className[1] == ahead[1] : false
  }

  var rawStringOpen = /R"(.*?)\(/g;

  function rawStringContinues(line, pos, cx) {
    rawStringOpen.lastIndex = cx.startPos;
    var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
    return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
  }

  var scopes = ["Block", "FunctionDef"], typeScopes = ["Template"];

  var CppMode = (function (superclass) {
    function CppMode(conf) {
      superclass.call(this, cpp, {
        predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
      });
      this.conf = conf;
    }

    if ( superclass ) CppMode.__proto__ = superclass;
    CppMode.prototype = Object.create( superclass && superclass.prototype );
    CppMode.prototype.constructor = CppMode;

    CppMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (textAfter.charAt(0) == "#") { return 0 }
      return indent(state, textAfter, line, this.conf)
    };

    return CppMode;
  }(CodeMirror.GrammarMode));

  CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
  CppMode.prototype.blockCommentStart = "/*";
  CppMode.prototype.blockCommentEnd = "*/";
  CppMode.prototype.blockCommentContinue = " * ";
  CppMode.prototype.lineComment = "//";
  CppMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
