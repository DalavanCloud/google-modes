(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z_]+|[A-Z]+_[A-Z_]*)/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\<)/, /^(?:\:\:|[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]* *\:\:)/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^else(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_])/, /^\@[a-zA-Z¡-￿_]+/, /^[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_]|\{)/, /^[^]/], /^(?:\.\.\.)?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 495]], /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?!\>)/, /^(?:\*|\&\&|\&)/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 12, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[4], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[43], -1,
   3, "keyword", e[5], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[7], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[54], -1,
   3, "keyword", e[35], -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[32], -1,
   3, "type", e[34], -1,
   3, "type", e[36], -1,
   3, "keyword", e[33], -1,
   3, "atom", e[53], -1,
   3, "meta", e[16], -1,
   1, 126, -1,
   3, "number", e[24], -1,
   2, 131, -1, {"name":"string","token":"string"},
   2, 136, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[41], -1,
   3, "operator", e[42], -1,
   2, 137, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[0], -1,
   3, "keyword", e[22], -1,
   3, "keyword", e[50], -1,
   3, "keyword", e[40], -1,
   3, "keyword", e[51], -1,
   3, "keyword", e[2], -1,
   3, "keyword", e[17], -1,
   3, "keyword", e[1], -1,
   3, "keyword", e[38], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[25], -1,
   3, "keyword", e[26], -1,
   3, "keyword", e[27], -1,
   3, "keyword", e[58], -1,
   3, "keyword", e[28], -1,
   3, "keyword", e[23], -1,
   3, "keyword", e[52], -1,
   3, "keyword", e[39], -1,
   /^[^]/, -1],
  ["#", 7],
  [/^(?!\/\/|\/\*|\\)./, 7,
   "\\", 8,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 137, 9, {"name":"comment","token":"comment"},
   0, -1],
  [/^[ \t]*/, 11],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [1, 143, -1,
   1, 160, -1,
   3, "keyword", e[0], 13,
   3, "keyword", e[1], 21,
   3, "keyword", e[2], 25,
   3, "keyword", e[3], 40,
   1, 177, -1,
   2, 190, -1, {"name":"Template"},
   [7, "constructorAhead"], 46,
   0, 49,
   3, "keyword", e[4], 59,
   3, "keyword", e[5], 63,
   3, "keyword", e[6], 64,
   3, "keyword", e[7], 65,
   3, "keyword", e[8], 89,
   3, "keyword", e[9], 94,
   2, 199, -1, {"name":"Block"},
   3, "keyword", e[10], 98,
   3, "keyword", e[11], 100,
   3, "keyword", e[12], 104,
   3, "keyword", e[13], 108,
   3, "keyword", e[14], 114,
   3, "keyword", e[15], 115,
   [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 203]], 114,
   3, "meta", e[16], 118,
   2, 204, 122, {"name":"DeclType"},
   ";", -1,
   1, 214, 124],
  [1, 9, 14],
  [1, 219, 15,
   0, 15],
  [1, 9, 16],
  [3, "operator", "=", 17,
   2, 226, -1, {"name":"NamespaceBlock"}],
  [1, 9, 18],
  [1, 126, 19],
  [1, 9, 20],
  [";", -1],
  [1, 9, 22],
  [1, 214, 23],
  [1, 9, 24],
  [";", -1],
  [1, 9, 26],
  [2, 199, 27, {"name":"Block"}],
  [1, 9, 28],
  [3, "keyword", e[17], 29,
   0, -1],
  [1, 9, 30],
  ["(", 31],
  [1, 9, 32],
  [1, 230, 33],
  [1, 9, 34],
  [1, 240, 35,
   0, 35],
  [1, 9, 36],
  [")", 37],
  [1, 9, 38],
  [2, 199, 39, {"name":"Block"}],
  [1, 9, 28],
  [1, 9, 41],
  ["{", 42],
  [1, 9, 43],
  [2, 131, 44, {"name":"string","token":"string"}],
  [1, 9, 45],
  ["}", -1],
  [1, 219, 47],
  [1, 9, 48],
  [2, 252, -1, {"name":"FunctionDef"}],
  [3, "meta", e[20], 50],
  [1, 9, 51],
  [0, 49,
   1, 285, 52,
   3, "variable qualified", e[19], 53,
   2, 292, 54, {"name":"qualifiedVariableName","token":"qualified"}],
  [1, 9, 55],
  [1, 9, 56],
  [1, 9, 57],
  [1, 293, -1],
  [2, 304, 54, {"name":"TemplateArgs"}],
  [1, 309, 58,
   ";", -1],
  [1, 9, 57],
  [1, 9, 60],
  [3, "type def", e[18], 61,
   0, 61],
  [1, 9, 62],
  [2, 326, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 66],
  [1, 9, 67],
  [1, 9, 68],
  ["(", 69],
  [2, 344, 70, {"name":"CondExpr"}],
  [2, 12, 71, {"name":"Statement"}],
  [1, 9, 72],
  [1, 9, 73],
  [1, 9, 74],
  [2, 12, 75, {"name":"Statement"}],
  [2, 12, -1, {"name":"Statement"}],
  [3, "keyword", e[6], 76],
  [1, 9, 77],
  [1, 9, 78],
  [1, 214, 79,
   0, 79],
  [2, 344, 80, {"name":"CondExpr"}],
  [1, 9, 81],
  [1, 9, 82],
  [";", 83],
  [";", -1],
  [1, 9, 84],
  [1, 214, 85,
   0, 85],
  [1, 9, 86],
  [")", 87],
  [1, 9, 88],
  [2, 12, -1, {"name":"Statement"}],
  [1, 9, 90],
  [2, 344, 91, {"name":"CondExpr"}],
  [1, 9, 92],
  [2, 12, 93, {"name":"Statement"}],
  [2, 349, -1, {"name":"Alternative"}],
  [1, 9, 95],
  [2, 344, 96, {"name":"CondExpr"}],
  [1, 9, 97],
  [2, 199, -1, {"name":"Block"}],
  [1, 9, 99],
  [";", -1],
  [1, 9, 101],
  [e[18], 102],
  [1, 9, 103],
  [";", -1],
  [1, 9, 105],
  [1, 214, 106,
   0, 106],
  [1, 9, 107],
  [";", -1],
  [1, 9, 109],
  [1, 219, 110,
   0, 110],
  [1, 9, 111],
  [2, 353, 112, {"name":"BlockOf"},
   0, 112],
  [1, 9, 113],
  [";", -1],
  [1, 9, 116],
  [1, 9, 117],
  [":", -1],
  [1, 214, 114],
  [1, 9, 119],
  [2, 363, 120, {"name":"ArgList"},
   0, 120],
  [1, 9, 121],
  [/^\;?/, -1],
  [1, 9, 123],
  [1, 293, -1],
  [1, 9, 125],
  [";", -1],
  [0, 127,
   3, "type", e[21], -1,
   3, "variable", e[19], 130,
   2, 368, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [3, "meta", e[20], 128],
  [0, 127,
   3, "variable qualified", e[19], 129,
   3, "type", e[21], -1,
   2, 292, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [2, 304, -1, {"name":"TemplateArgs"}],
  [2, 304, -1, {"name":"TemplateArgs"}],
  [/^R\"(?:(?!\().)*\(/, 132,
   /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 133],
  [[0, [7, "rawStringContinues"], /^[^]/], 132,
   "\"", -1],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 134],
  ["\\", 135,
   [0, /^(?!\")/, /^[^]/], 134,
   "\"", -1],
  [/^[^]/, 134],
  [3, "keyword", e[22], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
  [/^\/\*\*(?!\/)/, 138,
   "/*", 142,
   /^\/\/.*/, -1],
  [0, 139,
   2, 369, 138, {"name":"doccomment.braced"},
   0, 140],
  [e[48], 141],
  [2, 377, 140, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 139,
   0, 138],
  [[0, /^(?!\*\/)/, /^[^]/], 142,
   "*/", -1],
  [3, "keyword", e[23], 145,
   [0, [5, 385], "["], 146],
  [0, 143,
   0, -1],
  [1, 9, 147],
  [1, 9, 148],
  ["(", 149],
  ["[", 150],
  [1, 9, 151],
  [1, 9, 152],
  [3, "number", e[24], 153],
  [1, 389, 154],
  [1, 9, 155],
  [1, 9, 156],
  [")", 157],
  ["]", 158],
  [1, 9, 144],
  [1, 9, 159],
  ["]", 157],
  [3, "keyword", e[25], 161,
   3, "keyword", e[13], 161],
  [1, 9, 162],
  [1, 143, 163,
   0, 163],
  [1, 9, 164],
  [3, "type def", e[18], 165],
  [1, 9, 166],
  [":", 167,
   0, 173],
  [1, 9, 168],
  [3, "keyword", e[26], 169,
   0, 169],
  [1, 9, 170],
  [3, "keyword", e[27], 171,
   0, 171],
  [1, 9, 172],
  [1, 230, 173],
  [1, 9, 174],
  [";", -1,
   2, 411, 175, {"name":"ClassBody"}],
  [1, 9, 176],
  [/^\;?/, -1],
  [3, "keyword", e[28], 178],
  [1, 9, 179],
  [3, "keyword", e[22], 180,
   3, "keyword", e[0], 181,
   0, 181],
  [1, 9, 182],
  [1, 9, 183],
  [1, 230, 184],
  [1, 126, 184],
  [1, 9, 185],
  [3, "operator", "=", 186,
   0, 188],
  [1, 9, 187],
  [1, 230, 188],
  [1, 9, 189],
  [";", -1],
  [3, "keyword", e[29], 191,
   0, 191],
  [1, 9, 192],
  [3, "keyword", e[30], 193],
  [1, 9, 194],
  [2, 415, 195, {"name":"TemplateParams"}],
  [1, 9, 196],
  [1, 9, 197],
  [1, 9, 198],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 200],
  [1, 9, 201],
  [2, 12, 202, {"name":"Statement"},
   "}", -1],
  [1, 9, 201],
  [e[44], 203,
   /^\:(?!\:)/, -1],
  [0, 205,
   0, 206,
   1, 285, -1],
  [3, "keyword", e[31], 207,
   3, "keyword", e[32], 207,
   3, "keyword", e[33], 207],
  [3, "type", e[34], 208],
  [1, 9, 209],
  [1, 9, 210],
  [0, 205,
   3, "keyword", e[35], 211,
   1, 420, 211],
  [0, 206,
   3, "type", e[36], 211,
   0, 211],
  [1, 9, 212],
  [1, 426, 213,
   0, -1],
  [1, 9, 212],
  [1, 433, 215,
   1, 450, 216],
  [1, 9, 214],
  [1, 9, 217],
  [1, 309, 218,
   0, -1],
  [1, 9, 217],
  [0, 220,
   3, "def", e[37], -1],
  [3, "meta", /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\<)/, 221,
   3, "meta", e[20], 222],
  [1, 9, 223],
  [0, 220,
   3, "qualified def", e[37], -1],
  [2, 304, 224, {"name":"TemplateArgs"}],
  [3, "meta", "::", 225],
  [3, "qualified def", e[37], 222],
  ["{", 227],
  [1, 9, 228],
  [2, 12, 229, {"name":"Statement"},
   "}", -1],
  [1, 9, 228],
  [3, "keyword", e[22], 231,
   0, 233],
  [1, 9, 232],
  [1, 230, -1],
  [3, "keyword", e[31], 234,
   3, "keyword", e[32], 234,
   3, "keyword", e[33], 234,
   3, "keyword", e[13], 235,
   0, 235],
  [1, 9, 233],
  [1, 9, 236],
  [3, "keyword", e[35], 237,
   1, 420, 237],
  [1, 9, 238],
  [1, 426, 239,
   0, -1],
  [1, 9, 238],
  [0, 241,
   "(", 248],
  [e[60], 242,
   1, 219, 243],
  [1, 9, 241],
  [1, 9, 244],
  ["[", 245,
   0, -1],
  [1, 9, 246],
  ["]", 247],
  [1, 9, 244],
  [1, 9, 249],
  [1, 240, 250],
  [1, 9, 251],
  [")", -1],
  [2, 481, 253, {"name":"ParamList"}],
  [1, 9, 254],
  [3, "keyword", e[33], 255,
   /^(?:\&|\&\&)?/, 256],
  [1, 9, 254],
  [1, 9, 257],
  [3, "keyword", e[38], 258,
   3, "keyword", e[1], 259,
   0, 270],
  [1, 9, 260],
  [1, 9, 261],
  ["(", 262,
   0, 270],
  ["(", 263],
  [1, 9, 264],
  [1, 9, 265],
  [1, 214, 266],
  [1, 486, 267],
  [1, 9, 268],
  [1, 9, 269],
  [")", 270],
  [")", 270],
  [1, 9, 271],
  [1, 143, 272,
   0, 272],
  [1, 9, 273],
  ["->", 274,
   0, 276],
  [1, 9, 275],
  [1, 230, 276],
  [1, 9, 277],
  [3, "keyword", e[39], 278,
   2, 492, 279, {"name":"InitializerList"},
   0, 279],
  [1, 9, 277],
  [1, 9, 280],
  [";", -1,
   2, 199, -1, {"name":"Block"},
   3, "operator", "=", 281],
  [1, 9, 282],
  [3, "keyword", e[14], 283,
   3, "keyword", e[40], 283],
  [1, 9, 284],
  [";", -1],
  [3, "keyword", e[35], 289,
   3, "keyword", e[22], 286,
   e[55], 287],
  [1, 9, 288],
  [3, "meta", e[20], 287,
   3, "type", e[56], 289],
  [3, "meta", e[20], 288,
   3, "type", e[18], 289],
  [1, 9, 290],
  [1, 426, 291,
   0, -1],
  [1, 9, 290],
  [2, 368, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [1, 240, 294],
  [1, 9, 295],
  [[5, 498], 296,
   1, 504, 297,
   0, 297],
  [2, 252, -1, {"name":"FunctionDef"}],
  [1, 9, 298],
  [",", 299,
   ";", -1],
  [1, 9, 300],
  [1, 219, 301],
  [1, 9, 302],
  [1, 504, 303,
   0, 303],
  [1, 9, 298],
  ["<", 305],
  [1, 9, 306],
  [1, 507, 307],
  [1, 9, 308],
  [">", -1],
  [2, 537, -1, {"name":"BlockOf"},
   2, 363, 310, {"name":"ArgList"},
   2, 363, -1, {"name":"ArgList"},
   "[", 312,
   3, "operator", e[41], -1,
   /^(?:\-\>|\.)/, 316,
   3, "operator", e[42], 318,
   "?", 320],
  [1, 9, 311],
  [2, 199, -1, {"name":"Block"},
   0, -1],
  [1, 9, 313],
  [1, 214, 314],
  [1, 9, 315],
  ["]", -1],
  [1, 9, 317],
  [2, 547, -1, {"name":"fieldName","token":"property"}],
  [1, 9, 319],
  [1, 214, -1],
  [1, 9, 321],
  [1, 214, 322],
  [1, 9, 323],
  [":", 324],
  [1, 9, 325],
  [1, 214, -1],
  ["{", 327],
  [1, 9, 328],
  [1, 548, 329,
   0, 342],
  [1, 9, 330],
  [3, "operator", "=", 331,
   0, 332],
  [1, 9, 333],
  [1, 9, 334],
  [1, 214, 332],
  [",", 335,
   0, 342],
  [1, 9, 336],
  [1, 548, 337,
   0, 338],
  [1, 9, 339],
  [1, 9, 334],
  [3, "operator", "=", 340,
   0, 338],
  [1, 9, 341],
  [1, 214, 338],
  [1, 9, 343],
  ["}", -1],
  ["(", 345],
  [1, 9, 346],
  [1, 214, 347,
   0, 347],
  [1, 9, 348],
  [")", -1],
  [1, 9, 350],
  [3, "keyword", e[43], 351,
   0, -1],
  [1, 9, 352],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 354],
  [1, 9, 355],
  [1, 551, 356,
   0, 361],
  [1, 9, 357],
  [";", 358,
   0, 361],
  [1, 9, 359],
  [1, 551, 360,
   0, 360],
  [1, 9, 357],
  [1, 9, 362],
  ["}", -1],
  ["(", 364],
  [1, 9, 365],
  [1, 562, 366],
  [1, 9, 367],
  [")", -1],
  [3, "callee", e[57], -1,
   e[18], -1],
  ["{", 370],
  [3, "tag", e[45], 371,
   3, "tag", e[46], 372,
   2, 568, 376, {"name":"doccomment.type","token":"type"}],
  [e[44], 371,
   "{", 373,
   0, 372],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 372,
   0, 376],
  [2, 568, 374, {"name":"doccomment.type","token":"type"}],
  ["}", 375],
  [e[44], 375,
   3, "def", e[47], 372,
   0, 372],
  ["}", -1],
  [3, "tag", e[45], 378,
   3, "tag", e[46], 382],
  [e[44], 378,
   "{", 379,
   0, 382],
  [2, 568, 380, {"name":"doccomment.type","token":"type"}],
  ["}", 381],
  [e[44], 381,
   3, "def", e[47], 382,
   0, 382],
  [0, 383,
   2, 369, 382, {"name":"doccomment.braced"},
   0, -1],
  [e[48], 384],
  [0, 383,
   0, 382],
  ["[", 386],
  [1, 9, 387],
  [" ", 388,
   "[", -1],
  [1, 9, 387],
  [3, "meta", e[20], 390,
   3, "meta", e[18], 391,
   0, -1],
  [1, 9, 389],
  [1, 9, 392],
  ["(", 393,
   0, 394],
  [1, 9, 395],
  [1, 9, 396],
  [1, 569, 397,
   ")", 394],
  [e[49], 398],
  [1, 9, 395],
  [1, 9, 399],
  [",", 400,
   0, -1],
  [1, 9, 401],
  [3, "meta", e[20], 402,
   3, "meta", e[18], 403],
  [1, 9, 401],
  [1, 9, 404],
  ["(", 405,
   0, 406],
  [1, 9, 407],
  [1, 9, 408],
  [1, 569, 409,
   ")", 406],
  [e[49], 410],
  [1, 9, 407],
  [1, 9, 399],
  ["{", 412],
  [1, 9, 413],
  [2, 579, 414, {"name":"ClassItem"},
   "}", -1],
  [1, 9, 413],
  ["<", 416],
  [1, 9, 417],
  [1, 586, 418],
  [1, 9, 419],
  [">", -1],
  [0, 421,
   3, "keyword", e[22], 424,
   0, 425],
  [3, "type", e[34], 422],
  [0, 421,
   1, 9, 423,
   0, -1],
  [3, "type", e[36], -1],
  [1, 9, 425],
  [3, "meta", e[20], 425,
   3, "type", e[18], -1],
  [2, 304, -1, {"name":"TemplateArgs"},
   "::", 427,
   1, 143, -1,
   "[", 429,
   /^[\*\&]/, -1,
   3, "keyword", e[33], -1],
  [1, 9, 428],
  [1, 230, -1],
  [1, 9, 430],
  [3, "number", e[24], 431,
   0, 431],
  [1, 9, 432],
  ["]", -1],
  [3, "keyword", e[40], 434,
   3, "keyword", e[50], 438,
   2, 136, -1, {"name":"prefixOp","token":"operator"}],
  [1, 9, 435],
  ["[", 436,
   0, -1],
  [1, 9, 437],
  ["]", -1],
  [1, 9, 439],
  ["[", 440,
   0, 441],
  [1, 9, 442],
  [1, 9, 443],
  ["]", 441],
  ["(", 444,
   0, 445],
  [1, 9, 446],
  [1, 9, 447],
  [1, 214, 448],
  [1, 143, -1,
   0, -1],
  [1, 9, 449],
  [")", 445],
  [3, "keyword", e[51], -1,
   [0, [5, 622], "["], 451,
   3, "keyword", e[52], 457,
   2, 626, 469, {"name":"ParenExpr"},
   3, "atom", e[53], -1,
   3, "number", e[24], -1,
   2, 131, -1, {"name":"string","token":"string"},
   2, 537, -1, {"name":"BlockOf"},
   3, "keyword", e[54], 471,
   1, 126, -1],
  [1, 9, 452],
  [1, 631, 453],
  [1, 9, 454],
  ["]", 455],
  [1, 9, 456],
  [2, 252, -1, {"name":"FunctionDef"},
   2, 199, -1, {"name":"Block"}],
  [1, 9, 458],
  ["<", 459],
  [1, 9, 460],
  [1, 230, 461],
  [1, 9, 462],
  [">", 463],
  [1, 9, 464],
  ["(", 465],
  [1, 9, 466],
  [1, 214, 467],
  [1, 9, 468],
  [")", -1],
  [1, 9, 470],
  [1, 214, -1,
   0, -1],
  [1, 9, 472],
  ["(", 473,
   e[49], 474],
  [1, 9, 475],
  [1, 9, 476],
  [1, 230, 477],
  [1, 214, 478],
  [1, 9, 479],
  [1, 9, 480],
  [")", 478],
  [3, "meta", e[16], -1],
  ["(", 482],
  [1, 9, 483],
  [1, 641, 484],
  [1, 9, 485],
  [")", -1],
  [1, 230, 487,
   0, -1],
  [1, 9, 488],
  [",", 489,
   0, -1],
  [1, 9, 490],
  [1, 230, 491],
  [1, 9, 488],
  [":", 493],
  [1, 9, 494],
  [1, 655, -1],
  [1, 9, 496],
  [1, 426, 497,
   /^[a-zA-Z¡-￿_]/, -1],
  [1, 9, 496],
  ["(", 499],
  [1, 9, 500],
  [")", -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "type", e[34], -1,
   3, "keyword", e[35], -1,
   3, "keyword", e[22], 501,
   e[55], 502],
  [1, 9, 503],
  [3, "meta", e[20], 502,
   3, "type", e[56], -1],
  [3, "meta", e[20], 503,
   3, "type", e[18], -1],
  [3, "operator", "=", 505,
   2, 537, -1, {"name":"BlockOf"},
   2, 363, -1, {"name":"ArgList"}],
  [1, 9, 506],
  [1, 214, -1],
  [3, "keyword", e[30], 508,
   0, 509,
   0, 510,
   3, "number", e[24], 511,
   0, -1],
  [1, 9, 512],
  [1, 9, 513],
  [3, "keyword", e[31], 514,
   3, "keyword", e[32], 514,
   1, 230, 515],
  [1, 9, 516],
  [2, 304, 509, {"name":"TemplateArgs"}],
  [3, "keyword", e[25], 517,
   3, "keyword", e[22], 517],
  [1, 9, 510],
  [1, 9, 518],
  [",", 519,
   0, -1],
  [1, 9, 520],
  [e[49], 521],
  [1, 9, 522],
  [1, 230, 511],
  [1, 9, 523],
  [3, "keyword", e[30], 524,
   0, 525,
   0, 526,
   3, "number", e[24], 527],
  [2, 481, 511, {"name":"ParamList"},
   1, 504, 511,
   0, 511],
  [1, 9, 528],
  [1, 9, 529],
  [3, "keyword", e[31], 530,
   3, "keyword", e[32], 530,
   1, 230, 531],
  [1, 9, 516],
  [2, 304, 525, {"name":"TemplateArgs"}],
  [3, "keyword", e[25], 532,
   3, "keyword", e[22], 532],
  [1, 9, 526],
  [1, 9, 533],
  [1, 9, 534],
  [e[49], 535],
  [1, 230, 527],
  [1, 9, 536],
  [2, 481, 527, {"name":"ParamList"},
   1, 504, 527,
   0, 527],
  ["{", 538],
  [1, 9, 539],
  [1, 214, 540,
   0, 545],
  [1, 9, 541],
  [",", 542,
   0, 545],
  [1, 9, 543],
  [1, 214, 544,
   0, 544],
  [1, 9, 541],
  [1, 9, 546],
  ["}", -1],
  [3, "callee", e[57], -1,
   e[18], -1],
  [3, "keyword", e[58], 549,
   3, "def property", e[18], -1],
  [3, "operator", "->*", -1,
   ",", -1,
   3, "operator", e[42], -1,
   2, 136, -1, {"name":"prefixOp","token":"operator"},
   /^(?:\(\)|\[\])/, -1,
   3, "keyword", e[50], 550,
   3, "keyword", e[40], 550],
  [/^(?:\[\])?/, -1],
  [1, 230, 552],
  [1, 9, 553],
  [2, 547, 554, {"name":"fieldName","token":"property"},
   0, 554],
  [1, 9, 555],
  [":", 556,
   "[", 557,
   0, -1],
  [1, 9, 558],
  [1, 9, 559],
  [3, "number", e[24], -1],
  [3, "number", e[24], 560,
   0, 560],
  [1, 9, 561],
  ["]", -1],
  [1, 214, 563,
   0, -1],
  [1, 9, 564],
  [",", 565,
   0, -1],
  [1, 9, 566],
  [1, 214, 567],
  [1, 9, 564],
  [1, 661, -1],
  [3, "number", e[24], -1,
   2, 131, -1, {"name":"string","token":"string"},
   e[18], -1,
   3, "operator", e[42], -1,
   ",", -1,
   "(", 570,
   "[", 573,
   "{", 576],
  [1, 9, 571],
  [1, 569, 572,
   ")", -1],
  [1, 9, 571],
  [1, 9, 574],
  [1, 569, 575,
   "]", -1],
  [1, 9, 574],
  [1, 9, 577],
  [1, 569, 578,
   "}", -1],
  [1, 9, 577],
  [3, "keyword", e[27], 580,
   2, 190, -1, {"name":"Template"},
   1, 177, -1,
   3, "meta", e[16], 582,
   1, 160, -1,
   2, 665, -1, {"name":"ObjectMember"}],
  [1, 9, 581],
  [":", -1],
  [1, 9, 583],
  [2, 363, 584, {"name":"ArgList"},
   0, 584],
  [1, 9, 585],
  [/^\;?/, -1],
  [1, 679, 587,
   0, 588,
   0, -1],
  [1, 9, 589],
  [3, "keyword", e[31], 590,
   3, "keyword", e[32], 590,
   1, 230, 591],
  [",", 592,
   0, -1],
  [1, 9, 588],
  [1, 9, 593],
  [1, 9, 594],
  [e[49], 595],
  [1, 679, 596,
   0, 597],
  [1, 9, 598],
  [1, 9, 589],
  [3, "keyword", e[31], 599,
   3, "keyword", e[32], 599,
   1, 230, 600],
  [1, 219, 601],
  [1, 9, 597],
  [1, 9, 602],
  [1, 9, 603],
  [e[49], 604],
  [3, "operator", "=", 605,
   0, 587],
  [1, 9, 606],
  [1, 9, 607],
  [1, 219, 608],
  [1, 433, 609,
   1, 450, 610],
  [1, 9, 611],
  [1, 9, 607],
  [1, 9, 612],
  [3, "operator", "=", 613,
   0, 596],
  [e[59], 614,
   0, 587],
  [1, 9, 615],
  [1, 309, 616],
  [1, 433, 617,
   1, 450, 618],
  [1, 9, 612],
  [1, 9, 615],
  [1, 9, 619],
  [e[59], 620,
   0, 596],
  [1, 309, 621],
  [1, 9, 619],
  ["[", 623],
  [1, 9, 624],
  [e[44], 625,
   /^(?:\&|\=|this|\])/, -1],
  [1, 9, 624],
  ["(", 627],
  [1, 9, 628],
  [1, 214, 629,
   0, 629],
  [1, 9, 630],
  [")", -1],
  ["&", 632,
   "=", 633,
   3, "keyword", e[51], 633,
   0, -1],
  [1, 9, 634],
  [1, 9, 635],
  [1, 126, 633,
   0, 633],
  [",", 636,
   0, -1],
  [1, 9, 637],
  ["&", 638,
   "=", 639,
   3, "keyword", e[51], 639],
  [1, 9, 640],
  [1, 9, 635],
  [1, 126, 639,
   0, 639],
  [1, 230, 642,
   0, -1],
  [1, 9, 643],
  [1, 240, 644,
   0, 645],
  [1, 9, 646],
  [1, 9, 647],
  [2, 481, 645, {"name":"ParamList"},
   0, 645],
  [",", 648,
   0, -1],
  [1, 9, 649],
  [1, 230, 650],
  [1, 9, 651],
  [1, 240, 652,
   0, 653],
  [1, 9, 654],
  [1, 9, 647],
  [2, 481, 653, {"name":"ParamList"},
   0, 653],
  [1, 690, 656,
   0, -1],
  [1, 9, 657],
  [",", 658,
   0, -1],
  [1, 9, 659],
  [1, 690, 660],
  [1, 9, 657],
  [/^(?!\}|\*\/)/, 662,
   0, -1],
  ["{", 663,
   /^[^]/, 661],
  [1, 661, 664],
  [/^\}?/, 661],
  [3, "keyword", e[31], 666,
   3, "keyword", e[32], 666,
   3, "keyword", e[33], 666,
   3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 669,
   1, 230, 667],
  [1, 9, 665],
  [1, 9, 668],
  [1, 701, 669],
  [1, 9, 670],
  [2, 252, -1, {"name":"FunctionDef"},
   1, 504, 671,
   ":", 672,
   "[", 673,
   0, 671],
  [1, 9, 674],
  [1, 9, 675],
  [1, 9, 676],
  [";", -1],
  [3, "number", e[24], 671],
  [3, "number", e[24], 677,
   0, 677],
  [1, 9, 678],
  ["]", 671],
  [3, "keyword", e[30], 680,
   0, 682],
  [1, 9, 681],
  [2, 304, 682, {"name":"TemplateArgs"}],
  [1, 9, 683],
  [3, "keyword", e[25], 684,
   3, "keyword", e[22], 684],
  [1, 9, 685],
  [3, "type def", e[18], 686],
  [1, 9, 687],
  [3, "operator", "=", 688,
   0, -1],
  [1, 9, 689],
  [1, 126, -1,
   3, "number", e[24], -1],
  [2, 547, 691, {"name":"fieldName","token":"property"}],
  [1, 9, 692],
  ["(", 693,
   "{", 694],
  [1, 9, 695],
  [1, 9, 696],
  [1, 562, 697],
  [1, 562, 698],
  [1, 9, 699],
  [1, 9, 700],
  [")", -1],
  ["}", -1],
  [0, 702,
   "(", 709],
  [e[60], 703,
   1, 548, 704],
  [1, 9, 702],
  [1, 9, 705],
  ["[", 706,
   0, -1],
  [1, 9, 707],
  ["]", 708],
  [1, 9, 705],
  [1, 9, 710],
  [1, 701, 711],
  [1, 9, 712],
  [")", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}
function isLocalType(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
      if (state.context.name != "funcName") { return "def local" }
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var typeRE = /(^|\s)type($|\s)/;

function markTypeLocals(type, scopes, stream, state) {
  if (type == "type def") {
    var scope = getScope(state.context, scopes);
    if (scope) {
      if (!scope.localTypes) { scope.localTypes = []; }
      scope.localTypes.push(stream.current());
    }
  } else if (typeRE.test(type) && !/qualified/.test(type) &&
             isLocalType(state.context, stream.current())) {
    type += " local";
  }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", EnumBody: "}",
  ArrayInitializer: "}", NamespaceBlock: "}",
  ArrayLiteral: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")",
  TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
};

function baseIndent(cx, config) {
  for (var startLine = cx.startLine;; cx = cx.parent) {
    if (cx.name == "CondExpr")
      { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
    if (!cx.parent || cx.parent.startLine != startLine)
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function findIndent(cx, textAfter, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  var closed = textAfter && textAfter.charAt(0) == brack;
  if (brack && config.align !== false && aligned(cx))
    { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

  if (brack && (cx.name == "Block" || cx.name == "NamespaceBlock" || cx.name == "ClassBody" ||
                cx.name == "AnnotationTypeBody" || cx.name == "BlockOf" || cx.name == "EnumBody")) {
    var parent = cx.parent;
    if (parent && parent.name == "Statement" && parent.parent &&
        parent.parent.name == "Statement" && hasSubStatement(parent.parent))
      { parent = parent.parent; }
    var base$1 = statementIndent(parent, config);

    if (closed || cx.name == "NamespaceBlock") { return base$1 }
    if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
    if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
    return base$1 + config.indentUnit
  }

  var base = baseIndent(cx, config.tabSize);
  if (brack) {
    if (closed && brack != ")") { return base }
    return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "EnumConstant" ||
             cx.name == "AnnotationTypeItem") {
    if (hasSubStatement(cx)) { return base + config.indentUnit; }
    return base + 2 * config.indentUnit
  } else if (cx.name == "Alternative") {
    base = baseIndent(cx.parent, config.tabSize);
    if (!textAfter || /^else\b/.test(textAfter)) { return base }
    return base + config.indentUnit
  } else if (cx.name == "ArrowRest") {
    return base + config.indentUnit
  } else if (cx.name == "InitializerList") {
    return base + 2
  } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
    return base + 2 * config.indentUnit
  } else {
    return findIndent(cx.parent, textAfter, config)
  }
}

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr" ||
        cx.name == "EnumConstant" || cx.name == "Template" || cx.name == "AnnotationTypeItem" ||
        cx.parent && bracketed[cx.parent.name])
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

function localConstructorAhead(line, pos, cx) {
  var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
  if (!ahead) { return false }
  while (cx.name != "Statement") { cx = cx.parent; }
  var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
  return className ? className[1] == ahead[1] : false
}

var rawStringOpen = /R"(.*?)\(/g;

function rawStringContinues(line, pos, cx) {
  rawStringOpen.lastIndex = cx.startPos;
  var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
  return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
}

var scopes = ["Block", "FunctionDef"];
var typeScopes = ["Template"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.blockCommentContinue = " * ";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
