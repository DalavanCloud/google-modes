(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z_]+|[A-Z]+_[A-Z_]*)/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\<)/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^(?:\:\:|[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]* *\:\:)/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_])/, /^\@[a-zA-Z¡-￿_]+/, /^[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_]|\{)/, /^[^]/], /^(?:\.\.\.)?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?!\>)/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?:\*|\&\&|\&)/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 12, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[5], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[42], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[7], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[53], -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "type", e[35], -1,
   3, "type", e[36], -1,
   3, "keyword", e[34], -1,
   3, "atom", e[52], -1,
   3, "meta", e[17], -1,
   1, 130, -1,
   3, "number", e[24], -1,
   2, 137, -1, {"name":"string","token":"string"},
   2, 142, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[54], -1,
   3, "operator", e[55], -1,
   2, 143, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[1], -1,
   3, "keyword", e[22], -1,
   3, "keyword", e[49], -1,
   3, "keyword", e[41], -1,
   3, "keyword", e[50], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[18], -1,
   3, "keyword", e[2], -1,
   3, "keyword", e[39], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[25], -1,
   3, "keyword", e[26], -1,
   3, "keyword", e[27], -1,
   3, "keyword", e[56], -1,
   3, "keyword", e[28], -1,
   3, "keyword", e[23], -1,
   3, "keyword", e[0], -1,
   3, "keyword", e[51], -1,
   3, "keyword", e[40], -1,
   /^[^]/, -1],
  ["#", 7],
  [/^(?!\/\/|\/\*|\\)./, 7,
   "\\", 8,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 143, 9, {"name":"comment","token":"comment"},
   0, -1],
  [/^[ \t]*/, 11],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [1, 149, -1,
   1, 166, -1,
   3, "keyword", e[0], 13,
   3, "keyword", e[1], 17,
   3, "keyword", e[2], 25,
   3, "keyword", e[3], 29,
   3, "keyword", e[4], 44,
   1, 183, -1,
   2, 196, -1, {"name":"Template"},
   [7, "constructorAhead"], 50,
   3, "keyword", e[5], 53,
   3, "keyword", e[6], 57,
   3, "keyword", e[7], 58,
   3, "keyword", e[8], 59,
   3, "keyword", e[9], 83,
   3, "keyword", e[10], 88,
   2, 205, -1, {"name":"Block"},
   3, "keyword", e[11], 92,
   3, "keyword", e[12], 94,
   3, "keyword", e[13], 98,
   3, "keyword", e[14], 102,
   3, "keyword", e[15], 108,
   3, "keyword", e[16], 109,
   [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 209]], 108,
   3, "meta", e[17], 112,
   2, 210, 116, {"name":"DeclType"},
   ";", -1,
   1, 226, 128],
  [1, 9, 14],
  [2, 231, 15, {"name":"ArgList"}],
  [1, 9, 16],
  [";", -1],
  [1, 9, 18],
  [1, 236, 19,
   0, 19],
  [1, 9, 20],
  [3, "operator", "=", 21,
   2, 243, -1, {"name":"NamespaceBlock"}],
  [1, 9, 22],
  [1, 130, 23],
  [1, 9, 24],
  [";", -1],
  [1, 9, 26],
  [1, 226, 27],
  [1, 9, 28],
  [";", -1],
  [1, 9, 30],
  [2, 205, 31, {"name":"Block"}],
  [1, 9, 32],
  [3, "keyword", e[18], 33,
   0, -1],
  [1, 9, 34],
  ["(", 35],
  [1, 9, 36],
  [1, 247, 37],
  [1, 9, 38],
  [1, 257, 39,
   0, 39],
  [1, 9, 40],
  [")", 41],
  [1, 9, 42],
  [2, 205, 43, {"name":"Block"}],
  [1, 9, 32],
  [1, 9, 45],
  ["{", 46],
  [1, 9, 47],
  [2, 137, 48, {"name":"string","token":"string"}],
  [1, 9, 49],
  ["}", -1],
  [1, 236, 51],
  [1, 9, 52],
  [2, 269, -1, {"name":"FunctionDef"}],
  [1, 9, 54],
  [3, "type def", e[19], 55,
   0, 55],
  [1, 9, 56],
  [2, 302, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 60],
  [1, 9, 61],
  [1, 9, 62],
  ["(", 63],
  [2, 320, 64, {"name":"CondExpr"}],
  [2, 12, 65, {"name":"Statement"}],
  [1, 9, 66],
  [1, 9, 67],
  [1, 9, 68],
  [2, 12, 69, {"name":"Statement"}],
  [2, 12, -1, {"name":"Statement"}],
  [3, "keyword", e[7], 70],
  [1, 9, 71],
  [1, 9, 72],
  [1, 226, 73,
   0, 73],
  [2, 320, 74, {"name":"CondExpr"}],
  [1, 9, 75],
  [1, 9, 76],
  [";", 77],
  [";", -1],
  [1, 9, 78],
  [1, 226, 79,
   0, 79],
  [1, 9, 80],
  [")", 81],
  [1, 9, 82],
  [2, 12, -1, {"name":"Statement"}],
  [1, 9, 84],
  [2, 320, 85, {"name":"CondExpr"}],
  [1, 9, 86],
  [2, 12, 87, {"name":"Statement"}],
  [2, 325, -1, {"name":"Alternative"}],
  [1, 9, 89],
  [2, 320, 90, {"name":"CondExpr"}],
  [1, 9, 91],
  [2, 205, -1, {"name":"Block"}],
  [1, 9, 93],
  [";", -1],
  [1, 9, 95],
  [e[19], 96],
  [1, 9, 97],
  [";", -1],
  [1, 9, 99],
  [1, 226, 100,
   0, 100],
  [1, 9, 101],
  [";", -1],
  [1, 9, 103],
  [1, 236, 104,
   0, 104],
  [1, 9, 105],
  [2, 329, 106, {"name":"BlockOf"},
   0, 106],
  [1, 9, 107],
  [";", -1],
  [1, 9, 110],
  [1, 9, 111],
  [":", -1],
  [1, 226, 108],
  [1, 9, 113],
  [2, 231, 114, {"name":"ArgList"},
   0, 114],
  [1, 9, 115],
  [/^\;?/, -1],
  [1, 9, 117],
  [1, 257, 118],
  [1, 9, 119],
  [[5, 339], 120,
   1, 345, 121,
   0, 121],
  [2, 269, -1, {"name":"FunctionDef"}],
  [1, 9, 122],
  [",", 123,
   ";", -1],
  [1, 9, 124],
  [1, 236, 125],
  [1, 9, 126],
  [1, 345, 127,
   0, 127],
  [1, 9, 122],
  [1, 9, 129],
  [";", -1],
  [0, 131,
   3, "type", e[21], -1,
   3, "variable", e[20], 136,
   2, 348, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [3, "meta", e[37], 132],
  [0, 131,
   3, "variable qualified", e[20], 133,
   3, "type", e[21], -1,
   2, 349, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [2, 350, 134, {"name":"TemplateArgs"}],
  [3, "meta", "::", 135,
   0, -1],
  [1, 130, -1],
  [2, 350, -1, {"name":"TemplateArgs"}],
  [/^R\"(?:(?!\().)*\(/, 138,
   /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 139],
  [[0, [7, "rawStringContinues"], /^[^]/], 138,
   "\"", -1],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 140],
  ["\\", 141,
   [0, /^(?!\")/, /^[^]/], 140,
   "\"", -1],
  [/^[^]/, 140],
  [3, "keyword", e[22], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
  [/^\/\*\*(?!\/)/, 144,
   "/*", 148,
   /^\/\/.*/, -1],
  [0, 145,
   2, 355, 144, {"name":"doccomment.braced"},
   0, 146],
  [e[47], 147],
  [2, 363, 146, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 145,
   0, 144],
  [[0, /^(?!\*\/)/, /^[^]/], 148,
   "*/", -1],
  [3, "keyword", e[23], 151,
   [0, [5, 371], "["], 152],
  [0, 149,
   0, -1],
  [1, 9, 153],
  [1, 9, 154],
  ["(", 155],
  ["[", 156],
  [1, 9, 157],
  [1, 9, 158],
  [3, "number", e[24], 159],
  [1, 375, 160],
  [1, 9, 161],
  [1, 9, 162],
  [")", 163],
  ["]", 164],
  [1, 9, 150],
  [1, 9, 165],
  ["]", 163],
  [3, "keyword", e[25], 167,
   3, "keyword", e[14], 167],
  [1, 9, 168],
  [1, 149, 169,
   0, 169],
  [1, 9, 170],
  [3, "type def", e[19], 171],
  [1, 9, 172],
  [":", 173,
   0, 179],
  [1, 9, 174],
  [3, "keyword", e[26], 175,
   0, 175],
  [1, 9, 176],
  [3, "keyword", e[27], 177,
   0, 177],
  [1, 9, 178],
  [1, 247, 179],
  [1, 9, 180],
  [";", -1,
   2, 397, 181, {"name":"ClassBody"}],
  [1, 9, 182],
  [/^\;?/, -1],
  [3, "keyword", e[28], 184],
  [1, 9, 185],
  [3, "keyword", e[22], 186,
   3, "keyword", e[1], 187,
   0, 187],
  [1, 9, 188],
  [1, 9, 189],
  [1, 247, 190],
  [1, 130, 190],
  [1, 9, 191],
  [3, "operator", "=", 192,
   0, 194],
  [1, 9, 193],
  [1, 247, 194],
  [1, 9, 195],
  [";", -1],
  [3, "keyword", e[29], 197,
   0, 197],
  [1, 9, 198],
  [3, "keyword", e[30], 199],
  [1, 9, 200],
  [2, 401, 201, {"name":"TemplateParams"}],
  [1, 9, 202],
  [1, 9, 203],
  [1, 9, 204],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 206],
  [1, 9, 207],
  [2, 12, 208, {"name":"Statement"},
   "}", -1],
  [1, 9, 207],
  [e[43], 209,
   /^\:(?!\:)/, -1],
  [0, 211,
   0, 212,
   3, "keyword", e[31], 220,
   [5, 406], 221],
  [3, "keyword", e[32], 213,
   3, "keyword", e[33], 213,
   3, "keyword", e[34], 213],
  [3, "type", e[35], 214],
  [1, 9, 215],
  [1, 9, 216],
  [0, 211,
   3, "keyword", e[31], 217,
   1, 413, 217],
  [0, 212,
   3, "type", e[36], 217,
   0, 217],
  [1, 9, 218],
  [1, 419, 219,
   0, -1],
  [1, 9, 218],
  [1, 9, 222],
  [3, "keyword", e[22], 223,
   0, 224],
  [1, 419, 225,
   0, -1],
  [1, 9, 224],
  [3, "meta", e[37], 224,
   3, "type", e[19], 220],
  [1, 9, 222],
  [1, 426, 227,
   1, 443, 228],
  [1, 9, 226],
  [1, 9, 229],
  [1, 474, 230,
   0, -1],
  [1, 9, 229],
  ["(", 232],
  [1, 9, 233],
  [1, 491, 234],
  [1, 9, 235],
  [")", -1],
  [0, 237,
   3, "def", e[38], -1],
  [3, "meta", /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\<)/, 238,
   3, "meta", e[37], 239],
  [1, 9, 240],
  [0, 237,
   3, "qualified def", e[38], -1],
  [2, 350, 241, {"name":"TemplateArgs"}],
  [3, "meta", "::", 242],
  [3, "qualified def", e[38], 239],
  ["{", 244],
  [1, 9, 245],
  [2, 12, 246, {"name":"Statement"},
   "}", -1],
  [1, 9, 245],
  [3, "keyword", e[22], 248,
   0, 250],
  [1, 9, 249],
  [1, 247, -1],
  [3, "keyword", e[32], 251,
   3, "keyword", e[33], 251,
   3, "keyword", e[34], 251,
   3, "keyword", e[14], 252,
   0, 252],
  [1, 9, 250],
  [1, 9, 253],
  [3, "keyword", e[31], 254,
   1, 413, 254],
  [1, 9, 255],
  [1, 419, 256,
   0, -1],
  [1, 9, 255],
  [0, 258,
   "(", 265],
  [e[59], 259,
   1, 236, 260],
  [1, 9, 258],
  [1, 9, 261],
  ["[", 262,
   0, -1],
  [1, 9, 263],
  ["]", 264],
  [1, 9, 261],
  [1, 9, 266],
  [1, 257, 267],
  [1, 9, 268],
  [")", -1],
  [2, 497, 270, {"name":"ParamList"}],
  [1, 9, 271],
  [3, "keyword", e[34], 272,
   /^(?:\&|\&\&)?/, 273],
  [1, 9, 271],
  [1, 9, 274],
  [3, "keyword", e[39], 275,
   3, "keyword", e[2], 276,
   0, 287],
  [1, 9, 277],
  [1, 9, 278],
  ["(", 279,
   0, 287],
  ["(", 280],
  [1, 9, 281],
  [1, 9, 282],
  [1, 226, 283],
  [1, 502, 284],
  [1, 9, 285],
  [1, 9, 286],
  [")", 287],
  [")", 287],
  [1, 9, 288],
  [1, 149, 289,
   0, 289],
  [1, 9, 290],
  ["->", 291,
   0, 293],
  [1, 9, 292],
  [1, 247, 293],
  [1, 9, 294],
  [3, "keyword", e[40], 295,
   2, 508, 296, {"name":"InitializerList"},
   0, 296],
  [1, 9, 294],
  [1, 9, 297],
  [";", -1,
   2, 205, -1, {"name":"Block"},
   3, "operator", "=", 298],
  [1, 9, 299],
  [3, "keyword", e[15], 300,
   3, "keyword", e[41], 300],
  [1, 9, 301],
  [";", -1],
  ["{", 303],
  [1, 9, 304],
  [1, 511, 305,
   0, 318],
  [1, 9, 306],
  [3, "operator", "=", 307,
   0, 308],
  [1, 9, 309],
  [1, 9, 310],
  [1, 226, 308],
  [",", 311,
   0, 318],
  [1, 9, 312],
  [1, 511, 313,
   0, 314],
  [1, 9, 315],
  [1, 9, 310],
  [3, "operator", "=", 316,
   0, 314],
  [1, 9, 317],
  [1, 226, 314],
  [1, 9, 319],
  ["}", -1],
  ["(", 321],
  [1, 9, 322],
  [1, 226, 323,
   0, 323],
  [1, 9, 324],
  [")", -1],
  [1, 9, 326],
  [3, "keyword", e[42], 327,
   0, -1],
  [1, 9, 328],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 330],
  [1, 9, 331],
  [1, 514, 332,
   0, 337],
  [1, 9, 333],
  [";", 334,
   0, 337],
  [1, 9, 335],
  [1, 514, 336,
   0, 336],
  [1, 9, 333],
  [1, 9, 338],
  ["}", -1],
  ["(", 340],
  [1, 9, 341],
  [")", -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "keyword", e[34], -1,
   3, "type", e[35], -1,
   3, "keyword", e[31], -1,
   [5, 406], 342],
  [3, "keyword", e[22], 343,
   0, 344],
  [1, 9, 344],
  [3, "meta", e[37], 344,
   3, "type", e[19], -1],
  [3, "operator", "=", 346,
   2, 525, -1, {"name":"BlockOf"},
   2, 231, -1, {"name":"ArgList"}],
  [1, 9, 347],
  [1, 226, -1],
  [3, "callee", e[58], -1,
   e[19], -1],
  [2, 348, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  ["<", 351],
  [1, 9, 352],
  [1, 535, 353],
  [1, 9, 354],
  [">", -1],
  ["{", 356],
  [3, "tag", e[44], 357,
   3, "tag", e[45], 358,
   2, 565, 362, {"name":"doccomment.type","token":"type"}],
  [e[43], 357,
   "{", 359,
   0, 358],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 358,
   0, 362],
  [2, 565, 360, {"name":"doccomment.type","token":"type"}],
  ["}", 361],
  [e[43], 361,
   3, "def", e[46], 358,
   0, 358],
  ["}", -1],
  [3, "tag", e[44], 364,
   3, "tag", e[45], 368],
  [e[43], 364,
   "{", 365,
   0, 368],
  [2, 565, 366, {"name":"doccomment.type","token":"type"}],
  ["}", 367],
  [e[43], 367,
   3, "def", e[46], 368,
   0, 368],
  [0, 369,
   2, 355, 368, {"name":"doccomment.braced"},
   0, -1],
  [e[47], 370],
  [0, 369,
   0, 368],
  ["[", 372],
  [1, 9, 373],
  [" ", 374,
   "[", -1],
  [1, 9, 373],
  [3, "meta", e[37], 376,
   3, "meta", e[19], 377,
   0, -1],
  [1, 9, 375],
  [1, 9, 378],
  ["(", 379,
   0, 380],
  [1, 9, 381],
  [1, 9, 382],
  [1, 566, 383,
   ")", 380],
  [e[48], 384],
  [1, 9, 381],
  [1, 9, 385],
  [",", 386,
   0, -1],
  [1, 9, 387],
  [3, "meta", e[37], 388,
   3, "meta", e[19], 389],
  [1, 9, 387],
  [1, 9, 390],
  ["(", 391,
   0, 392],
  [1, 9, 393],
  [1, 9, 394],
  [1, 566, 395,
   ")", 392],
  [e[48], 396],
  [1, 9, 393],
  [1, 9, 385],
  ["{", 398],
  [1, 9, 399],
  [2, 576, 400, {"name":"ClassItem"},
   "}", -1],
  [1, 9, 399],
  ["<", 402],
  [1, 9, 403],
  [1, 587, 404],
  [1, 9, 405],
  [">", -1],
  [/^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, 407],
  [3, "keyword", e[22], 408,
   0, 409],
  [1, 9, 409],
  [3, "meta", e[37], 409,
   3, "type", e[19], 410],
  [1, 9, 411],
  [1, 419, 412,
   /^[a-zA-Z¡-￿_]/, -1],
  [1, 9, 411],
  [0, 414,
   3, "keyword", e[22], 417,
   0, 418],
  [3, "type", e[35], 415],
  [0, 414,
   1, 9, 416,
   0, -1],
  [3, "type", e[36], -1],
  [1, 9, 418],
  [3, "meta", e[37], 418,
   3, "type", e[19], -1],
  [2, 350, -1, {"name":"TemplateArgs"},
   3, "meta", "::", 420,
   1, 149, -1,
   "[", 422,
   /^[\*\&]/, -1,
   3, "keyword", e[34], -1],
  [1, 9, 421],
  [1, 247, -1],
  [1, 9, 423],
  [3, "number", e[24], 424,
   0, 424],
  [1, 9, 425],
  ["]", -1],
  [3, "keyword", e[41], 427,
   3, "keyword", e[49], 431,
   2, 142, -1, {"name":"prefixOp","token":"operator"}],
  [1, 9, 428],
  ["[", 429,
   0, -1],
  [1, 9, 430],
  ["]", -1],
  [1, 9, 432],
  ["[", 433,
   0, 434],
  [1, 9, 435],
  [1, 9, 436],
  ["]", 434],
  ["(", 437,
   0, 438],
  [1, 9, 439],
  [1, 9, 440],
  [1, 226, 441],
  [1, 149, -1,
   0, -1],
  [1, 9, 442],
  [")", 438],
  [3, "keyword", e[50], -1,
   [0, [5, 623], "["], 444,
   3, "keyword", e[51], 450,
   2, 627, 462, {"name":"ParenExpr"},
   3, "atom", e[52], -1,
   3, "number", e[24], -1,
   2, 137, -1, {"name":"string","token":"string"},
   2, 525, -1, {"name":"BlockOf"},
   3, "keyword", e[53], 464,
   1, 130, -1],
  [1, 9, 445],
  [1, 632, 446],
  [1, 9, 447],
  ["]", 448],
  [1, 9, 449],
  [2, 269, -1, {"name":"FunctionDef"},
   2, 205, -1, {"name":"Block"}],
  [1, 9, 451],
  ["<", 452],
  [1, 9, 453],
  [1, 247, 454],
  [1, 9, 455],
  [">", 456],
  [1, 9, 457],
  ["(", 458],
  [1, 9, 459],
  [1, 226, 460],
  [1, 9, 461],
  [")", -1],
  [1, 9, 463],
  [1, 226, -1,
   0, -1],
  [1, 9, 465],
  ["(", 466,
   e[48], 467],
  [1, 9, 468],
  [1, 9, 469],
  [1, 247, 470],
  [1, 226, 471],
  [1, 9, 472],
  [1, 9, 473],
  [")", 471],
  [3, "meta", e[17], -1],
  [2, 525, -1, {"name":"BlockOf"},
   2, 231, 475, {"name":"ArgList"},
   2, 231, -1, {"name":"ArgList"},
   "[", 477,
   3, "operator", e[54], -1,
   /^(?:\-\>|\.)/, 481,
   3, "operator", e[55], 483,
   "?", 485],
  [1, 9, 476],
  [2, 205, -1, {"name":"Block"},
   0, -1],
  [1, 9, 478],
  [1, 226, 479],
  [1, 9, 480],
  ["]", -1],
  [1, 9, 482],
  [2, 642, -1, {"name":"fieldName","token":"property"}],
  [1, 9, 484],
  [1, 226, -1],
  [1, 9, 486],
  [1, 226, 487],
  [1, 9, 488],
  [":", 489],
  [1, 9, 490],
  [1, 226, -1],
  [1, 226, 492,
   0, -1],
  [1, 9, 493],
  [",", 494,
   0, -1],
  [1, 9, 495],
  [1, 226, 496],
  [1, 9, 493],
  ["(", 498],
  [1, 9, 499],
  [1, 643, 500],
  [1, 9, 501],
  [")", -1],
  [1, 247, 503,
   0, -1],
  [1, 9, 504],
  [",", 505,
   0, -1],
  [1, 9, 506],
  [1, 247, 507],
  [1, 9, 504],
  [":", 509],
  [1, 9, 510],
  [1, 657, -1],
  [3, "keyword", e[56], 512,
   3, "def property", e[19], -1],
  [3, "operator", "->*", -1,
   ",", -1,
   3, "operator", e[55], -1,
   2, 142, -1, {"name":"prefixOp","token":"operator"},
   /^(?:\(\)|\[\])/, -1,
   3, "keyword", e[49], 513,
   3, "keyword", e[41], 513],
  [/^(?:\[\])?/, -1],
  [1, 247, 515],
  [1, 9, 516],
  [2, 642, 517, {"name":"fieldName","token":"property"},
   0, 517],
  [1, 9, 518],
  [":", 519,
   "[", 520,
   0, -1],
  [1, 9, 521],
  [1, 9, 522],
  [3, "number", e[24], -1],
  [3, "number", e[24], 523,
   0, 523],
  [1, 9, 524],
  ["]", -1],
  ["{", 526],
  [1, 9, 527],
  [1, 226, 528,
   0, 533],
  [1, 9, 529],
  [",", 530,
   0, 533],
  [1, 9, 531],
  [1, 226, 532,
   0, 532],
  [1, 9, 529],
  [1, 9, 534],
  ["}", -1],
  [3, "keyword", e[30], 536,
   0, 537,
   0, 538,
   3, "number", e[24], 539,
   0, -1],
  [1, 9, 540],
  [1, 9, 541],
  [3, "keyword", e[32], 542,
   3, "keyword", e[33], 542,
   1, 247, 543],
  [1, 9, 544],
  [2, 350, 537, {"name":"TemplateArgs"}],
  [3, "keyword", e[25], 545,
   3, "keyword", e[22], 545],
  [1, 9, 538],
  [1, 9, 546],
  [",", 547,
   0, -1],
  [1, 9, 548],
  [e[48], 549],
  [1, 9, 550],
  [1, 247, 539],
  [1, 9, 551],
  [3, "keyword", e[30], 552,
   0, 553,
   0, 554,
   3, "number", e[24], 555],
  [2, 497, 539, {"name":"ParamList"},
   1, 345, 539,
   0, 539],
  [1, 9, 556],
  [1, 9, 557],
  [3, "keyword", e[32], 558,
   3, "keyword", e[33], 558,
   1, 247, 559],
  [1, 9, 544],
  [2, 350, 553, {"name":"TemplateArgs"}],
  [3, "keyword", e[25], 560,
   3, "keyword", e[22], 560],
  [1, 9, 554],
  [1, 9, 561],
  [1, 9, 562],
  [e[48], 563],
  [1, 247, 555],
  [1, 9, 564],
  [2, 497, 555, {"name":"ParamList"},
   1, 345, 555,
   0, 555],
  [1, 663, -1],
  [3, "number", e[24], -1,
   2, 137, -1, {"name":"string","token":"string"},
   e[19], -1,
   3, "operator", e[55], -1,
   ",", -1,
   "(", 567,
   "[", 570,
   "{", 573],
  [1, 9, 568],
  [1, 566, 569,
   ")", -1],
  [1, 9, 568],
  [1, 9, 571],
  [1, 566, 572,
   "]", -1],
  [1, 9, 571],
  [1, 9, 574],
  [1, 566, 575,
   "}", -1],
  [1, 9, 574],
  [3, "keyword", e[27], 577,
   2, 196, -1, {"name":"Template"},
   1, 183, -1,
   3, "keyword", e[0], 579,
   3, "meta", e[17], 583,
   1, 166, -1,
   2, 667, -1, {"name":"ObjectMember"}],
  [1, 9, 578],
  [":", -1],
  [1, 9, 580],
  [2, 231, 581, {"name":"ArgList"}],
  [1, 9, 582],
  [";", -1],
  [1, 9, 584],
  [2, 231, 585, {"name":"ArgList"},
   0, 585],
  [1, 9, 586],
  [/^\;?/, -1],
  [1, 681, 588,
   0, 589,
   0, -1],
  [1, 9, 590],
  [3, "keyword", e[32], 591,
   3, "keyword", e[33], 591,
   1, 247, 592],
  [",", 593,
   0, -1],
  [1, 9, 589],
  [1, 9, 594],
  [1, 9, 595],
  [e[48], 596],
  [1, 681, 597,
   0, 598],
  [1, 9, 599],
  [1, 9, 590],
  [3, "keyword", e[32], 600,
   3, "keyword", e[33], 600,
   1, 247, 601],
  [1, 236, 602],
  [1, 9, 598],
  [1, 9, 603],
  [1, 9, 604],
  [e[48], 605],
  [3, "operator", "=", 606,
   0, 588],
  [1, 9, 607],
  [1, 9, 608],
  [1, 236, 609],
  [1, 426, 610,
   1, 443, 611],
  [1, 9, 612],
  [1, 9, 608],
  [1, 9, 613],
  [3, "operator", "=", 614,
   0, 597],
  [e[57], 615,
   0, 588],
  [1, 9, 616],
  [1, 474, 617],
  [1, 426, 618,
   1, 443, 619],
  [1, 9, 613],
  [1, 9, 616],
  [1, 9, 620],
  [e[57], 621,
   0, 597],
  [1, 474, 622],
  [1, 9, 620],
  ["[", 624],
  [1, 9, 625],
  [e[43], 626,
   /^(?:\&|\=|this|\])/, -1],
  [1, 9, 625],
  ["(", 628],
  [1, 9, 629],
  [1, 226, 630,
   0, 630],
  [1, 9, 631],
  [")", -1],
  ["&", 633,
   "=", 634,
   3, "keyword", e[50], 634,
   0, -1],
  [1, 9, 635],
  [1, 9, 636],
  [1, 130, 634,
   0, 634],
  [",", 637,
   0, -1],
  [1, 9, 638],
  ["&", 639,
   "=", 640,
   3, "keyword", e[50], 640],
  [1, 9, 641],
  [1, 9, 636],
  [1, 130, 640,
   0, 640],
  [3, "callee", e[58], -1,
   e[19], -1],
  [1, 247, 644,
   0, -1],
  [1, 9, 645],
  [1, 257, 646,
   0, 647],
  [1, 9, 648],
  [1, 9, 649],
  [2, 497, 647, {"name":"ParamList"},
   0, 647],
  [",", 650,
   0, -1],
  [1, 9, 651],
  [1, 247, 652],
  [1, 9, 653],
  [1, 257, 654,
   0, 655],
  [1, 9, 656],
  [1, 9, 649],
  [2, 497, 655, {"name":"ParamList"},
   0, 655],
  [1, 692, 658,
   0, -1],
  [1, 9, 659],
  [",", 660,
   0, -1],
  [1, 9, 661],
  [1, 692, 662],
  [1, 9, 659],
  [/^(?!\}|\*\/)/, 664,
   0, -1],
  ["{", 665,
   /^[^]/, 663],
  [1, 663, 666],
  [/^\}?/, 663],
  [3, "keyword", e[32], 668,
   3, "keyword", e[33], 668,
   3, "keyword", e[34], 668,
   3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 671,
   1, 247, 669],
  [1, 9, 667],
  [1, 9, 670],
  [1, 703, 671],
  [1, 9, 672],
  [2, 269, -1, {"name":"FunctionDef"},
   1, 345, 673,
   ":", 674,
   "[", 675,
   0, 673],
  [1, 9, 676],
  [1, 9, 677],
  [1, 9, 678],
  [";", -1],
  [3, "number", e[24], 673],
  [3, "number", e[24], 679,
   0, 679],
  [1, 9, 680],
  ["]", 673],
  [3, "keyword", e[30], 682,
   0, 684],
  [1, 9, 683],
  [2, 350, 684, {"name":"TemplateArgs"}],
  [1, 9, 685],
  [3, "keyword", e[25], 686,
   3, "keyword", e[22], 686],
  [1, 9, 687],
  [3, "type def", e[19], 688],
  [1, 9, 689],
  [3, "operator", "=", 690,
   0, -1],
  [1, 9, 691],
  [1, 130, -1,
   3, "number", e[24], -1],
  [2, 642, 693, {"name":"fieldName","token":"property"}],
  [1, 9, 694],
  ["(", 695,
   "{", 696],
  [1, 9, 697],
  [1, 9, 698],
  [1, 491, 699],
  [1, 491, 700],
  [1, 9, 701],
  [1, 9, 702],
  [")", -1],
  ["}", -1],
  [0, 704,
   "(", 711],
  [e[59], 705,
   1, 511, 706],
  [1, 9, 704],
  [1, 9, 707],
  ["[", 708,
   0, -1],
  [1, 9, 709],
  ["]", 710],
  [1, 9, 707],
  [1, 9, 712],
  [1, 703, 713],
  [1, 9, 714],
  [")", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}
function isLocalType(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
      if (state.context.name != "funcName") { return "def local" }
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var typeRE = /(^|\s)type($|\s)/;

function markTypeLocals(type, scopes, stream, state) {
  if (type == "type def") {
    var scope = getScope(state.context, scopes);
    if (scope) {
      if (!scope.localTypes) { scope.localTypes = []; }
      scope.localTypes.push(stream.current());
    }
  } else if (typeRE.test(type) && !/qualified/.test(type) &&
             isLocalType(state.context, stream.current())) {
    type += " local";
  }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", EnumBody: "}",
  ArrayInitializer: "}", NamespaceBlock: "}",
  ArrayLiteral: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")",
  TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
};

function baseIndent(cx, config) {
  for (var startLine = cx.startLine;; cx = cx.parent) {
    if (cx.name == "CondExpr")
      { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
    if (!cx.parent || cx.parent.startLine != startLine)
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function findIndent(cx, textAfter, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  var closed = textAfter && textAfter.charAt(0) == brack;
  if (brack && config.align !== false && aligned(cx))
    { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

  if (brack && (cx.name == "Block" || cx.name == "NamespaceBlock" || cx.name == "ClassBody" ||
                cx.name == "AnnotationTypeBody" || cx.name == "BlockOf" || cx.name == "EnumBody")) {
    var parent = cx.parent;
    if (parent && parent.name == "Statement" && parent.parent &&
        parent.parent.name == "Statement" && hasSubStatement(parent.parent))
      { parent = parent.parent; }
    var base$1 = statementIndent(parent, config);

    if (closed || cx.name == "NamespaceBlock") { return base$1 }
    if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
    if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
    return base$1 + config.indentUnit
  }

  var base = baseIndent(cx, config.tabSize);
  if (brack) {
    if (closed && brack != ")") { return base }
    return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "EnumConstant" ||
             cx.name == "AnnotationTypeItem") {
    if (hasSubStatement(cx)) { return base + config.indentUnit; }
    return base + 2 * config.indentUnit
  } else if (cx.name == "Alternative") {
    base = baseIndent(cx.parent, config.tabSize);
    if (!textAfter || /^else\b/.test(textAfter)) { return base }
    return base + config.indentUnit
  } else if (cx.name == "ArrowRest") {
    return base + config.indentUnit
  } else if (cx.name == "InitializerList") {
    return base + 2
  } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
    return base + 2 * config.indentUnit
  } else {
    return findIndent(cx.parent, textAfter, config)
  }
}

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr" ||
        cx.name == "EnumConstant" || cx.name == "Template" || cx.name == "AnnotationTypeItem" ||
        cx.parent && bracketed[cx.parent.name])
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

function localConstructorAhead(line, pos, cx) {
  var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
  if (!ahead) { return false }
  while (cx.name != "Statement") { cx = cx.parent; }
  var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
  return className ? className[1] == ahead[1] : false
}

var rawStringOpen = /R"(.*?)\(/g;

function rawStringContinues(line, pos, cx) {
  rawStringOpen.lastIndex = cx.startPos;
  var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
  return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
}

var scopes = ["Block", "FunctionDef"];
var typeScopes = ["Template"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.blockCommentContinue = " * ";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
