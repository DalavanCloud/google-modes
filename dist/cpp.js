(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z0-9_]+(?![a-zA-Z¡-￿_0-9])|[A-Z][A-Z0-9_]+(?![a-zA-Z¡-￿_0-9]))/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^(?:final|explicit)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr|mutable|thread_local)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\-\>|(?!\.\.)\.)/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^(?:\.\.\.)?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?:\(\)|\[\])/, /^(?:\[\])?/, /^(?!\>)/, /^(?:\.\.\.|\(|\=|\>|\,)/, /^(?:\*|\&\&|\&|\.\.\.)/];
  var nodes = [
    [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
     0, 2],
    [/^[^]/, 0],
    [1, 9, 3],
    [2, 12, 4, {"name":"Statement"}],
    [0, 2,
     0, 1],
    [3, "keyword", e[27], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[55], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "type", e[32], -1,
     3, "type", e[33], -1,
     3, "keyword", e[31], -1,
     3, "atom", e[54], -1,
     3, "meta", e[16], -1,
     1, 121, -1,
     3, "number", e[20], -1,
     2, 128, -1, {"name":"string","token":"string"},
     2, 133, -1, {"name":"prefixOp","token":"operator"},
     3, "operator", e[43], -1,
     3, "operator", e[35], -1,
     2, 134, -1, {"name":"comment","token":"comment"},
     3, "keyword", e[1], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[52], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[39], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[50], -1,
     3, "keyword", e[51], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[53], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[23], -1,
     /^[^]/, -1],
    ["#", 7],
    [2, 134, 7, {"name":"comment","token":"comment"},
     "\\", 8,
     /^./, 7,
     0, -1],
    [/^[^]/, 7],
    [/^[ \t]/, 9,
     "\n", 10,
     2, 134, 9, {"name":"comment","token":"comment"},
     0, -1],
    [/^[ \t]*/, 11],
    [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
     0, 9],
    [1, 139, -1,
     1, 156, -1,
     3, "keyword", e[0], 13,
     3, "keyword", e[1], 17,
     3, "keyword", e[2], 25,
     3, "keyword", e[3], 29,
     3, "keyword", e[4], 33,
     1, 171, -1,
     2, 184, -1, {"name":"Template"},
     [7, "constructorAhead"], 39,
     1, 193, -1,
     3, "keyword", e[5], 42,
     3, "keyword", e[6], 43,
     3, "keyword", e[7], 44,
     3, "keyword", e[8], 68,
     3, "keyword", e[9], 73,
     2, 202, -1, {"name":"Block"},
     3, "keyword", e[10], 77,
     3, "keyword", e[11], 79,
     3, "keyword", e[12], 83,
     3, "keyword", e[13], 87,
     3, "keyword", e[14], 93,
     3, "keyword", e[15], 94,
     [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 206]], 93,
     3, "meta", e[16], 97,
     2, 207, 103, {"name":"DeclType"},
     ";", -1,
     1, 224, 119],
    [1, 9, 14],
    [2, 229, 15, {"name":"ArgList"}],
    [1, 9, 16],
    [";", -1],
    [1, 9, 18],
    [1, 234, 19,
     0, 19],
    [1, 9, 20],
    [3, "operator", "=", 21,
     2, 239, -1, {"name":"NamespaceBlock"}],
    [1, 9, 22],
    [1, 121, 23],
    [1, 9, 24],
    [";", -1],
    [1, 9, 26],
    [1, 224, 27],
    [1, 9, 28],
    [";", -1],
    [1, 9, 30],
    [2, 202, 31, {"name":"Block"}],
    [1, 9, 32],
    [2, 243, -1, {"name":"Catch"}],
    [1, 9, 34],
    ["{", 35],
    [1, 9, 36],
    [2, 128, 37, {"name":"string","token":"string"}],
    [1, 9, 38],
    ["}", -1],
    [1, 234, 40],
    [1, 9, 41],
    [2, 255, -1, {"name":"FunctionDef"}],
    [1, 9, 45],
    [1, 9, 46],
    [1, 9, 47],
    ["(", 48],
    [2, 288, 49, {"name":"CondExpr"}],
    [2, 12, 50, {"name":"Statement"}],
    [1, 9, 51],
    [1, 9, 52],
    [1, 9, 53],
    [2, 12, 54, {"name":"Statement"}],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[6], 55],
    [1, 9, 56],
    [1, 9, 57],
    [1, 224, 58,
     0, 58],
    [2, 288, 59, {"name":"CondExpr"}],
    [1, 9, 60],
    [1, 9, 61],
    [";", 62],
    [";", -1],
    [1, 9, 63],
    [1, 224, 64,
     0, 64],
    [1, 9, 65],
    [")", 66],
    [1, 9, 67],
    [2, 12, -1, {"name":"Statement"}],
    [1, 9, 69],
    [2, 288, 70, {"name":"CondExpr"}],
    [1, 9, 71],
    [2, 12, 72, {"name":"Statement"}],
    [2, 293, -1, {"name":"Alternative"}],
    [1, 9, 74],
    [2, 288, 75, {"name":"CondExpr"}],
    [1, 9, 76],
    [2, 202, -1, {"name":"Block"}],
    [1, 9, 78],
    [";", -1],
    [1, 9, 80],
    [e[22], 81],
    [1, 9, 82],
    [";", -1],
    [1, 9, 84],
    [1, 224, 85,
     0, 85],
    [1, 9, 86],
    [";", -1],
    [1, 9, 88],
    [1, 234, 89,
     0, 89],
    [1, 9, 90],
    [2, 297, 91, {"name":"BlockOf"},
     0, 91],
    [1, 9, 92],
    [";", -1],
    [1, 9, 95],
    [1, 9, 96],
    [":", -1],
    [1, 224, 93],
    [1, 9, 98],
    [2, 307, 99, {"name":"ParenTokens"},
     0, 99],
    [1, 9, 100],
    [2, 202, -1, {"name":"Block"},
     0, 101],
    [1, 311, 102,
     0, -1],
    [1, 9, 101],
    [1, 9, 104],
    [1, 334, 105],
    [1, 9, 106],
    [3, "meta", e[16], 107,
     [5, 346], 108,
     1, 350, 109,
     0, 109],
    [1, 9, 110],
    [2, 255, -1, {"name":"FunctionDef"}],
    [1, 9, 111],
    [2, 307, 112, {"name":"ParenTokens"},
     0, 112],
    [",", 113,
     ";", -1],
    [1, 9, 114],
    [1, 9, 115],
    [/^\;?/, -1],
    [1, 234, 116],
    [1, 9, 117],
    [1, 350, 118,
     0, 118],
    [1, 9, 111],
    [1, 9, 120],
    [";", -1],
    [0, 122,
     3, "type", e[17], -1,
     2, 353, 127, {"name":"unqualifiedVariableName","token":"variable"}],
    [1, 354, 123],
    [0, 122,
     3, "type qualified", e[17], 124,
     2, 361, 124, {"name":"qualifiedVariableName","token":"qualified"}],
    [2, 362, 125, {"name":"TemplateArgs"},
     0, -1],
    [/^(?=\:\:)/, 126,
     0, -1],
    [1, 121, -1],
    [2, 362, -1, {"name":"TemplateArgs"},
     0, -1],
    [/^R\"(?:(?!\().)*\(/, 129,
     /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 130],
    [[0, [7, "rawStringContinues"], /^[^]/], 129,
     "\"", -1],
    [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
     "\"", 131],
    ["\\", 132,
     [0, /^(?!\")/, /^[^]/], 131,
     "\"", -1],
    [/^[^]/, 131],
    [3, "keyword", e[18], -1,
     /^(?:\+\+?|\-\-?|\!|\~|\&|\*)/, -1],
    [/^\/\*\*(?!\/)/, 135,
     "/*", 138,
     /^\/\/.*/, -1],
    [e[48], 136,
     0, 137],
    [0, 135,
     0, 135],
    [2, 367, 137, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 138,
     "*/", -1],
    [3, "keyword", e[19], 141,
     [0, [5, 378], "["], 142],
    [0, 139,
     0, -1],
    [1, 9, 143],
    [1, 9, 144],
    ["(", 145],
    ["[", 146],
    [1, 9, 147],
    [1, 9, 148],
    [3, "number", e[20], 149],
    [1, 382, 150],
    [1, 9, 151],
    [1, 9, 152],
    [")", 153],
    ["]", 154],
    [1, 9, 140],
    [1, 9, 155],
    ["]", 153],
    [3, "keyword", e[21], 157,
     3, "keyword", e[13], 157],
    [1, 9, 158],
    [1, 139, 159,
     0, 159],
    [1, 9, 160],
    [0, 161,
     3, "type def", e[22], 164],
    [1, 404, 162],
    [1, 9, 163],
    [0, 161,
     3, "type qualified", e[22], 164],
    [1, 9, 165],
    [3, "keyword", e[23], 166,
     ":", 167,
     0, 169],
    [1, 9, 165],
    [1, 9, 168],
    [1, 411, 169],
    [1, 9, 170],
    [";", -1,
     2, 425, -1, {"name":"ClassBody"}],
    [3, "keyword", e[24], 172],
    [1, 9, 173],
    [3, "keyword", e[18], 174,
     3, "keyword", e[1], 175,
     0, 175],
    [1, 9, 176],
    [1, 9, 177],
    [1, 429, 178],
    [1, 121, 178],
    [1, 9, 179],
    [3, "operator", "=", 180,
     0, 182],
    [1, 9, 181],
    [1, 429, 182],
    [1, 9, 183],
    [";", -1],
    [3, "keyword", e[25], 185,
     0, 185],
    [1, 9, 186],
    [3, "keyword", e[26], 187],
    [1, 9, 188],
    [2, 442, 189, {"name":"TemplateParams"}],
    [1, 9, 190],
    [1, 9, 191],
    [1, 9, 192],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[27], 194],
    [1, 9, 195],
    [3, "keyword", e[21], 196,
     3, "keyword", /^struct(?![a-zA-Z¡-￿_0-9])/, 196,
     0, 196],
    [1, 9, 197],
    [1, 139, 198,
     0, 198],
    [1, 9, 199],
    [3, "type def", e[22], 200,
     0, 200],
    [1, 9, 201],
    [2, 447, -1, {"name":"BlockOf"},
     0, -1],
    ["{", 203],
    [1, 9, 204],
    [2, 12, 205, {"name":"Statement"},
     "}", -1],
    [1, 9, 204],
    [e[45], 206,
     /^\:(?!\:)/, -1],
    [0, 208,
     0, 209,
     3, "keyword", e[28], 220,
     [5, 465], 221],
    [3, "keyword", e[29], 210,
     3, "keyword", e[30], 210,
     3, "keyword", e[31], 210],
    [3, "type", e[32], 211],
    [1, 9, 212],
    [1, 9, 213],
    [0, 208,
     3, "keyword", e[28], 214,
     0, 215,
     1, 470, 214],
    [0, 209,
     3, "type", e[33], 214,
     0, 214],
    [1, 9, 216],
    [3, "type", e[32], 217],
    [1, 475, 218,
     0, -1],
    [0, 215,
     1, 9, 219,
     0, 214],
    [1, 9, 216],
    [3, "type", e[33], 214],
    [1, 9, 222],
    [1, 470, 220],
    [1, 475, 223,
     0, -1],
    [1, 9, 222],
    [1, 482, 225,
     1, 499, 226],
    [1, 9, 224],
    [1, 9, 227],
    [1, 311, 228,
     0, -1],
    [1, 9, 227],
    ["(", 230],
    [1, 9, 231],
    [1, 534, 232],
    [1, 9, 233],
    [")", -1],
    [3, "keyword", e[34], 235,
     0, 237,
     3, "def", e[38], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[35], -1,
     2, 133, -1, {"name":"prefixOp","token":"operator"},
     e[57], -1,
     3, "keyword", e[36], 236,
     3, "keyword", e[37], 236],
    [e[58], -1],
    [1, 544, 238],
    [0, 237,
     3, "qualified def", e[38], -1],
    ["{", 240],
    [1, 9, 241],
    [2, 12, 242, {"name":"Statement"},
     "}", -1],
    [1, 9, 241],
    [3, "keyword", e[39], 244,
     0, -1],
    [1, 9, 245],
    ["(", 246],
    [1, 9, 247],
    [1, 429, 248],
    [1, 9, 249],
    [1, 334, 250,
     0, 250],
    [1, 9, 251],
    [")", 252],
    [1, 9, 253],
    [2, 202, 254, {"name":"Block"}],
    [1, 9, 243],
    [2, 551, 256, {"name":"ParamList"}],
    [1, 9, 257],
    [3, "keyword", e[31], 258,
     /^(?:\&|\&\&)?/, 259],
    [1, 9, 257],
    [1, 9, 260],
    [3, "keyword", e[40], 261,
     3, "keyword", e[2], 262,
     0, 273],
    [1, 9, 263],
    [1, 9, 264],
    ["(", 265,
     0, 273],
    ["(", 266],
    [1, 9, 267],
    [1, 9, 268],
    [1, 224, 269],
    [1, 556, 270],
    [1, 9, 271],
    [1, 9, 272],
    [")", 273],
    [")", 273],
    [1, 9, 274],
    [1, 139, 275,
     0, 275],
    [1, 9, 276],
    ["->", 277,
     0, 279],
    [1, 9, 278],
    [1, 429, 279],
    [1, 9, 280],
    [3, "keyword", e[41], 281,
     2, 562, 282, {"name":"InitializerList"},
     0, 282],
    [1, 9, 280],
    [1, 9, 283],
    [";", -1,
     2, 202, -1, {"name":"Block"},
     3, "operator", "=", 284],
    [1, 9, 285],
    [3, "keyword", e[14], 286,
     3, "keyword", e[37], 286],
    [1, 9, 287],
    [";", -1],
    ["(", 289],
    [1, 9, 290],
    [1, 224, 291,
     0, 291],
    [1, 9, 292],
    [")", -1],
    [1, 9, 294],
    [3, "keyword", e[42], 295,
     0, -1],
    [1, 9, 296],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 298],
    [1, 9, 299],
    [1, 565, 300,
     0, 305],
    [1, 9, 301],
    [";", 302,
     0, 305],
    [1, 9, 303],
    [1, 565, 304,
     0, 304],
    [1, 9, 301],
    [1, 9, 306],
    ["}", -1],
    ["(", 308],
    [1, 9, 309],
    [1, 576, 310,
     ")", -1],
    [1, 9, 309],
    [2, 581, -1, {"name":"BlockOf"},
     2, 229, 312, {"name":"ArgList"},
     e[44], 314,
     2, 229, -1, {"name":"ArgList"},
     "[", 320,
     3, "operator", e[43], -1,
     e[44], 324,
     3, "operator", e[35], 326,
     "?", 328],
    [1, 9, 313],
    [2, 202, -1, {"name":"Block"},
     0, -1],
    [1, 9, 315],
    [/^\*?/, 316],
    [1, 9, 317],
    [2, 591, 318, {"name":"fieldName","token":"property"}],
    [1, 9, 319],
    [2, 362, -1, {"name":"TemplateArgs"},
     0, -1],
    [1, 9, 321],
    [1, 224, 322],
    [1, 9, 323],
    ["]", -1],
    [1, 9, 325],
    [2, 591, -1, {"name":"fieldName","token":"property"}],
    [1, 9, 327],
    [1, 224, -1,
     0, -1],
    [1, 9, 329],
    [1, 224, 330],
    [1, 9, 331],
    [":", 332],
    [1, 9, 333],
    [1, 224, -1],
    [0, 335,
     "(", 342],
    [e[61], 336,
     1, 234, 337],
    [1, 9, 335],
    [1, 9, 338],
    ["[", 339,
     0, -1],
    [1, 9, 340],
    ["]", 341],
    [1, 9, 338],
    [1, 9, 343],
    [1, 334, 344],
    [1, 9, 345],
    [")", -1],
    ["(", 347],
    [1, 9, 348],
    [")", -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "type", e[32], -1,
     3, "keyword", e[28], -1,
     [5, 465], 349],
    [1, 470, -1],
    [3, "operator", "=", 351,
     2, 581, -1, {"name":"BlockOf"},
     2, 229, -1, {"name":"ArgList"}],
    [1, 9, 352],
    [1, 224, -1],
    [3, "callee", e[56], -1,
     e[22], -1],
    ["::", 359,
     [5, 592], 355],
    [3, "variable qualifier", e[22], 356],
    [2, 362, 357, {"name":"TemplateArgs"},
     0, 357],
    [1, 9, 358],
    ["::", 359],
    [1, 9, 360],
    [/^\*?/, -1],
    [2, 353, -1, {"name":"unqualifiedVariableName","token":"variable"}],
    ["<", 363],
    [1, 9, 364],
    [1, 596, 365],
    [1, 9, 366],
    [">", -1],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 368,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 369,
     3, "tag", e[47], 376,
     "{", 370],
    [e[45], 368,
     3, "def", e[46], 376,
     "<", 371,
     0, 376],
    [e[45], 369,
     3, "type", e[46], 376,
     0, 376],
    [3, "tag", e[47], 372],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 373],
    [/^[\t ]*/, 374],
    [">", 376],
    [1, 628, 375],
    ["}", 376],
    [e[48], 377,
     0, -1],
    [0, 376,
     0, 376],
    ["[", 379],
    [1, 9, 380],
    [" ", 381,
     "[", -1],
    [1, 9, 380],
    [1, 632, 383,
     3, "meta", e[22], 384,
     0, -1],
    [1, 9, 382],
    [1, 9, 385],
    ["(", 386,
     0, 387],
    [1, 9, 388],
    [1, 9, 389],
    [1, 639, 390,
     ")", 387],
    [e[49], 391],
    [1, 9, 388],
    [1, 9, 392],
    [",", 393,
     0, -1],
    [1, 9, 394],
    [1, 632, 395,
     3, "meta", e[22], 396],
    [1, 9, 394],
    [1, 9, 397],
    ["(", 398,
     0, 399],
    [1, 9, 400],
    [1, 9, 401],
    [1, 639, 402,
     ")", 399],
    [e[49], 403],
    [1, 9, 400],
    [1, 9, 392],
    ["::", 409,
     [5, 649], 405],
    [3, "type qualifier", e[22], 406],
    [2, 362, 407, {"name":"TemplateArgs"},
     0, 407],
    [1, 9, 408],
    ["::", 409],
    [1, 9, 410],
    [/^\*?/, -1],
    [3, "keyword", e[50], 412,
     0, 412,
     0, -1],
    [1, 9, 413],
    [3, "keyword", e[51], 414,
     0, 414],
    [1, 9, 415],
    [1, 429, 416],
    [1, 9, 417],
    [",", 418,
     0, -1],
    [1, 9, 419],
    [3, "keyword", e[50], 420,
     0, 420],
    [1, 9, 421],
    [3, "keyword", e[51], 422,
     0, 422],
    [1, 9, 423],
    [1, 429, 424],
    [1, 9, 417],
    ["{", 426],
    [1, 9, 427],
    [2, 653, 428, {"name":"ClassItem"},
     "}", -1],
    [1, 9, 427],
    [3, "keyword", e[18], 430,
     0, 432],
    [1, 9, 431],
    [1, 429, -1],
    [3, "keyword", e[29], 433,
     3, "keyword", e[30], 433,
     3, "keyword", e[31], 433,
     3, "keyword", e[13], 434,
     0, 434],
    [1, 9, 432],
    [1, 9, 435],
    [3, "keyword", e[28], 436,
     0, 437,
     1, 470, 436],
    [1, 9, 438],
    [3, "type", e[32], 439],
    [1, 475, 440,
     0, -1],
    [0, 437,
     1, 9, 441,
     0, 436],
    [1, 9, 438],
    [3, "type", e[33], 436],
    ["<", 443],
    [1, 9, 444],
    [1, 668, 445],
    [1, 9, 446],
    [">", -1],
    ["{", 448],
    [1, 9, 449],
    [1, 694, 450,
     0, 463],
    [1, 9, 451],
    [3, "operator", "=", 452,
     0, 453],
    [1, 9, 454],
    [1, 9, 455],
    [1, 224, 453],
    [",", 456,
     0, 463],
    [1, 9, 457],
    [1, 694, 458,
     0, 459],
    [1, 9, 460],
    [1, 9, 455],
    [3, "operator", "=", 461,
     0, 459],
    [1, 9, 462],
    [1, 224, 459],
    [1, 9, 464],
    ["}", -1],
    [/^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, 466],
    [1, 470, 467],
    [1, 9, 468],
    [1, 475, 469,
     /^[a-zA-Z¡-￿_]/, -1],
    [1, 9, 468],
    [3, "keyword", e[18], 471,
     0, 472],
    [1, 9, 472],
    [0, 473,
     3, "type", e[22], -1],
    [1, 404, 474],
    [0, 473,
     3, "type qualified", e[22], -1],
    [2, 362, -1, {"name":"TemplateArgs"},
     "::", 476,
     1, 139, -1,
     "[", 478,
     /^[\*\&]/, -1,
     3, "keyword", e[31], -1],
    [1, 9, 477],
    [3, "type qualified", e[22], -1],
    [1, 9, 479],
    [1, 224, 480,
     0, 480],
    [1, 9, 481],
    ["]", -1],
    [3, "keyword", e[37], 483,
     3, "keyword", e[36], 487,
     2, 133, -1, {"name":"prefixOp","token":"operator"}],
    [1, 9, 484],
    ["[", 485,
     0, -1],
    [1, 9, 486],
    ["]", -1],
    [1, 9, 488],
    ["[", 489,
     0, 490],
    [1, 9, 491],
    [1, 9, 492],
    ["]", 490],
    ["(", 493,
     0, 494],
    [1, 9, 495],
    [1, 9, 496],
    [1, 224, 497],
    [1, 139, -1,
     0, -1],
    [1, 9, 498],
    [")", 494],
    [3, "keyword", e[52], -1,
     "[", 500,
     3, "keyword", e[53], 507,
     2, 697, 519, {"name":"ParenExpr"},
     3, "atom", e[54], -1,
     3, "number", e[20], -1,
     2, 128, -1, {"name":"string","token":"string"},
     2, 581, -1, {"name":"BlockOf"},
     3, "keyword", e[55], 522,
     1, 121, -1],
    [1, 9, 501],
    [/^(?!\[)/, 502],
    [1, 702, 503],
    [1, 9, 504],
    ["]", 505],
    [1, 9, 506],
    [2, 255, -1, {"name":"FunctionDef"},
     2, 202, -1, {"name":"Block"}],
    [1, 9, 508],
    ["<", 509],
    [1, 9, 510],
    [1, 429, 511],
    [1, 9, 512],
    [">", 513],
    [1, 9, 514],
    ["(", 515],
    [1, 9, 516],
    [1, 224, 517],
    [1, 9, 518],
    [")", -1],
    [1, 9, 520],
    [/^(?![\[\(\-\+])/, 521,
     0, -1],
    [1, 224, -1],
    [1, 9, 523],
    ["(", 524,
     e[49], 525],
    [1, 9, 526],
    [1, 9, 527],
    [1, 429, 528],
    [1, 224, 529],
    [1, 9, 530],
    [1, 9, 531],
    [")", 529],
    [3, "meta", e[16], 532],
    [1, 9, 533],
    [2, 307, -1, {"name":"ParenTokens"},
     0, -1],
    [1, 224, 535,
     0, -1],
    [1, 9, 536],
    [e[49], 537],
    [1, 9, 538],
    [",", 539,
     0, -1],
    [1, 9, 540],
    [1, 224, 541],
    [1, 9, 542],
    [e[49], 543],
    [1, 9, 538],
    ["::", 549,
     [5, 712], 545],
    [3, "qualifier def", e[22], 546],
    [2, 362, 547, {"name":"TemplateArgs"},
     0, 547],
    [1, 9, 548],
    ["::", 549],
    [1, 9, 550],
    [/^\*?/, -1],
    ["(", 552],
    [1, 9, 553],
    [1, 716, 554],
    [1, 9, 555],
    [")", -1],
    [1, 429, 557,
     0, -1],
    [1, 9, 558],
    [",", 559,
     0, -1],
    [1, 9, 560],
    [1, 429, 561],
    [1, 9, 558],
    [":", 563],
    [1, 9, 564],
    [1, 730, -1],
    [1, 429, 566],
    [1, 9, 567],
    [2, 591, 568, {"name":"fieldName","token":"property"},
     0, 568],
    [1, 9, 569],
    [":", 570,
     "[", 571,
     0, -1],
    [1, 9, 572],
    [1, 9, 573],
    [3, "number", e[20], -1],
    [1, 224, 574,
     0, 574],
    [1, 9, 575],
    ["]", -1],
    [2, 307, -1, {"name":"ParenTokens"},
     2, 736, -1, {"name":"BracketTokens"},
     2, 740, -1, {"name":"BraceTokens"},
     3, "keyword", /^(?:auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|volatile|do|if|static|while|asm|alignof)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "keyword", /^(?:alignas|asm|bool|catch|class|compl|concept|constexpr|const_cast|decltype|delete|dynamic_cast|explicit|export|friend|import|module|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|reinterpret_cast|requires|static_assert|static_cast|synchronized|template|this|throw|try|typedef|typeid|using|virtual|wchar_t)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "atom", e[54], -1,
     3, "number", e[20], -1,
     2, 128, -1, {"name":"string","token":"string"},
     3, "operator", e[35], -1,
     2, 133, -1, {"name":"prefixOp","token":"operator"},
     0, 577,
     2, 353, -1, {"name":"unqualifiedVariableName","token":"variable"},
     /^(?![\)\]\}])./, -1],
    ["::", 578,
     /^(?=[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*\:\:)/, 579],
    [0, 577,
     2, 361, -1, {"name":"qualifiedVariableName","token":"qualified"}],
    [3, "variable qualifier", e[22], 580],
    ["::", 578],
    ["{", 582],
    [1, 9, 583],
    [1, 224, 584,
     0, 589],
    [1, 9, 585],
    [",", 586,
     0, 589],
    [1, 9, 587],
    [1, 224, 588,
     0, 588],
    [1, 9, 585],
    [1, 9, 590],
    ["}", -1],
    [3, "callee", e[56], -1,
     e[22], -1],
    [3, "variable qualifier", e[22], 593],
    [1, 744, 594,
     0, 594],
    [1, 9, 595],
    ["::", -1],
    [3, "keyword", e[26], 597,
     0, 598,
     0, 599,
     0, -1],
    [1, 9, 600],
    [1, 9, 601],
    [3, "keyword", e[29], 602,
     3, "keyword", e[30], 602,
     [5, 749], 603,
     1, 752, 604],
    [2, 362, 598, {"name":"TemplateArgs"}],
    [3, "keyword", e[21], 605,
     3, "keyword", e[18], 605],
    [1, 9, 599],
    [1, 429, 606],
    [1, 9, 607],
    [1, 9, 608],
    [1, 9, 609],
    [e[49], 610],
    [1, 429, 610],
    [2, 551, 604, {"name":"ParamList"},
     1, 350, 604,
     0, 604],
    [1, 9, 611],
    [",", 612,
     0, -1],
    [1, 9, 613],
    [3, "keyword", e[26], 614,
     0, 615,
     0, 616],
    [1, 9, 617],
    [1, 9, 618],
    [3, "keyword", e[29], 619,
     3, "keyword", e[30], 619,
     [5, 758], 620,
     1, 752, 621],
    [2, 362, 615, {"name":"TemplateArgs"}],
    [3, "keyword", e[21], 622,
     3, "keyword", e[18], 622],
    [1, 9, 616],
    [1, 429, 623],
    [1, 9, 624],
    [1, 9, 625],
    [1, 9, 626],
    [e[49], 627],
    [1, 429, 627],
    [2, 551, 621, {"name":"ParamList"},
     1, 350, 621,
     0, 621],
    [1, 9, 611],
    [3, "attribute", "{", 629,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 628,
     "\n", 630,
     0, -1],
    [1, 628, 631],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 628],
    [/^(?=\*\/)/, 628,
     3, "attribute", "}", 628],
    ["::", 637,
     [5, 761], 633],
    [3, "meta", e[22], 634],
    [2, 362, 635, {"name":"TemplateArgs"},
     0, 635],
    [1, 9, 636],
    ["::", 637],
    [1, 9, 638],
    [/^\*?/, -1],
    [3, "number", e[20], -1,
     2, 128, -1, {"name":"string","token":"string"},
     e[22], -1,
     3, "operator", e[35], -1,
     ",", -1,
     "(", 640,
     "[", 643,
     "{", 646],
    [1, 9, 641],
    [1, 639, 642,
     ")", -1],
    [1, 9, 641],
    [1, 9, 644],
    [1, 639, 645,
     "]", -1],
    [1, 9, 644],
    [1, 9, 647],
    [1, 639, 648,
     "}", -1],
    [1, 9, 647],
    [3, "type qualifier", e[22], 650],
    [1, 744, 651,
     0, 651],
    [1, 9, 652],
    ["::", -1],
    [3, "keyword", e[51], 654,
     2, 184, -1, {"name":"Template"},
     1, 171, -1,
     3, "keyword", e[0], 656,
     1, 193, 660,
     3, "meta", e[16], 662,
     1, 156, 666,
     2, 765, -1, {"name":"ObjectMember"}],
    [1, 9, 655],
    [":", -1],
    [1, 9, 657],
    [2, 229, 658, {"name":"ArgList"}],
    [1, 9, 659],
    [";", -1],
    [1, 9, 661],
    [/^\;?/, -1],
    [1, 9, 663],
    [2, 307, 664, {"name":"ParenTokens"},
     0, 664],
    [1, 9, 665],
    [/^\;?/, -1],
    [1, 9, 667],
    [/^\;?/, -1],
    [1, 788, 669,
     1, 429, 670,
     0, -1],
    [1, 9, 671],
    [1, 9, 672],
    [",", 673,
     0, -1],
    ["...", 674,
     1, 334, 675],
    [1, 9, 676],
    [1, 9, 672],
    [1, 9, 677],
    [1, 788, 678,
     1, 429, 679],
    [2, 551, 680, {"name":"ParamList"},
     0, 680],
    [1, 9, 671],
    [1, 9, 681],
    [1, 9, 682],
    ["...", 683,
     1, 334, 684],
    [3, "keyword", e[29], 685,
     3, "keyword", e[30], 685,
     3, "keyword", e[31], 685,
     3, "operator", "=", 686,
     0, 669],
    [1, 9, 681],
    [1, 9, 687],
    [1, 9, 682],
    [1, 9, 688],
    [2, 551, 689, {"name":"ParamList"},
     0, 689],
    [1, 752, 669],
    [1, 9, 690],
    [3, "keyword", e[29], 691,
     3, "keyword", e[30], 691,
     3, "keyword", e[31], 691,
     3, "operator", "=", 692,
     0, 678],
    [1, 9, 690],
    [1, 9, 693],
    [1, 752, 678],
    [3, "keyword", e[34], 695,
     3, "def property", e[22], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[35], -1,
     2, 133, -1, {"name":"prefixOp","token":"operator"},
     e[57], -1,
     3, "keyword", e[36], 696,
     3, "keyword", e[37], 696],
    [e[58], -1],
    ["(", 698],
    [1, 9, 699],
    [1, 224, 700,
     0, 700],
    [1, 9, 701],
    [")", -1],
    [/^\&?/, 703,
     "=", 704,
     3, "keyword", e[52], 704,
     0, -1],
    [1, 9, 705],
    [1, 9, 706],
    [1, 121, 704,
     0, 704],
    [",", 707,
     0, -1],
    [1, 9, 708],
    [/^\&?/, 709,
     "=", 710,
     3, "keyword", e[52], 710],
    [1, 9, 711],
    [1, 9, 706],
    [1, 121, 710,
     0, 710],
    [3, "qualifier def", e[22], 713],
    [1, 744, 714,
     0, 714],
    [1, 9, 715],
    ["::", -1],
    [1, 429, 717,
     0, -1],
    [1, 9, 718],
    [1, 334, 719,
     0, 720],
    [1, 9, 721],
    [1, 9, 722],
    [2, 551, 720, {"name":"ParamList"},
     0, 720],
    [",", 723,
     0, -1],
    [1, 9, 724],
    [1, 429, 725],
    [1, 9, 726],
    [1, 334, 727,
     0, 728],
    [1, 9, 729],
    [1, 9, 722],
    [2, 551, 728, {"name":"ParamList"},
     0, 728],
    [1, 799, 731,
     0, -1],
    [1, 9, 732],
    [",", 733,
     0, -1],
    [1, 9, 734],
    [1, 799, 735],
    [1, 9, 732],
    ["[", 737],
    [1, 9, 738],
    [1, 576, 739,
     "]", -1],
    [1, 9, 738],
    ["{", 741],
    [1, 9, 742],
    [1, 576, 743,
     "}", -1],
    [1, 9, 742],
    ["<", 745],
    [1, 9, 746],
    [e[59], 747,
     ">", -1],
    [1, 744, 748,
     2, 128, 748, {"name":"string","token":"string"},
     /^[^]/, 748],
    [1, 9, 746],
    [1, 429, 750],
    [1, 9, 751],
    [e[60], -1],
    [1, 482, 753,
     1, 499, 754],
    [1, 9, 752],
    [1, 9, 755],
    [e[59], 756,
     0, -1],
    [1, 311, 757],
    [1, 9, 755],
    [1, 429, 759],
    [1, 9, 760],
    [e[60], -1],
    [3, "meta", e[22], 762],
    [1, 744, 763,
     0, 763],
    [1, 9, 764],
    ["::", -1],
    [3, "keyword", e[29], 766,
     3, "keyword", e[30], 766,
     3, "keyword", e[31], 766,
     3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 774,
     1, 429, 767],
    [1, 9, 765],
    [1, 9, 768],
    [1, 813, 769],
    [1, 9, 770],
    [",", 771,
     0, 774],
    [1, 9, 772],
    [1, 813, 773],
    [1, 9, 770],
    [1, 9, 775],
    [2, 255, -1, {"name":"FunctionDef"},
     1, 350, 776,
     ":", 777,
     "[", 778,
     0, 776,
     3, "meta", e[16], 779],
    [1, 9, 780],
    [1, 9, 781],
    [1, 9, 782],
    [1, 9, 783],
    [";", -1],
    [3, "number", e[20], 776],
    [1, 224, 784,
     0, 784],
    [2, 307, 785, {"name":"ParenTokens"},
     0, 785],
    [1, 9, 786],
    [1, 9, 787],
    ["]", 776],
    [/^\;?/, -1],
    [3, "keyword", e[26], 789,
     0, 791],
    [1, 9, 790],
    [2, 362, 791, {"name":"TemplateArgs"}],
    [1, 9, 792],
    [3, "keyword", e[21], 793,
     3, "keyword", e[18], 793],
    [1, 9, 794],
    [3, "type def", e[22], 795],
    [1, 9, 796],
    [3, "operator", "=", 797,
     0, -1],
    [1, 9, 798],
    [1, 121, -1,
     3, "number", e[20], -1],
    [1, 354, 800,
     2, 591, 801, {"name":"fieldName","token":"property"}],
    [1, 9, 799],
    [1, 9, 802],
    [2, 362, 803, {"name":"TemplateArgs"},
     0, 803],
    [1, 9, 804],
    ["(", 805,
     "{", 806],
    [1, 9, 807],
    [1, 9, 808],
    [1, 825, 809],
    [1, 825, 810],
    [1, 9, 811],
    [1, 9, 812],
    [")", -1],
    ["}", -1],
    [0, 814,
     "(", 821],
    [e[61], 815,
     1, 694, 816],
    [1, 9, 814],
    [1, 9, 817],
    ["[", 818,
     0, -1],
    [1, 9, 819],
    ["]", 820],
    [1, 9, 817],
    [1, 9, 822],
    [1, 813, 823],
    [1, 9, 824],
    [")", -1],
    [1, 224, 826,
     0, -1],
    [1, 9, 827],
    [",", 828,
     0, -1],
    [1, 9, 829],
    [1, 224, 830],
    [1, 9, 827]
  ];
  var start = 0;
  var token = 5;

  var cpp = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", ObjectPattern: "}", EnumBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && brack != ")") { return base }
      return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^(else\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
  }

  function constructorAhead(line, pos) {
    var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
    return match && match[1] == match[2]
  }

  function localConstructorAhead(line, pos, cx) {
    var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
    if (!ahead) { return false }
    while (cx.name != "Statement") { cx = cx.parent; }
    var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
    return className ? className[1] == ahead[1] : false
  }

  var rawStringOpen = /R"(.*?)\(/g;

  function rawStringContinues(line, pos, cx) {
    rawStringOpen.lastIndex = cx.startPos;
    var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
    return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
  }

  var scopes = ["Block", "FunctionDef"], typeScopes = ["Template"];

  var CppMode = (function (superclass) {
    function CppMode(conf) {
      superclass.call(this, cpp, {
        predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
      });
      this.conf = conf;
    }

    if ( superclass ) CppMode.__proto__ = superclass;
    CppMode.prototype = Object.create( superclass && superclass.prototype );
    CppMode.prototype.constructor = CppMode;

    CppMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (textAfter.charAt(0) == "#") { return 0 }
      return indent(state, textAfter, line, this.conf)
    };

    return CppMode;
  }(CodeMirror.GrammarMode));

  CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
  CppMode.prototype.blockCommentStart = "/*";
  CppMode.prototype.blockCommentEnd = "*/";
  CppMode.prototype.blockCommentContinue = " * ";
  CppMode.prototype.lineComment = "//";
  CppMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
