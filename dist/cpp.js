(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z0-9_]+(?![a-zA-Z¡-￿_0-9])|[A-Z]+[A-Z0-9]*_[A-Z0-9_]*(?![a-zA-Z¡-￿_0-9]))/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\-\>|(?!\.\.)\.)/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_])/, /^\@[a-zA-Z¡-￿_]+/, /^[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_]|\{)/, /^[^]/], /^(?:\.\.\.)?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^new(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?!\>)/, /^(?:\.\.\.|\(|\=|\>|\,)/, /^(?:\*|\&\&|\&)/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 12, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[5], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[38], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[7], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[54], -1,
   3, "keyword", e[28], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[30], -1,
   3, "type", e[32], -1,
   3, "type", e[33], -1,
   3, "keyword", e[31], -1,
   3, "atom", e[53], -1,
   3, "meta", e[17], -1,
   1, 138, -1,
   3, "number", e[23], -1,
   2, 145, -1, {"name":"string","token":"string"},
   2, 150, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[39], -1,
   3, "operator", e[41], -1,
   2, 151, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[1], -1,
   3, "keyword", e[21], -1,
   3, "keyword", e[50], -1,
   3, "keyword", e[37], -1,
   3, "keyword", e[51], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[18], -1,
   3, "keyword", e[2], -1,
   3, "keyword", e[35], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[26], -1,
   3, "keyword", e[27], -1,
   3, "keyword", e[24], -1,
   3, "keyword", e[48], -1,
   3, "keyword", e[49], -1,
   3, "keyword", e[55], -1,
   3, "keyword", e[25], -1,
   3, "keyword", e[22], -1,
   3, "keyword", e[0], -1,
   3, "keyword", e[52], -1,
   3, "keyword", e[36], -1,
   /^[^]/, -1],
  ["#", 7],
  [2, 151, 7, {"name":"comment","token":"comment"},
   "\\", 8,
   /^./, 7,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 151, 9, {"name":"comment","token":"comment"},
   0, -1],
  [/^[ \t]*/, 11],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [1, 157, -1,
   1, 174, -1,
   3, "keyword", e[0], 13,
   3, "keyword", e[1], 17,
   3, "keyword", e[2], 25,
   3, "keyword", e[3], 29,
   3, "keyword", e[4], 44,
   1, 185, -1,
   2, 198, -1, {"name":"Template"},
   [7, "constructorAhead"], 50,
   3, "keyword", e[5], 53,
   3, "keyword", e[6], 57,
   3, "keyword", e[7], 58,
   3, "keyword", e[8], 59,
   3, "keyword", e[9], 83,
   3, "keyword", e[10], 88,
   2, 207, -1, {"name":"Block"},
   3, "keyword", e[11], 92,
   3, "keyword", e[12], 94,
   3, "keyword", e[13], 98,
   3, "keyword", e[14], 102,
   3, "keyword", e[15], 108,
   3, "keyword", e[16], 109,
   [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 211]], 108,
   3, "meta", e[17], 112,
   2, 212, 120, {"name":"DeclType"},
   ";", -1,
   1, 229, 136],
  [1, 9, 14],
  [2, 234, 15, {"name":"ArgList"}],
  [1, 9, 16],
  [";", -1],
  [1, 9, 18],
  [1, 239, 19,
   0, 19],
  [1, 9, 20],
  [3, "operator", "=", 21,
   2, 242, -1, {"name":"NamespaceBlock"}],
  [1, 9, 22],
  [1, 138, 23],
  [1, 9, 24],
  [";", -1],
  [1, 9, 26],
  [1, 229, 27],
  [1, 9, 28],
  [";", -1],
  [1, 9, 30],
  [2, 207, 31, {"name":"Block"}],
  [1, 9, 32],
  [3, "keyword", e[18], 33,
   0, -1],
  [1, 9, 34],
  ["(", 35],
  [1, 9, 36],
  [1, 246, 37],
  [1, 9, 38],
  [1, 259, 39,
   0, 39],
  [1, 9, 40],
  [")", 41],
  [1, 9, 42],
  [2, 207, 43, {"name":"Block"}],
  [1, 9, 32],
  [1, 9, 45],
  ["{", 46],
  [1, 9, 47],
  [2, 145, 48, {"name":"string","token":"string"}],
  [1, 9, 49],
  ["}", -1],
  [1, 239, 51],
  [1, 9, 52],
  [2, 271, -1, {"name":"FunctionDef"}],
  [1, 9, 54],
  [3, "type def", e[19], 55,
   0, 55],
  [1, 9, 56],
  [2, 304, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 60],
  [1, 9, 61],
  [1, 9, 62],
  ["(", 63],
  [2, 322, 64, {"name":"CondExpr"}],
  [2, 12, 65, {"name":"Statement"}],
  [1, 9, 66],
  [1, 9, 67],
  [1, 9, 68],
  [2, 12, 69, {"name":"Statement"}],
  [2, 12, -1, {"name":"Statement"}],
  [3, "keyword", e[7], 70],
  [1, 9, 71],
  [1, 9, 72],
  [1, 229, 73,
   0, 73],
  [2, 322, 74, {"name":"CondExpr"}],
  [1, 9, 75],
  [1, 9, 76],
  [";", 77],
  [";", -1],
  [1, 9, 78],
  [1, 229, 79,
   0, 79],
  [1, 9, 80],
  [")", 81],
  [1, 9, 82],
  [2, 12, -1, {"name":"Statement"}],
  [1, 9, 84],
  [2, 322, 85, {"name":"CondExpr"}],
  [1, 9, 86],
  [2, 12, 87, {"name":"Statement"}],
  [2, 327, -1, {"name":"Alternative"}],
  [1, 9, 89],
  [2, 322, 90, {"name":"CondExpr"}],
  [1, 9, 91],
  [2, 207, -1, {"name":"Block"}],
  [1, 9, 93],
  [";", -1],
  [1, 9, 95],
  [e[19], 96],
  [1, 9, 97],
  [";", -1],
  [1, 9, 99],
  [1, 229, 100,
   0, 100],
  [1, 9, 101],
  [";", -1],
  [1, 9, 103],
  [1, 239, 104,
   0, 104],
  [1, 9, 105],
  [2, 331, 106, {"name":"BlockOf"},
   0, 106],
  [1, 9, 107],
  [";", -1],
  [1, 9, 110],
  [1, 9, 111],
  [":", -1],
  [1, 229, 108],
  [1, 9, 113],
  [2, 341, 114, {"name":"ParenTokens"},
   0, 114],
  [1, 9, 115],
  [2, 207, 116, {"name":"Block"},
   0, 117,
   0, 116],
  [1, 9, 118],
  [1, 345, 119,
   0, 116],
  [/^\;?/, -1],
  [1, 9, 117],
  [1, 9, 121],
  [1, 259, 122],
  [1, 9, 123],
  [3, "meta", e[17], 124,
   [5, 366], 125,
   1, 370, 126,
   0, 126],
  [1, 9, 127],
  [2, 271, -1, {"name":"FunctionDef"}],
  [1, 9, 128],
  [2, 341, 129, {"name":"ParenTokens"},
   0, 129],
  [",", 130,
   ";", -1],
  [1, 9, 131],
  [1, 9, 132],
  [/^\;?/, -1],
  [1, 239, 133],
  [1, 9, 134],
  [1, 370, 135,
   0, 135],
  [1, 9, 128],
  [1, 9, 137],
  [";", -1],
  [0, 139,
   3, "type", e[20], -1,
   2, 373, 144, {"name":"unqualifiedVariableName","token":"variable"}],
  [1, 374, 140],
  [0, 139,
   3, "type qualified", e[20], 141,
   2, 379, 141, {"name":"qualifiedVariableName","token":"qualified"}],
  [2, 380, 142, {"name":"TemplateArgs"},
   0, -1],
  [/^(?=\:\:)/, 143,
   0, -1],
  [1, 138, -1],
  [2, 380, -1, {"name":"TemplateArgs"},
   0, -1],
  [/^R\"(?:(?!\().)*\(/, 146,
   /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 147],
  [[0, [7, "rawStringContinues"], /^[^]/], 146,
   "\"", -1],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 148],
  ["\\", 149,
   [0, /^(?!\")/, /^[^]/], 148,
   "\"", -1],
  [/^[^]/, 148],
  [3, "keyword", e[21], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
  [/^\/\*\*(?!\/)/, 152,
   "/*", 156,
   /^\/\/.*/, -1],
  [0, 153,
   2, 385, 152, {"name":"doccomment.braced"},
   0, 154],
  [e[46], 155],
  [2, 393, 154, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 153,
   0, 152],
  [[0, /^(?!\*\/)/, /^[^]/], 156,
   "*/", -1],
  [3, "keyword", e[22], 159,
   [0, [5, 401], "["], 160],
  [0, 157,
   0, -1],
  [1, 9, 161],
  [1, 9, 162],
  ["(", 163],
  ["[", 164],
  [1, 9, 165],
  [1, 9, 166],
  [3, "number", e[23], 167],
  [1, 405, 168],
  [1, 9, 169],
  [1, 9, 170],
  [")", 171],
  ["]", 172],
  [1, 9, 158],
  [1, 9, 173],
  ["]", 171],
  [3, "keyword", e[24], 175,
   3, "keyword", e[14], 175],
  [1, 9, 176],
  [1, 157, 177,
   0, 177],
  [1, 9, 178],
  [3, "type def", e[19], 179],
  [1, 9, 180],
  [":", 181,
   0, 183],
  [1, 9, 182],
  [1, 427, 183],
  [1, 9, 184],
  [";", -1,
   2, 441, -1, {"name":"ClassBody"}],
  [3, "keyword", e[25], 186],
  [1, 9, 187],
  [3, "keyword", e[21], 188,
   3, "keyword", e[1], 189,
   0, 189],
  [1, 9, 190],
  [1, 9, 191],
  [1, 246, 192],
  [1, 138, 192],
  [1, 9, 193],
  [3, "operator", "=", 194,
   0, 196],
  [1, 9, 195],
  [1, 246, 196],
  [1, 9, 197],
  [";", -1],
  [3, "keyword", e[26], 199,
   0, 199],
  [1, 9, 200],
  [3, "keyword", e[27], 201],
  [1, 9, 202],
  [2, 445, 203, {"name":"TemplateParams"}],
  [1, 9, 204],
  [1, 9, 205],
  [1, 9, 206],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 208],
  [1, 9, 209],
  [2, 12, 210, {"name":"Statement"},
   "}", -1],
  [1, 9, 209],
  [e[42], 211,
   /^\:(?!\:)/, -1],
  [0, 213,
   0, 214,
   3, "keyword", e[28], 225,
   [5, 450], 226],
  [3, "keyword", e[29], 215,
   3, "keyword", e[30], 215,
   3, "keyword", e[31], 215],
  [3, "type", e[32], 216],
  [1, 9, 217],
  [1, 9, 218],
  [0, 213,
   3, "keyword", e[28], 219,
   0, 220,
   1, 455, 219],
  [0, 214,
   3, "type", e[33], 219,
   0, 219],
  [1, 9, 221],
  [3, "type", e[32], 222],
  [1, 460, 223,
   0, -1],
  [0, 220,
   1, 9, 224,
   0, 219],
  [1, 9, 221],
  [3, "type", e[33], 219],
  [1, 9, 227],
  [1, 455, 225],
  [1, 460, 228,
   0, -1],
  [1, 9, 227],
  [1, 467, 230,
   1, 484, 231],
  [1, 9, 229],
  [1, 9, 232],
  [1, 345, 233,
   0, -1],
  [1, 9, 232],
  ["(", 235],
  [1, 9, 236],
  [1, 517, 237],
  [1, 9, 238],
  [")", -1],
  [0, 240,
   3, "def", e[34], -1],
  [1, 523, 241],
  [0, 240,
   3, "qualified def", e[34], -1],
  ["{", 243],
  [1, 9, 244],
  [2, 12, 245, {"name":"Statement"},
   "}", -1],
  [1, 9, 244],
  [3, "keyword", e[21], 247,
   0, 249],
  [1, 9, 248],
  [1, 246, -1],
  [3, "keyword", e[29], 250,
   3, "keyword", e[30], 250,
   3, "keyword", e[31], 250,
   3, "keyword", e[14], 251,
   0, 251],
  [1, 9, 249],
  [1, 9, 252],
  [3, "keyword", e[28], 253,
   0, 254,
   1, 455, 253],
  [1, 9, 255],
  [3, "type", e[32], 256],
  [1, 460, 257,
   0, -1],
  [0, 254,
   1, 9, 258,
   0, 253],
  [1, 9, 255],
  [3, "type", e[33], 253],
  [0, 260,
   "(", 267],
  [e[59], 261,
   1, 239, 262],
  [1, 9, 260],
  [1, 9, 263],
  ["[", 264,
   0, -1],
  [1, 9, 265],
  ["]", 266],
  [1, 9, 263],
  [1, 9, 268],
  [1, 259, 269],
  [1, 9, 270],
  [")", -1],
  [2, 528, 272, {"name":"ParamList"}],
  [1, 9, 273],
  [3, "keyword", e[31], 274,
   /^(?:\&|\&\&)?/, 275],
  [1, 9, 273],
  [1, 9, 276],
  [3, "keyword", e[35], 277,
   3, "keyword", e[2], 278,
   0, 289],
  [1, 9, 279],
  [1, 9, 280],
  ["(", 281,
   0, 289],
  ["(", 282],
  [1, 9, 283],
  [1, 9, 284],
  [1, 229, 285],
  [1, 533, 286],
  [1, 9, 287],
  [1, 9, 288],
  [")", 289],
  [")", 289],
  [1, 9, 290],
  [1, 157, 291,
   0, 291],
  [1, 9, 292],
  ["->", 293,
   0, 295],
  [1, 9, 294],
  [1, 246, 295],
  [1, 9, 296],
  [3, "keyword", e[36], 297,
   2, 539, 298, {"name":"InitializerList"},
   0, 298],
  [1, 9, 296],
  [1, 9, 299],
  [";", -1,
   2, 207, -1, {"name":"Block"},
   3, "operator", "=", 300],
  [1, 9, 301],
  [3, "keyword", e[15], 302,
   3, "keyword", e[37], 302],
  [1, 9, 303],
  [";", -1],
  ["{", 305],
  [1, 9, 306],
  [1, 542, 307,
   0, 320],
  [1, 9, 308],
  [3, "operator", "=", 309,
   0, 310],
  [1, 9, 311],
  [1, 9, 312],
  [1, 229, 310],
  [",", 313,
   0, 320],
  [1, 9, 314],
  [1, 542, 315,
   0, 316],
  [1, 9, 317],
  [1, 9, 312],
  [3, "operator", "=", 318,
   0, 316],
  [1, 9, 319],
  [1, 229, 316],
  [1, 9, 321],
  ["}", -1],
  ["(", 323],
  [1, 9, 324],
  [1, 229, 325,
   0, 325],
  [1, 9, 326],
  [")", -1],
  [1, 9, 328],
  [3, "keyword", e[38], 329,
   0, -1],
  [1, 9, 330],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 332],
  [1, 9, 333],
  [1, 545, 334,
   0, 339],
  [1, 9, 335],
  [";", 336,
   0, 339],
  [1, 9, 337],
  [1, 545, 338,
   0, 338],
  [1, 9, 335],
  [1, 9, 340],
  ["}", -1],
  ["(", 342],
  [1, 9, 343],
  [1, 556, 344,
   ")", -1],
  [1, 9, 343],
  [2, 561, -1, {"name":"BlockOf"},
   2, 234, 346, {"name":"ArgList"},
   e[40], 348,
   2, 234, -1, {"name":"ArgList"},
   "[", 352,
   3, "operator", e[39], -1,
   e[40], 356,
   3, "operator", e[41], 358,
   "?", 360],
  [1, 9, 347],
  [2, 207, -1, {"name":"Block"},
   0, -1],
  [1, 9, 349],
  [2, 571, 350, {"name":"fieldName","token":"property"}],
  [1, 9, 351],
  [2, 380, -1, {"name":"TemplateArgs"},
   0, -1],
  [1, 9, 353],
  [1, 229, 354],
  [1, 9, 355],
  ["]", -1],
  [1, 9, 357],
  [2, 571, -1, {"name":"fieldName","token":"property"}],
  [1, 9, 359],
  [1, 229, -1],
  [1, 9, 361],
  [1, 229, 362],
  [1, 9, 363],
  [":", 364],
  [1, 9, 365],
  [1, 229, -1],
  ["(", 367],
  [1, 9, 368],
  [")", -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[31], -1,
   3, "type", e[32], -1,
   3, "keyword", e[28], -1,
   [5, 450], 369],
  [1, 455, -1],
  [3, "operator", "=", 371,
   2, 561, -1, {"name":"BlockOf"},
   2, 234, -1, {"name":"ArgList"}],
  [1, 9, 372],
  [1, 229, -1],
  [3, "callee", e[56], -1,
   e[19], -1],
  ["::", -1,
   [5, 572], 375],
  [3, "variable qualifier", e[19], 376],
  [2, 380, 377, {"name":"TemplateArgs"},
   0, 377],
  [1, 9, 378],
  ["::", -1],
  [2, 373, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  ["<", 381],
  [1, 9, 382],
  [1, 576, 383],
  [1, 9, 384],
  [">", -1],
  ["{", 386],
  [3, "tag", e[43], 387,
   3, "tag", e[44], 388,
   2, 608, 392, {"name":"doccomment.type","token":"type"}],
  [e[42], 387,
   "{", 389,
   0, 388],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 388,
   0, 392],
  [2, 608, 390, {"name":"doccomment.type","token":"type"}],
  ["}", 391],
  [e[42], 391,
   3, "def", e[45], 388,
   0, 388],
  ["}", -1],
  [3, "tag", e[43], 394,
   3, "tag", e[44], 398],
  [e[42], 394,
   "{", 395,
   0, 398],
  [2, 608, 396, {"name":"doccomment.type","token":"type"}],
  ["}", 397],
  [e[42], 397,
   3, "def", e[45], 398,
   0, 398],
  [0, 399,
   2, 385, 398, {"name":"doccomment.braced"},
   0, -1],
  [e[46], 400],
  [0, 399,
   0, 398],
  ["[", 402],
  [1, 9, 403],
  [" ", 404,
   "[", -1],
  [1, 9, 403],
  [1, 609, 406,
   3, "meta", e[19], 407,
   0, -1],
  [1, 9, 405],
  [1, 9, 408],
  ["(", 409,
   0, 410],
  [1, 9, 411],
  [1, 9, 412],
  [1, 614, 413,
   ")", 410],
  [e[47], 414],
  [1, 9, 411],
  [1, 9, 415],
  [",", 416,
   0, -1],
  [1, 9, 417],
  [1, 609, 418,
   3, "meta", e[19], 419],
  [1, 9, 417],
  [1, 9, 420],
  ["(", 421,
   0, 422],
  [1, 9, 423],
  [1, 9, 424],
  [1, 614, 425,
   ")", 422],
  [e[47], 426],
  [1, 9, 423],
  [1, 9, 415],
  [3, "keyword", e[48], 428,
   0, 428,
   0, -1],
  [1, 9, 429],
  [3, "keyword", e[49], 430,
   0, 430],
  [1, 9, 431],
  [1, 246, 432],
  [1, 9, 433],
  [",", 434,
   0, -1],
  [1, 9, 435],
  [3, "keyword", e[48], 436,
   0, 436],
  [1, 9, 437],
  [3, "keyword", e[49], 438,
   0, 438],
  [1, 9, 439],
  [1, 246, 440],
  [1, 9, 433],
  ["{", 442],
  [1, 9, 443],
  [2, 624, 444, {"name":"ClassItem"},
   "}", -1],
  [1, 9, 443],
  ["<", 446],
  [1, 9, 447],
  [1, 635, 448],
  [1, 9, 449],
  [">", -1],
  [/^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, 451],
  [1, 455, 452],
  [1, 9, 453],
  [1, 460, 454,
   /^[a-zA-Z¡-￿_]/, -1],
  [1, 9, 453],
  [3, "keyword", e[21], 456,
   0, 457],
  [1, 9, 457],
  [0, 458,
   3, "type", e[19], -1],
  [1, 661, 459],
  [0, 458,
   3, "type qualified", e[19], -1],
  [2, 380, -1, {"name":"TemplateArgs"},
   "::", 461,
   1, 157, -1,
   "[", 463,
   /^[\*\&]/, -1,
   3, "keyword", e[31], -1],
  [1, 9, 462],
  [3, "type qualified", e[19], -1],
  [1, 9, 464],
  [3, "number", e[23], 465,
   0, 465],
  [1, 9, 466],
  ["]", -1],
  [3, "keyword", e[37], 468,
   3, "keyword", e[50], 472,
   2, 150, -1, {"name":"prefixOp","token":"operator"}],
  [1, 9, 469],
  ["[", 470,
   0, -1],
  [1, 9, 471],
  ["]", -1],
  [1, 9, 473],
  ["[", 474,
   0, 475],
  [1, 9, 476],
  [1, 9, 477],
  ["]", 475],
  ["(", 478,
   0, 479],
  [1, 9, 480],
  [1, 9, 481],
  [1, 229, 482],
  [1, 157, -1,
   0, -1],
  [1, 9, 483],
  [")", 479],
  [3, "keyword", e[51], -1,
   [0, [5, 666], "["], 485,
   3, "keyword", e[52], 491,
   2, 670, 503, {"name":"ParenExpr"},
   3, "atom", e[53], -1,
   3, "number", e[23], -1,
   2, 145, -1, {"name":"string","token":"string"},
   2, 561, -1, {"name":"BlockOf"},
   3, "keyword", e[54], 505,
   1, 138, -1],
  [1, 9, 486],
  [1, 675, 487],
  [1, 9, 488],
  ["]", 489],
  [1, 9, 490],
  [2, 271, -1, {"name":"FunctionDef"},
   2, 207, -1, {"name":"Block"}],
  [1, 9, 492],
  ["<", 493],
  [1, 9, 494],
  [1, 246, 495],
  [1, 9, 496],
  [">", 497],
  [1, 9, 498],
  ["(", 499],
  [1, 9, 500],
  [1, 229, 501],
  [1, 9, 502],
  [")", -1],
  [1, 9, 504],
  [1, 229, -1,
   0, -1],
  [1, 9, 506],
  ["(", 507,
   e[47], 508],
  [1, 9, 509],
  [1, 9, 510],
  [1, 246, 511],
  [1, 229, 512],
  [1, 9, 513],
  [1, 9, 514],
  [")", 512],
  [3, "meta", e[17], 515],
  [1, 9, 516],
  [2, 341, -1, {"name":"ParenTokens"},
   0, -1],
  [1, 229, 518,
   0, -1],
  [1, 9, 519],
  [",", 520,
   0, -1],
  [1, 9, 521],
  [1, 229, 522],
  [1, 9, 519],
  ["::", -1,
   [5, 685], 524],
  [3, "qualifier def", e[19], 525],
  [2, 380, 526, {"name":"TemplateArgs"},
   0, 526],
  [1, 9, 527],
  ["::", -1],
  ["(", 529],
  [1, 9, 530],
  [1, 689, 531],
  [1, 9, 532],
  [")", -1],
  [1, 246, 534,
   0, -1],
  [1, 9, 535],
  [",", 536,
   0, -1],
  [1, 9, 537],
  [1, 246, 538],
  [1, 9, 535],
  [":", 540],
  [1, 9, 541],
  [1, 703, -1],
  [3, "keyword", e[55], 543,
   3, "def property", e[19], -1],
  [3, "operator", "->*", -1,
   ",", -1,
   3, "operator", e[41], -1,
   2, 150, -1, {"name":"prefixOp","token":"operator"},
   /^(?:\(\)|\[\])/, -1,
   3, "keyword", e[50], 544,
   3, "keyword", e[37], 544],
  [/^(?:\[\])?/, -1],
  [1, 246, 546],
  [1, 9, 547],
  [2, 571, 548, {"name":"fieldName","token":"property"},
   0, 548],
  [1, 9, 549],
  [":", 550,
   "[", 551,
   0, -1],
  [1, 9, 552],
  [1, 9, 553],
  [3, "number", e[23], -1],
  [3, "number", e[23], 554,
   0, 554],
  [1, 9, 555],
  ["]", -1],
  [2, 341, -1, {"name":"ParenTokens"},
   2, 709, -1, {"name":"BracketTokens"},
   2, 713, -1, {"name":"BraceTokens"},
   3, "keyword", /^(?:auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|volatile|do|if|static|while|asm|alignof)(?![a-zA-Z¡-￿_0-9])/, -1,
   3, "keyword", /^(?:alignas|asm|bool|catch|class|compl|concept|constexpr|const_cast|decltype|delete|dynamic_cast|explicit|export|friend|import|module|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|reinterpret_cast|requires|static_assert|static_cast|synchronized|template|this|throw|try|typedef|typeid|using|virtual|wchar_t)(?![a-zA-Z¡-￿_0-9])/, -1,
   3, "atom", e[53], -1,
   3, "number", e[23], -1,
   2, 145, -1, {"name":"string","token":"string"},
   3, "operator", e[41], -1,
   2, 150, -1, {"name":"prefixOp","token":"operator"},
   0, 557,
   2, 373, -1, {"name":"unqualifiedVariableName","token":"variable"},
   /^(?![\)\]\}])./, -1],
  ["::", 558,
   /^(?=[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*\:\:)/, 559],
  [0, 557,
   2, 379, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [3, "variable qualifier", e[19], 560],
  ["::", 558],
  ["{", 562],
  [1, 9, 563],
  [1, 229, 564,
   0, 569],
  [1, 9, 565],
  [",", 566,
   0, 569],
  [1, 9, 567],
  [1, 229, 568,
   0, 568],
  [1, 9, 565],
  [1, 9, 570],
  ["}", -1],
  [3, "callee", e[56], -1,
   e[19], -1],
  [3, "variable qualifier", e[19], 573],
  [1, 717, 574,
   0, 574],
  [1, 9, 575],
  ["::", -1],
  [3, "keyword", e[27], 577,
   0, 578,
   0, 579,
   0, -1],
  [1, 9, 580],
  [1, 9, 581],
  [3, "keyword", e[29], 582,
   3, "keyword", e[30], 582,
   [5, 722], 583,
   1, 725, 584],
  [2, 380, 578, {"name":"TemplateArgs"}],
  [3, "keyword", e[24], 585,
   3, "keyword", e[21], 585],
  [1, 9, 579],
  [1, 246, 586],
  [1, 9, 587],
  [1, 9, 588],
  [1, 9, 589],
  [e[47], 590],
  [1, 246, 590],
  [2, 528, 584, {"name":"ParamList"},
   1, 370, 584,
   0, 584],
  [1, 9, 591],
  [",", 592,
   0, -1],
  [1, 9, 593],
  [3, "keyword", e[27], 594,
   0, 595,
   0, 596],
  [1, 9, 597],
  [1, 9, 598],
  [3, "keyword", e[29], 599,
   3, "keyword", e[30], 599,
   [5, 731], 600,
   1, 725, 601],
  [2, 380, 595, {"name":"TemplateArgs"}],
  [3, "keyword", e[24], 602,
   3, "keyword", e[21], 602],
  [1, 9, 596],
  [1, 246, 603],
  [1, 9, 604],
  [1, 9, 605],
  [1, 9, 606],
  [e[47], 607],
  [1, 246, 607],
  [2, 528, 601, {"name":"ParamList"},
   1, 370, 601,
   0, 601],
  [1, 9, 591],
  [1, 734, -1],
  ["::", -1,
   [5, 738], 610],
  [3, "meta", e[19], 611],
  [2, 380, 612, {"name":"TemplateArgs"},
   0, 612],
  [1, 9, 613],
  ["::", -1],
  [3, "number", e[23], -1,
   2, 145, -1, {"name":"string","token":"string"},
   e[19], -1,
   3, "operator", e[41], -1,
   ",", -1,
   "(", 615,
   "[", 618,
   "{", 621],
  [1, 9, 616],
  [1, 614, 617,
   ")", -1],
  [1, 9, 616],
  [1, 9, 619],
  [1, 614, 620,
   "]", -1],
  [1, 9, 619],
  [1, 9, 622],
  [1, 614, 623,
   "}", -1],
  [1, 9, 622],
  [3, "keyword", e[49], 625,
   2, 198, -1, {"name":"Template"},
   1, 185, -1,
   3, "keyword", e[0], 627,
   3, "meta", e[17], 631,
   1, 174, -1,
   2, 742, -1, {"name":"ObjectMember"}],
  [1, 9, 626],
  [":", -1],
  [1, 9, 628],
  [2, 234, 629, {"name":"ArgList"}],
  [1, 9, 630],
  [";", -1],
  [1, 9, 632],
  [2, 341, 633, {"name":"ParenTokens"},
   0, 633],
  [1, 9, 634],
  [/^\;?/, -1],
  [1, 760, 636,
   0, 637,
   0, -1],
  [1, 9, 638],
  [3, "keyword", e[29], 639,
   3, "keyword", e[30], 639,
   1, 246, 640],
  [",", 641,
   0, -1],
  [1, 9, 637],
  [1, 9, 642],
  [1, 9, 643],
  [e[47], 644],
  [1, 760, 645,
   0, 646],
  [1, 9, 647],
  [1, 9, 638],
  [3, "keyword", e[29], 648,
   3, "keyword", e[30], 648,
   1, 246, 649],
  [1, 239, 650],
  [1, 9, 646],
  [1, 9, 651],
  [1, 9, 652],
  [e[47], 653],
  [3, "operator", "=", 654,
   0, 636],
  [1, 9, 655],
  [1, 9, 656],
  [1, 239, 657],
  [1, 725, 636],
  [1, 9, 658],
  [3, "operator", "=", 659,
   0, 645],
  [1, 9, 660],
  [1, 725, 645],
  ["::", -1,
   [5, 771], 662],
  [3, "type qualifier", e[19], 663],
  [2, 380, 664, {"name":"TemplateArgs"},
   0, 664],
  [1, 9, 665],
  ["::", -1],
  ["[", 667],
  [1, 9, 668],
  [e[42], 669,
   /^[\&\=]/, -1,
   3, "keyword", e[51], -1,
   "]", -1],
  [1, 9, 668],
  ["(", 671],
  [1, 9, 672],
  [1, 229, 673,
   0, 673],
  [1, 9, 674],
  [")", -1],
  ["&", 676,
   "=", 677,
   3, "keyword", e[51], 677,
   0, -1],
  [1, 9, 678],
  [1, 9, 679],
  [1, 138, 677,
   0, 677],
  [",", 680,
   0, -1],
  [1, 9, 681],
  ["&", 682,
   "=", 683,
   3, "keyword", e[51], 683],
  [1, 9, 684],
  [1, 9, 679],
  [1, 138, 683,
   0, 683],
  [3, "qualifier def", e[19], 686],
  [1, 717, 687,
   0, 687],
  [1, 9, 688],
  ["::", -1],
  [1, 246, 690,
   0, -1],
  [1, 9, 691],
  [1, 259, 692,
   0, 693],
  [1, 9, 694],
  [1, 9, 695],
  [2, 528, 693, {"name":"ParamList"},
   0, 693],
  [",", 696,
   0, -1],
  [1, 9, 697],
  [1, 246, 698],
  [1, 9, 699],
  [1, 259, 700,
   0, 701],
  [1, 9, 702],
  [1, 9, 695],
  [2, 528, 701, {"name":"ParamList"},
   0, 701],
  [1, 775, 704,
   0, -1],
  [1, 9, 705],
  [",", 706,
   0, -1],
  [1, 9, 707],
  [1, 775, 708],
  [1, 9, 705],
  ["[", 710],
  [1, 9, 711],
  [1, 556, 712,
   "]", -1],
  [1, 9, 711],
  ["{", 714],
  [1, 9, 715],
  [1, 556, 716,
   "}", -1],
  [1, 9, 715],
  ["<", 718],
  [1, 9, 719],
  [e[57], 720,
   ">", -1],
  [1, 717, 721,
   2, 145, 721, {"name":"string","token":"string"},
   /^[^]/, 721],
  [1, 9, 719],
  [1, 246, 723],
  [1, 9, 724],
  [e[58], -1],
  [1, 467, 726,
   1, 484, 727],
  [1, 9, 725],
  [1, 9, 728],
  [e[57], 729,
   0, -1],
  [1, 345, 730],
  [1, 9, 728],
  [1, 246, 732],
  [1, 9, 733],
  [e[58], -1],
  [/^(?!\}|\*\/)/, 735,
   0, -1],
  ["{", 736,
   /^[^]/, 734],
  [1, 734, 737],
  [/^\}?/, 734],
  [3, "meta", e[19], 739],
  [1, 717, 740,
   0, 740],
  [1, 9, 741],
  ["::", -1],
  [3, "keyword", e[29], 743,
   3, "keyword", e[30], 743,
   3, "keyword", e[31], 743,
   3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 746,
   1, 246, 744],
  [1, 9, 742],
  [1, 9, 745],
  [1, 786, 746],
  [1, 9, 747],
  [2, 271, -1, {"name":"FunctionDef"},
   1, 370, 748,
   ":", 749,
   "[", 750,
   0, 748,
   3, "meta", e[17], 751],
  [1, 9, 752],
  [1, 9, 753],
  [1, 9, 754],
  [1, 9, 755],
  [";", -1],
  [3, "number", e[23], 748],
  [3, "number", e[23], 756,
   0, 756],
  [2, 341, 757, {"name":"ParenTokens"},
   0, 757],
  [1, 9, 758],
  [1, 9, 759],
  ["]", 748],
  [/^\;?/, -1],
  [3, "keyword", e[27], 761,
   0, 763],
  [1, 9, 762],
  [2, 380, 763, {"name":"TemplateArgs"}],
  [1, 9, 764],
  [3, "keyword", e[24], 765,
   3, "keyword", e[21], 765],
  [1, 9, 766],
  [3, "type def", e[19], 767],
  [1, 9, 768],
  [3, "operator", "=", 769,
   0, -1],
  [1, 9, 770],
  [1, 138, -1,
   3, "number", e[23], -1],
  [3, "type qualifier", e[19], 772],
  [1, 717, 773,
   0, 773],
  [1, 9, 774],
  ["::", -1],
  [2, 571, 776, {"name":"fieldName","token":"property"}],
  [1, 9, 777],
  ["(", 778,
   "{", 779],
  [1, 9, 780],
  [1, 9, 781],
  [1, 517, 782],
  [1, 517, 783],
  [1, 9, 784],
  [1, 9, 785],
  [")", -1],
  ["}", -1],
  [0, 787,
   "(", 794],
  [e[59], 788,
   1, 542, 789],
  [1, 9, 787],
  [1, 9, 790],
  ["[", 791,
   0, -1],
  [1, 9, 792],
  ["]", 793],
  [1, 9, 790],
  [1, 9, 795],
  [1, 786, 796],
  [1, 9, 797],
  [")", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}
function isLocalType(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
      if (state.context.name != "funcName") { return "def local" }
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var typeRE = /(^|\s)type($|\s)/;

function markTypeLocals(type, scopes, stream, state) {
  if (type == "type def") {
    var scope = getScope(state.context, scopes);
    if (scope) {
      if (!scope.localTypes) { scope.localTypes = []; }
      scope.localTypes.push(stream.current());
    }
  } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
             isLocalType(state.context, stream.current())) {
    type += " local";
  }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", EnumBody: "}",
  ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
  ArrayLiteral: "]", BracketTokens: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
  TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
};

function baseIndent(cx, config) {
  for (var startLine = cx.startLine;; cx = cx.parent) {
    if (cx.name == "CondExpr")
      { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
    if (!cx.parent || cx.parent.startLine != startLine)
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function findIndent(cx, textAfter, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  var closed = textAfter && textAfter.charAt(0) == brack;
  if (brack && config.align !== false && aligned(cx))
    { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

  if (brack && (cx.name == "Block" || cx.name == "NamespaceBlock" || cx.name == "ClassBody" ||
                cx.name == "AnnotationTypeBody" || cx.name == "BlockOf" || cx.name == "EnumBody")) {
    var parent = cx.parent;
    if (parent && parent.name == "Statement" && parent.parent &&
        parent.parent.name == "Statement" && hasSubStatement(parent.parent))
      { parent = parent.parent; }
    var base$1 = statementIndent(parent, config);

    if (closed || cx.name == "NamespaceBlock") { return base$1 }
    if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
    if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
    return base$1 + config.indentUnit
  }

  var base = baseIndent(cx, config.tabSize);
  if (brack) {
    if (closed && brack != ")") { return base }
    return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "EnumConstant" ||
             cx.name == "AnnotationTypeItem") {
    if (hasSubStatement(cx)) { return base + config.indentUnit; }
    return base + 2 * config.indentUnit
  } else if (cx.name == "Alternative") {
    base = baseIndent(cx.parent, config.tabSize);
    if (!textAfter || /^else\b/.test(textAfter)) { return base }
    return base + config.indentUnit
  } else if (cx.name == "ArrowRest") {
    return base + config.indentUnit
  } else if (cx.name == "InitializerList") {
    return base + 2
  } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
    return base + 2 * config.indentUnit
  } else {
    return findIndent(cx.parent, textAfter, config)
  }
}

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr" ||
        cx.name == "EnumConstant" || cx.name == "Template" || cx.name == "AnnotationTypeItem" ||
        cx.parent && bracketed[cx.parent.name])
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

function localConstructorAhead(line, pos, cx) {
  var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
  if (!ahead) { return false }
  while (cx.name != "Statement") { cx = cx.parent; }
  var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
  return className ? className[1] == ahead[1] : false
}

var rawStringOpen = /R"(.*?)\(/g;

function rawStringContinues(line, pos, cx) {
  rawStringOpen.lastIndex = cx.startPos;
  var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
  return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
}

var scopes = ["Block", "FunctionDef"];
var typeScopes = ["Template"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.blockCommentContinue = " * ";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
