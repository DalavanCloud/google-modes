(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z_]+|[A-Z]+_[A-Z_]*)/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\<)/, /^(?:\:\:|[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]* *\:\:)/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^else(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_])/, /^\@[a-zA-Z¡-￿_]+/, /^[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_]|\{)/, /^[^]/], /^(?:\.\.\.)?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 493]], /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?!\>)/, /^(?:\*|\&\&|\&)/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 12, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[4], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[43], -1,
   3, "keyword", e[5], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[7], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[54], -1,
   3, "keyword", e[35], -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[32], -1,
   3, "type", e[34], -1,
   3, "type", e[36], -1,
   3, "keyword", e[33], -1,
   3, "atom", e[53], -1,
   3, "meta", e[16], -1,
   1, 126, -1,
   3, "number", e[24], -1,
   2, 131, -1, {"name":"string","token":"string"},
   2, 136, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[41], -1,
   3, "operator", e[42], -1,
   2, 137, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[0], -1,
   3, "keyword", e[22], -1,
   3, "keyword", e[50], -1,
   3, "keyword", e[40], -1,
   3, "keyword", e[51], -1,
   3, "keyword", e[2], -1,
   3, "keyword", e[17], -1,
   3, "keyword", e[1], -1,
   3, "keyword", e[38], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[25], -1,
   3, "keyword", e[26], -1,
   3, "keyword", e[27], -1,
   3, "keyword", e[58], -1,
   3, "keyword", e[28], -1,
   3, "keyword", e[23], -1,
   3, "keyword", e[52], -1,
   3, "keyword", e[39], -1,
   /^[^]/, -1],
  ["#", 7],
  [/^(?!\/\/|\/\*|\\)./, 7,
   "\\", 8,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 137, 9, {"name":"comment","token":"comment"},
   0, -1],
  [/^[ \t]*/, 11],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [1, 143, -1,
   1, 160, -1,
   3, "keyword", e[0], 13,
   3, "keyword", e[1], 21,
   3, "keyword", e[2], 25,
   3, "keyword", e[3], 40,
   1, 175, -1,
   2, 188, -1, {"name":"Template"},
   [7, "constructorAhead"], 46,
   0, 49,
   3, "keyword", e[4], 59,
   3, "keyword", e[5], 63,
   3, "keyword", e[6], 64,
   3, "keyword", e[7], 65,
   3, "keyword", e[8], 89,
   3, "keyword", e[9], 94,
   2, 197, -1, {"name":"Block"},
   3, "keyword", e[10], 98,
   3, "keyword", e[11], 100,
   3, "keyword", e[12], 104,
   3, "keyword", e[13], 108,
   3, "keyword", e[14], 114,
   3, "keyword", e[15], 115,
   [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 201]], 114,
   3, "meta", e[16], 118,
   2, 202, 122, {"name":"DeclType"},
   ";", -1,
   1, 212, 124],
  [1, 9, 14],
  [1, 217, 15,
   0, 15],
  [1, 9, 16],
  [3, "operator", "=", 17,
   2, 224, -1, {"name":"NamespaceBlock"}],
  [1, 9, 18],
  [1, 126, 19],
  [1, 9, 20],
  [";", -1],
  [1, 9, 22],
  [1, 212, 23],
  [1, 9, 24],
  [";", -1],
  [1, 9, 26],
  [2, 197, 27, {"name":"Block"}],
  [1, 9, 28],
  [3, "keyword", e[17], 29,
   0, -1],
  [1, 9, 30],
  ["(", 31],
  [1, 9, 32],
  [1, 228, 33],
  [1, 9, 34],
  [1, 238, 35,
   0, 35],
  [1, 9, 36],
  [")", 37],
  [1, 9, 38],
  [2, 197, 39, {"name":"Block"}],
  [1, 9, 28],
  [1, 9, 41],
  ["{", 42],
  [1, 9, 43],
  [2, 131, 44, {"name":"string","token":"string"}],
  [1, 9, 45],
  ["}", -1],
  [1, 217, 47],
  [1, 9, 48],
  [2, 250, -1, {"name":"FunctionDef"}],
  [3, "meta", e[20], 50],
  [1, 9, 51],
  [0, 49,
   1, 283, 52,
   3, "variable qualified", e[19], 53,
   2, 290, 54, {"name":"qualifiedVariableName","token":"qualified"}],
  [1, 9, 55],
  [1, 9, 56],
  [1, 9, 57],
  [1, 291, -1],
  [2, 302, 54, {"name":"TemplateArgs"}],
  [1, 307, 58,
   ";", -1],
  [1, 9, 57],
  [1, 9, 60],
  [3, "type def", e[18], 61,
   0, 61],
  [1, 9, 62],
  [2, 324, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 66],
  [1, 9, 67],
  [1, 9, 68],
  ["(", 69],
  [2, 342, 70, {"name":"CondExpr"}],
  [2, 12, 71, {"name":"Statement"}],
  [1, 9, 72],
  [1, 9, 73],
  [1, 9, 74],
  [2, 12, 75, {"name":"Statement"}],
  [2, 12, -1, {"name":"Statement"}],
  [3, "keyword", e[6], 76],
  [1, 9, 77],
  [1, 9, 78],
  [1, 212, 79,
   0, 79],
  [2, 342, 80, {"name":"CondExpr"}],
  [1, 9, 81],
  [1, 9, 82],
  [";", 83],
  [";", -1],
  [1, 9, 84],
  [1, 212, 85,
   0, 85],
  [1, 9, 86],
  [")", 87],
  [1, 9, 88],
  [2, 12, -1, {"name":"Statement"}],
  [1, 9, 90],
  [2, 342, 91, {"name":"CondExpr"}],
  [1, 9, 92],
  [2, 12, 93, {"name":"Statement"}],
  [2, 347, -1, {"name":"Alternative"}],
  [1, 9, 95],
  [2, 342, 96, {"name":"CondExpr"}],
  [1, 9, 97],
  [2, 197, -1, {"name":"Block"}],
  [1, 9, 99],
  [";", -1],
  [1, 9, 101],
  [e[18], 102],
  [1, 9, 103],
  [";", -1],
  [1, 9, 105],
  [1, 212, 106,
   0, 106],
  [1, 9, 107],
  [";", -1],
  [1, 9, 109],
  [1, 217, 110,
   0, 110],
  [1, 9, 111],
  [2, 351, 112, {"name":"BlockOf"},
   0, 112],
  [1, 9, 113],
  [";", -1],
  [1, 9, 116],
  [1, 9, 117],
  [":", -1],
  [1, 212, 114],
  [1, 9, 119],
  [2, 361, 120, {"name":"ArgList"},
   0, 120],
  [1, 9, 121],
  [/^\;?/, -1],
  [1, 9, 123],
  [1, 291, -1],
  [1, 9, 125],
  [";", -1],
  [0, 127,
   3, "type", e[21], -1,
   3, "variable", e[19], 130,
   2, 366, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [3, "meta", e[20], 128],
  [0, 127,
   3, "variable qualified", e[19], 129,
   3, "type", e[21], -1,
   2, 290, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [2, 302, -1, {"name":"TemplateArgs"}],
  [2, 302, -1, {"name":"TemplateArgs"}],
  [/^R\"(?:(?!\().)*\(/, 132,
   /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 133],
  [[0, [7, "rawStringContinues"], /^[^]/], 132,
   "\"", -1],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 134],
  ["\\", 135,
   [0, /^(?!\")/, /^[^]/], 134,
   "\"", -1],
  [/^[^]/, 134],
  [3, "keyword", e[22], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
  [/^\/\*\*(?!\/)/, 138,
   "/*", 142,
   /^\/\/.*/, -1],
  [0, 139,
   2, 367, 138, {"name":"doccomment.braced"},
   0, 140],
  [e[48], 141],
  [2, 375, 140, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 139,
   0, 138],
  [[0, /^(?!\*\/)/, /^[^]/], 142,
   "*/", -1],
  [3, "keyword", e[23], 145,
   [0, [5, 383], "["], 146],
  [0, 143,
   0, -1],
  [1, 9, 147],
  [1, 9, 148],
  ["(", 149],
  ["[", 150],
  [1, 9, 151],
  [1, 9, 152],
  [3, "number", e[24], 153],
  [1, 387, 154],
  [1, 9, 155],
  [1, 9, 156],
  [")", 157],
  ["]", 158],
  [1, 9, 144],
  [1, 9, 159],
  ["]", 157],
  [3, "keyword", e[25], 161,
   3, "keyword", e[13], 161],
  [1, 9, 162],
  [1, 143, 163,
   0, 163],
  [1, 9, 164],
  [3, "type def", e[18], 165],
  [1, 9, 166],
  [":", 167,
   0, 173],
  [1, 9, 168],
  [3, "keyword", e[26], 169,
   0, 169],
  [1, 9, 170],
  [3, "keyword", e[27], 171,
   0, 171],
  [1, 9, 172],
  [1, 228, 173],
  [1, 9, 174],
  [";", -1,
   2, 409, -1, {"name":"ClassBody"}],
  [3, "keyword", e[28], 176],
  [1, 9, 177],
  [3, "keyword", e[22], 178,
   3, "keyword", e[0], 179,
   0, 179],
  [1, 9, 180],
  [1, 9, 181],
  [1, 228, 182],
  [1, 126, 182],
  [1, 9, 183],
  [3, "operator", "=", 184,
   0, 186],
  [1, 9, 185],
  [1, 228, 186],
  [1, 9, 187],
  [";", -1],
  [3, "keyword", e[29], 189,
   0, 189],
  [1, 9, 190],
  [3, "keyword", e[30], 191],
  [1, 9, 192],
  [2, 413, 193, {"name":"TemplateParams"}],
  [1, 9, 194],
  [1, 9, 195],
  [1, 9, 196],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 198],
  [1, 9, 199],
  [2, 12, 200, {"name":"Statement"},
   "}", -1],
  [1, 9, 199],
  [e[44], 201,
   /^\:(?!\:)/, -1],
  [0, 203,
   0, 204,
   1, 283, -1],
  [3, "keyword", e[31], 205,
   3, "keyword", e[32], 205,
   3, "keyword", e[33], 205],
  [3, "type", e[34], 206],
  [1, 9, 207],
  [1, 9, 208],
  [0, 203,
   3, "keyword", e[35], 209,
   1, 418, 209],
  [0, 204,
   3, "type", e[36], 209,
   0, 209],
  [1, 9, 210],
  [1, 424, 211,
   0, -1],
  [1, 9, 210],
  [1, 431, 213,
   1, 448, 214],
  [1, 9, 212],
  [1, 9, 215],
  [1, 307, 216,
   0, -1],
  [1, 9, 215],
  [0, 218,
   3, "def", e[37], -1],
  [3, "meta", /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\<)/, 219,
   3, "meta", e[20], 220],
  [1, 9, 221],
  [0, 218,
   3, "qualified def", e[37], -1],
  [2, 302, 222, {"name":"TemplateArgs"}],
  [3, "meta", "::", 223],
  [3, "qualified def", e[37], 220],
  ["{", 225],
  [1, 9, 226],
  [2, 12, 227, {"name":"Statement"},
   "}", -1],
  [1, 9, 226],
  [3, "keyword", e[22], 229,
   0, 231],
  [1, 9, 230],
  [1, 228, -1],
  [3, "keyword", e[31], 232,
   3, "keyword", e[32], 232,
   3, "keyword", e[33], 232,
   3, "keyword", e[13], 233,
   0, 233],
  [1, 9, 231],
  [1, 9, 234],
  [3, "keyword", e[35], 235,
   1, 418, 235],
  [1, 9, 236],
  [1, 424, 237,
   0, -1],
  [1, 9, 236],
  [0, 239,
   "(", 246],
  [e[60], 240,
   1, 217, 241],
  [1, 9, 239],
  [1, 9, 242],
  ["[", 243,
   0, -1],
  [1, 9, 244],
  ["]", 245],
  [1, 9, 242],
  [1, 9, 247],
  [1, 238, 248],
  [1, 9, 249],
  [")", -1],
  [2, 479, 251, {"name":"ParamList"}],
  [1, 9, 252],
  [3, "keyword", e[33], 253,
   /^(?:\&|\&\&)?/, 254],
  [1, 9, 252],
  [1, 9, 255],
  [3, "keyword", e[38], 256,
   3, "keyword", e[1], 257,
   0, 268],
  [1, 9, 258],
  [1, 9, 259],
  ["(", 260,
   0, 268],
  ["(", 261],
  [1, 9, 262],
  [1, 9, 263],
  [1, 212, 264],
  [1, 484, 265],
  [1, 9, 266],
  [1, 9, 267],
  [")", 268],
  [")", 268],
  [1, 9, 269],
  [1, 143, 270,
   0, 270],
  [1, 9, 271],
  ["->", 272,
   0, 274],
  [1, 9, 273],
  [1, 228, 274],
  [1, 9, 275],
  [3, "keyword", e[39], 276,
   2, 490, 277, {"name":"InitializerList"},
   0, 277],
  [1, 9, 275],
  [1, 9, 278],
  [";", -1,
   2, 197, -1, {"name":"Block"},
   3, "operator", "=", 279],
  [1, 9, 280],
  [3, "keyword", e[14], 281,
   3, "keyword", e[40], 281],
  [1, 9, 282],
  [";", -1],
  [3, "keyword", e[35], 287,
   3, "keyword", e[22], 284,
   e[55], 285],
  [1, 9, 286],
  [3, "meta", e[20], 285,
   3, "type", e[56], 287],
  [3, "meta", e[20], 286,
   3, "type", e[18], 287],
  [1, 9, 288],
  [1, 424, 289,
   0, -1],
  [1, 9, 288],
  [2, 366, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [1, 238, 292],
  [1, 9, 293],
  [[5, 496], 294,
   1, 502, 295,
   0, 295],
  [2, 250, -1, {"name":"FunctionDef"}],
  [1, 9, 296],
  [",", 297,
   ";", -1],
  [1, 9, 298],
  [1, 217, 299],
  [1, 9, 300],
  [1, 502, 301,
   0, 301],
  [1, 9, 296],
  ["<", 303],
  [1, 9, 304],
  [1, 505, 305],
  [1, 9, 306],
  [">", -1],
  [2, 535, -1, {"name":"BlockOf"},
   2, 361, 308, {"name":"ArgList"},
   2, 361, -1, {"name":"ArgList"},
   "[", 310,
   3, "operator", e[41], -1,
   /^(?:\-\>|\.)/, 314,
   3, "operator", e[42], 316,
   "?", 318],
  [1, 9, 309],
  [2, 197, -1, {"name":"Block"},
   0, -1],
  [1, 9, 311],
  [1, 212, 312],
  [1, 9, 313],
  ["]", -1],
  [1, 9, 315],
  [2, 545, -1, {"name":"fieldName","token":"property"}],
  [1, 9, 317],
  [1, 212, -1],
  [1, 9, 319],
  [1, 212, 320],
  [1, 9, 321],
  [":", 322],
  [1, 9, 323],
  [1, 212, -1],
  ["{", 325],
  [1, 9, 326],
  [1, 546, 327,
   0, 340],
  [1, 9, 328],
  [3, "operator", "=", 329,
   0, 330],
  [1, 9, 331],
  [1, 9, 332],
  [1, 212, 330],
  [",", 333,
   0, 340],
  [1, 9, 334],
  [1, 546, 335,
   0, 336],
  [1, 9, 337],
  [1, 9, 332],
  [3, "operator", "=", 338,
   0, 336],
  [1, 9, 339],
  [1, 212, 336],
  [1, 9, 341],
  ["}", -1],
  ["(", 343],
  [1, 9, 344],
  [1, 212, 345,
   0, 345],
  [1, 9, 346],
  [")", -1],
  [1, 9, 348],
  [3, "keyword", e[43], 349,
   0, -1],
  [1, 9, 350],
  [2, 12, -1, {"name":"Statement"}],
  ["{", 352],
  [1, 9, 353],
  [1, 549, 354,
   0, 359],
  [1, 9, 355],
  [";", 356,
   0, 359],
  [1, 9, 357],
  [1, 549, 358,
   0, 358],
  [1, 9, 355],
  [1, 9, 360],
  ["}", -1],
  ["(", 362],
  [1, 9, 363],
  [1, 560, 364],
  [1, 9, 365],
  [")", -1],
  [3, "callee", e[57], -1,
   e[18], -1],
  ["{", 368],
  [3, "tag", e[45], 369,
   3, "tag", e[46], 370,
   2, 566, 374, {"name":"doccomment.type","token":"type"}],
  [e[44], 369,
   "{", 371,
   0, 370],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 370,
   0, 374],
  [2, 566, 372, {"name":"doccomment.type","token":"type"}],
  ["}", 373],
  [e[44], 373,
   3, "def", e[47], 370,
   0, 370],
  ["}", -1],
  [3, "tag", e[45], 376,
   3, "tag", e[46], 380],
  [e[44], 376,
   "{", 377,
   0, 380],
  [2, 566, 378, {"name":"doccomment.type","token":"type"}],
  ["}", 379],
  [e[44], 379,
   3, "def", e[47], 380,
   0, 380],
  [0, 381,
   2, 367, 380, {"name":"doccomment.braced"},
   0, -1],
  [e[48], 382],
  [0, 381,
   0, 380],
  ["[", 384],
  [1, 9, 385],
  [" ", 386,
   "[", -1],
  [1, 9, 385],
  [3, "meta", e[20], 388,
   3, "meta", e[18], 389,
   0, -1],
  [1, 9, 387],
  [1, 9, 390],
  ["(", 391,
   0, 392],
  [1, 9, 393],
  [1, 9, 394],
  [1, 567, 395,
   ")", 392],
  [e[49], 396],
  [1, 9, 393],
  [1, 9, 397],
  [",", 398,
   0, -1],
  [1, 9, 399],
  [3, "meta", e[20], 400,
   3, "meta", e[18], 401],
  [1, 9, 399],
  [1, 9, 402],
  ["(", 403,
   0, 404],
  [1, 9, 405],
  [1, 9, 406],
  [1, 567, 407,
   ")", 404],
  [e[49], 408],
  [1, 9, 405],
  [1, 9, 397],
  ["{", 410],
  [1, 9, 411],
  [2, 577, 412, {"name":"ClassItem"},
   "}", -1],
  [1, 9, 411],
  ["<", 414],
  [1, 9, 415],
  [1, 584, 416],
  [1, 9, 417],
  [">", -1],
  [0, 419,
   3, "keyword", e[22], 422,
   0, 423],
  [3, "type", e[34], 420],
  [0, 419,
   1, 9, 421,
   0, -1],
  [3, "type", e[36], -1],
  [1, 9, 423],
  [3, "meta", e[20], 423,
   3, "type", e[18], -1],
  [2, 302, -1, {"name":"TemplateArgs"},
   "::", 425,
   1, 143, -1,
   "[", 427,
   /^[\*\&]/, -1,
   3, "keyword", e[33], -1],
  [1, 9, 426],
  [1, 228, -1],
  [1, 9, 428],
  [3, "number", e[24], 429,
   0, 429],
  [1, 9, 430],
  ["]", -1],
  [3, "keyword", e[40], 432,
   3, "keyword", e[50], 436,
   2, 136, -1, {"name":"prefixOp","token":"operator"}],
  [1, 9, 433],
  ["[", 434,
   0, -1],
  [1, 9, 435],
  ["]", -1],
  [1, 9, 437],
  ["[", 438,
   0, 439],
  [1, 9, 440],
  [1, 9, 441],
  ["]", 439],
  ["(", 442,
   0, 443],
  [1, 9, 444],
  [1, 9, 445],
  [1, 212, 446],
  [1, 143, -1,
   0, -1],
  [1, 9, 447],
  [")", 443],
  [3, "keyword", e[51], -1,
   [0, [5, 620], "["], 449,
   3, "keyword", e[52], 455,
   2, 624, 467, {"name":"ParenExpr"},
   3, "atom", e[53], -1,
   3, "number", e[24], -1,
   2, 131, -1, {"name":"string","token":"string"},
   2, 535, -1, {"name":"BlockOf"},
   3, "keyword", e[54], 469,
   1, 126, -1],
  [1, 9, 450],
  [1, 629, 451],
  [1, 9, 452],
  ["]", 453],
  [1, 9, 454],
  [2, 250, -1, {"name":"FunctionDef"},
   2, 197, -1, {"name":"Block"}],
  [1, 9, 456],
  ["<", 457],
  [1, 9, 458],
  [1, 228, 459],
  [1, 9, 460],
  [">", 461],
  [1, 9, 462],
  ["(", 463],
  [1, 9, 464],
  [1, 212, 465],
  [1, 9, 466],
  [")", -1],
  [1, 9, 468],
  [1, 212, -1,
   0, -1],
  [1, 9, 470],
  ["(", 471,
   e[49], 472],
  [1, 9, 473],
  [1, 9, 474],
  [1, 228, 475],
  [1, 212, 476],
  [1, 9, 477],
  [1, 9, 478],
  [")", 476],
  [3, "meta", e[16], -1],
  ["(", 480],
  [1, 9, 481],
  [1, 639, 482],
  [1, 9, 483],
  [")", -1],
  [1, 228, 485,
   0, -1],
  [1, 9, 486],
  [",", 487,
   0, -1],
  [1, 9, 488],
  [1, 228, 489],
  [1, 9, 486],
  [":", 491],
  [1, 9, 492],
  [1, 653, -1],
  [1, 9, 494],
  [1, 424, 495,
   /^[a-zA-Z¡-￿_]/, -1],
  [1, 9, 494],
  ["(", 497],
  [1, 9, 498],
  [")", -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[32], -1,
   3, "keyword", e[33], -1,
   3, "type", e[34], -1,
   3, "keyword", e[35], -1,
   3, "keyword", e[22], 499,
   e[55], 500],
  [1, 9, 501],
  [3, "meta", e[20], 500,
   3, "type", e[56], -1],
  [3, "meta", e[20], 501,
   3, "type", e[18], -1],
  [3, "operator", "=", 503,
   2, 535, -1, {"name":"BlockOf"},
   2, 361, -1, {"name":"ArgList"}],
  [1, 9, 504],
  [1, 212, -1],
  [3, "keyword", e[30], 506,
   0, 507,
   0, 508,
   3, "number", e[24], 509,
   0, -1],
  [1, 9, 510],
  [1, 9, 511],
  [3, "keyword", e[31], 512,
   3, "keyword", e[32], 512,
   1, 228, 513],
  [1, 9, 514],
  [2, 302, 507, {"name":"TemplateArgs"}],
  [3, "keyword", e[25], 515,
   3, "keyword", e[22], 515],
  [1, 9, 508],
  [1, 9, 516],
  [",", 517,
   0, -1],
  [1, 9, 518],
  [e[49], 519],
  [1, 9, 520],
  [1, 228, 509],
  [1, 9, 521],
  [3, "keyword", e[30], 522,
   0, 523,
   0, 524,
   3, "number", e[24], 525],
  [2, 479, 509, {"name":"ParamList"},
   1, 502, 509,
   0, 509],
  [1, 9, 526],
  [1, 9, 527],
  [3, "keyword", e[31], 528,
   3, "keyword", e[32], 528,
   1, 228, 529],
  [1, 9, 514],
  [2, 302, 523, {"name":"TemplateArgs"}],
  [3, "keyword", e[25], 530,
   3, "keyword", e[22], 530],
  [1, 9, 524],
  [1, 9, 531],
  [1, 9, 532],
  [e[49], 533],
  [1, 228, 525],
  [1, 9, 534],
  [2, 479, 525, {"name":"ParamList"},
   1, 502, 525,
   0, 525],
  ["{", 536],
  [1, 9, 537],
  [1, 212, 538,
   0, 543],
  [1, 9, 539],
  [",", 540,
   0, 543],
  [1, 9, 541],
  [1, 212, 542,
   0, 542],
  [1, 9, 539],
  [1, 9, 544],
  ["}", -1],
  [3, "callee", e[57], -1,
   e[18], -1],
  [3, "keyword", e[58], 547,
   3, "def property", e[18], -1],
  [3, "operator", "->*", -1,
   ",", -1,
   3, "operator", e[42], -1,
   2, 136, -1, {"name":"prefixOp","token":"operator"},
   /^(?:\(\)|\[\])/, -1,
   3, "keyword", e[50], 548,
   3, "keyword", e[40], 548],
  [/^(?:\[\])?/, -1],
  [1, 228, 550],
  [1, 9, 551],
  [2, 545, 552, {"name":"fieldName","token":"property"},
   0, 552],
  [1, 9, 553],
  [":", 554,
   "[", 555,
   0, -1],
  [1, 9, 556],
  [1, 9, 557],
  [3, "number", e[24], -1],
  [3, "number", e[24], 558,
   0, 558],
  [1, 9, 559],
  ["]", -1],
  [1, 212, 561,
   0, -1],
  [1, 9, 562],
  [",", 563,
   0, -1],
  [1, 9, 564],
  [1, 212, 565],
  [1, 9, 562],
  [1, 659, -1],
  [3, "number", e[24], -1,
   2, 131, -1, {"name":"string","token":"string"},
   e[18], -1,
   3, "operator", e[42], -1,
   ",", -1,
   "(", 568,
   "[", 571,
   "{", 574],
  [1, 9, 569],
  [1, 567, 570,
   ")", -1],
  [1, 9, 569],
  [1, 9, 572],
  [1, 567, 573,
   "]", -1],
  [1, 9, 572],
  [1, 9, 575],
  [1, 567, 576,
   "}", -1],
  [1, 9, 575],
  [3, "keyword", e[27], 578,
   2, 188, -1, {"name":"Template"},
   1, 175, -1,
   3, "meta", e[16], 580,
   1, 160, -1,
   2, 663, -1, {"name":"ObjectMember"}],
  [1, 9, 579],
  [":", -1],
  [1, 9, 581],
  [2, 361, 582, {"name":"ArgList"},
   0, 582],
  [1, 9, 583],
  [/^\;?/, -1],
  [1, 677, 585,
   0, 586,
   0, -1],
  [1, 9, 587],
  [3, "keyword", e[31], 588,
   3, "keyword", e[32], 588,
   1, 228, 589],
  [",", 590,
   0, -1],
  [1, 9, 586],
  [1, 9, 591],
  [1, 9, 592],
  [e[49], 593],
  [1, 677, 594,
   0, 595],
  [1, 9, 596],
  [1, 9, 587],
  [3, "keyword", e[31], 597,
   3, "keyword", e[32], 597,
   1, 228, 598],
  [1, 217, 599],
  [1, 9, 595],
  [1, 9, 600],
  [1, 9, 601],
  [e[49], 602],
  [3, "operator", "=", 603,
   0, 585],
  [1, 9, 604],
  [1, 9, 605],
  [1, 217, 606],
  [1, 431, 607,
   1, 448, 608],
  [1, 9, 609],
  [1, 9, 605],
  [1, 9, 610],
  [3, "operator", "=", 611,
   0, 594],
  [e[59], 612,
   0, 585],
  [1, 9, 613],
  [1, 307, 614],
  [1, 431, 615,
   1, 448, 616],
  [1, 9, 610],
  [1, 9, 613],
  [1, 9, 617],
  [e[59], 618,
   0, 594],
  [1, 307, 619],
  [1, 9, 617],
  ["[", 621],
  [1, 9, 622],
  [e[44], 623,
   /^(?:\&|\=|this|\])/, -1],
  [1, 9, 622],
  ["(", 625],
  [1, 9, 626],
  [1, 212, 627,
   0, 627],
  [1, 9, 628],
  [")", -1],
  ["&", 630,
   "=", 631,
   3, "keyword", e[51], 631,
   0, -1],
  [1, 9, 632],
  [1, 9, 633],
  [1, 126, 631,
   0, 631],
  [",", 634,
   0, -1],
  [1, 9, 635],
  ["&", 636,
   "=", 637,
   3, "keyword", e[51], 637],
  [1, 9, 638],
  [1, 9, 633],
  [1, 126, 637,
   0, 637],
  [1, 228, 640,
   0, -1],
  [1, 9, 641],
  [1, 238, 642,
   0, 643],
  [1, 9, 644],
  [1, 9, 645],
  [2, 479, 643, {"name":"ParamList"},
   0, 643],
  [",", 646,
   0, -1],
  [1, 9, 647],
  [1, 228, 648],
  [1, 9, 649],
  [1, 238, 650,
   0, 651],
  [1, 9, 652],
  [1, 9, 645],
  [2, 479, 651, {"name":"ParamList"},
   0, 651],
  [1, 688, 654,
   0, -1],
  [1, 9, 655],
  [",", 656,
   0, -1],
  [1, 9, 657],
  [1, 688, 658],
  [1, 9, 655],
  [/^(?!\}|\*\/)/, 660,
   0, -1],
  ["{", 661,
   /^[^]/, 659],
  [1, 659, 662],
  [/^\}?/, 659],
  [3, "keyword", e[31], 664,
   3, "keyword", e[32], 664,
   3, "keyword", e[33], 664,
   3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 667,
   1, 228, 665],
  [1, 9, 663],
  [1, 9, 666],
  [1, 699, 667],
  [1, 9, 668],
  [2, 250, -1, {"name":"FunctionDef"},
   1, 502, 669,
   ":", 670,
   "[", 671,
   0, 669],
  [1, 9, 672],
  [1, 9, 673],
  [1, 9, 674],
  [";", -1],
  [3, "number", e[24], 669],
  [3, "number", e[24], 675,
   0, 675],
  [1, 9, 676],
  ["]", 669],
  [3, "keyword", e[30], 678,
   0, 680],
  [1, 9, 679],
  [2, 302, 680, {"name":"TemplateArgs"}],
  [1, 9, 681],
  [3, "keyword", e[25], 682,
   3, "keyword", e[22], 682],
  [1, 9, 683],
  [3, "type def", e[18], 684],
  [1, 9, 685],
  [3, "operator", "=", 686,
   0, -1],
  [1, 9, 687],
  [1, 126, -1,
   3, "number", e[24], -1],
  [2, 545, 689, {"name":"fieldName","token":"property"}],
  [1, 9, 690],
  ["(", 691,
   "{", 692],
  [1, 9, 693],
  [1, 9, 694],
  [1, 560, 695],
  [1, 560, 696],
  [1, 9, 697],
  [1, 9, 698],
  [")", -1],
  ["}", -1],
  [0, 700,
   "(", 707],
  [e[60], 701,
   1, 546, 702],
  [1, 9, 700],
  [1, 9, 703],
  ["[", 704,
   0, -1],
  [1, 9, 705],
  ["]", 706],
  [1, 9, 703],
  [1, 9, 708],
  [1, 699, 709],
  [1, 9, 710],
  [")", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}
function isLocalType(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
      if (state.context.name != "funcName") { return "def local" }
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var typeRE = /(^|\s)type($|\s)/;

function markTypeLocals(type, scopes, stream, state) {
  if (type == "type def") {
    var scope = getScope(state.context, scopes);
    if (scope) {
      if (!scope.localTypes) { scope.localTypes = []; }
      scope.localTypes.push(stream.current());
    }
  } else if (typeRE.test(type) && !/qualified/.test(type) &&
             isLocalType(state.context, stream.current())) {
    type += " local";
  }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", EnumBody: "}",
  ArrayInitializer: "}", NamespaceBlock: "}",
  ArrayLiteral: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")",
  TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
};

function baseIndent(cx, config) {
  for (var startLine = cx.startLine;; cx = cx.parent) {
    if (cx.name == "CondExpr")
      { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
    if (!cx.parent || cx.parent.startLine != startLine)
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function findIndent(cx, textAfter, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  var closed = textAfter && textAfter.charAt(0) == brack;
  if (brack && config.align !== false && aligned(cx))
    { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

  if (brack && (cx.name == "Block" || cx.name == "NamespaceBlock" || cx.name == "ClassBody" ||
                cx.name == "AnnotationTypeBody" || cx.name == "BlockOf" || cx.name == "EnumBody")) {
    var parent = cx.parent;
    if (parent && parent.name == "Statement" && parent.parent &&
        parent.parent.name == "Statement" && hasSubStatement(parent.parent))
      { parent = parent.parent; }
    var base$1 = statementIndent(parent, config);

    if (closed || cx.name == "NamespaceBlock") { return base$1 }
    if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
    if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
    return base$1 + config.indentUnit
  }

  var base = baseIndent(cx, config.tabSize);
  if (brack) {
    if (closed && brack != ")") { return base }
    return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "EnumConstant" ||
             cx.name == "AnnotationTypeItem") {
    if (hasSubStatement(cx)) { return base + config.indentUnit; }
    return base + 2 * config.indentUnit
  } else if (cx.name == "Alternative") {
    base = baseIndent(cx.parent, config.tabSize);
    if (!textAfter || /^else\b/.test(textAfter)) { return base }
    return base + config.indentUnit
  } else if (cx.name == "ArrowRest") {
    return base + config.indentUnit
  } else if (cx.name == "InitializerList") {
    return base + 2
  } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
    return base + 2 * config.indentUnit
  } else {
    return findIndent(cx.parent, textAfter, config)
  }
}

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr" ||
        cx.name == "EnumConstant" || cx.name == "Template" || cx.name == "AnnotationTypeItem" ||
        cx.parent && bracketed[cx.parent.name])
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

function localConstructorAhead(line, pos, cx) {
  var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
  if (!ahead) { return false }
  while (cx.name != "Statement") { cx = cx.parent; }
  var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
  return className ? className[1] == ahead[1] : false
}

var rawStringOpen = /R"(.*?)\(/g;

function rawStringContinues(line, pos, cx) {
  rawStringOpen.lastIndex = cx.startPos;
  var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
  return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
}

var scopes = ["Block", "FunctionDef"];
var typeScopes = ["Template"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.blockCommentContinue = " * ";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
