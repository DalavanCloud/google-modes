(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z0-9_]+(?![a-zA-Z¡-￿_0-9])|[A-Z]+[A-Z0-9]*_[A-Z0-9_]*(?![a-zA-Z¡-￿_0-9]))/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^(?:final|explicit)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr|mutable|thread_local)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\-\>|(?!\.\.)\.)/, [1, "\n", "\t", " "], /^[a-zA-Z¡-￿_\.]+/, /^\@[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z¡-￿_])/, /^[^]/], /^(?:\.\.\.)?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^(?:\(\)|\[\])/, /^(?:\[\])?/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?!\>)/, /^(?:\.\.\.|\(|\=|\>|\,)/, /^(?:\*|\&\&|\&)/];
  var nodes = [
    [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
     0, 2],
    [/^[^]/, 0],
    [1, 9, 3],
    [2, 12, 4, {"name":"Statement"}],
    [0, 2,
     0, 1],
    [3, "keyword", e[5], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[55], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "type", e[32], -1,
     3, "type", e[33], -1,
     3, "keyword", e[31], -1,
     3, "atom", e[54], -1,
     3, "meta", e[17], -1,
     1, 127, -1,
     3, "number", e[22], -1,
     2, 134, -1, {"name":"string","token":"string"},
     2, 139, -1, {"name":"prefixOp","token":"operator"},
     3, "operator", e[43], -1,
     3, "operator", e[35], -1,
     2, 140, -1, {"name":"comment","token":"comment"},
     3, "keyword", e[1], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[52], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[39], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[27], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[50], -1,
     3, "keyword", e[51], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[53], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[24], -1,
     /^[^]/, -1],
    ["#", 7],
    [2, 140, 7, {"name":"comment","token":"comment"},
     "\\", 8,
     /^./, 7,
     0, -1],
    [/^[^]/, 7],
    [/^[ \t]/, 9,
     "\n", 10,
     2, 140, 9, {"name":"comment","token":"comment"},
     0, -1],
    [/^[ \t]*/, 11],
    [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
     0, 9],
    [1, 145, -1,
     1, 162, -1,
     3, "keyword", e[0], 13,
     3, "keyword", e[1], 17,
     3, "keyword", e[2], 25,
     3, "keyword", e[3], 29,
     3, "keyword", e[4], 33,
     1, 174, -1,
     2, 187, -1, {"name":"Template"},
     [7, "constructorAhead"], 39,
     3, "keyword", e[5], 42,
     3, "keyword", e[6], 46,
     3, "keyword", e[7], 47,
     3, "keyword", e[8], 48,
     3, "keyword", e[9], 72,
     3, "keyword", e[10], 77,
     2, 196, -1, {"name":"Block"},
     3, "keyword", e[11], 81,
     3, "keyword", e[12], 83,
     3, "keyword", e[13], 87,
     3, "keyword", e[14], 91,
     3, "keyword", e[15], 97,
     3, "keyword", e[16], 98,
     [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 200]], 97,
     3, "meta", e[17], 101,
     2, 201, 109, {"name":"DeclType"},
     ";", -1,
     1, 218, 125],
    [1, 9, 14],
    [2, 223, 15, {"name":"ArgList"}],
    [1, 9, 16],
    [";", -1],
    [1, 9, 18],
    [1, 228, 19,
     0, 19],
    [1, 9, 20],
    [3, "operator", "=", 21,
     2, 233, -1, {"name":"NamespaceBlock"}],
    [1, 9, 22],
    [1, 127, 23],
    [1, 9, 24],
    [";", -1],
    [1, 9, 26],
    [1, 218, 27],
    [1, 9, 28],
    [";", -1],
    [1, 9, 30],
    [2, 196, 31, {"name":"Block"}],
    [1, 9, 32],
    [2, 237, -1, {"name":"Catch"}],
    [1, 9, 34],
    ["{", 35],
    [1, 9, 36],
    [2, 134, 37, {"name":"string","token":"string"}],
    [1, 9, 38],
    ["}", -1],
    [1, 228, 40],
    [1, 9, 41],
    [2, 249, -1, {"name":"FunctionDef"}],
    [1, 9, 43],
    [3, "type def", e[18], 44,
     0, 44],
    [1, 9, 45],
    [2, 282, -1, {"name":"BlockOf"},
     0, -1],
    [1, 9, 49],
    [1, 9, 50],
    [1, 9, 51],
    ["(", 52],
    [2, 300, 53, {"name":"CondExpr"}],
    [2, 12, 54, {"name":"Statement"}],
    [1, 9, 55],
    [1, 9, 56],
    [1, 9, 57],
    [2, 12, 58, {"name":"Statement"}],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[7], 59],
    [1, 9, 60],
    [1, 9, 61],
    [1, 218, 62,
     0, 62],
    [2, 300, 63, {"name":"CondExpr"}],
    [1, 9, 64],
    [1, 9, 65],
    [";", 66],
    [";", -1],
    [1, 9, 67],
    [1, 218, 68,
     0, 68],
    [1, 9, 69],
    [")", 70],
    [1, 9, 71],
    [2, 12, -1, {"name":"Statement"}],
    [1, 9, 73],
    [2, 300, 74, {"name":"CondExpr"}],
    [1, 9, 75],
    [2, 12, 76, {"name":"Statement"}],
    [2, 305, -1, {"name":"Alternative"}],
    [1, 9, 78],
    [2, 300, 79, {"name":"CondExpr"}],
    [1, 9, 80],
    [2, 196, -1, {"name":"Block"}],
    [1, 9, 82],
    [";", -1],
    [1, 9, 84],
    [e[18], 85],
    [1, 9, 86],
    [";", -1],
    [1, 9, 88],
    [1, 218, 89,
     0, 89],
    [1, 9, 90],
    [";", -1],
    [1, 9, 92],
    [1, 228, 93,
     0, 93],
    [1, 9, 94],
    [2, 309, 95, {"name":"BlockOf"},
     0, 95],
    [1, 9, 96],
    [";", -1],
    [1, 9, 99],
    [1, 9, 100],
    [":", -1],
    [1, 218, 97],
    [1, 9, 102],
    [2, 319, 103, {"name":"ParenTokens"},
     0, 103],
    [1, 9, 104],
    [2, 196, 105, {"name":"Block"},
     0, 106,
     0, 105],
    [1, 9, 107],
    [1, 323, 108,
     0, 105],
    [/^\;?/, -1],
    [1, 9, 106],
    [1, 9, 110],
    [1, 344, 111],
    [1, 9, 112],
    [3, "meta", e[17], 113,
     [5, 356], 114,
     1, 360, 115,
     0, 115],
    [1, 9, 116],
    [2, 249, -1, {"name":"FunctionDef"}],
    [1, 9, 117],
    [2, 319, 118, {"name":"ParenTokens"},
     0, 118],
    [",", 119,
     ";", -1],
    [1, 9, 120],
    [1, 9, 121],
    [/^\;?/, -1],
    [1, 228, 122],
    [1, 9, 123],
    [1, 360, 124,
     0, 124],
    [1, 9, 117],
    [1, 9, 126],
    [";", -1],
    [0, 128,
     3, "type", e[19], -1,
     2, 363, 133, {"name":"unqualifiedVariableName","token":"variable"}],
    [1, 364, 129],
    [0, 128,
     3, "type qualified", e[19], 130,
     2, 369, 130, {"name":"qualifiedVariableName","token":"qualified"}],
    [2, 370, 131, {"name":"TemplateArgs"},
     0, -1],
    [/^(?=\:\:)/, 132,
     0, -1],
    [1, 127, -1],
    [2, 370, -1, {"name":"TemplateArgs"},
     0, -1],
    [/^R\"(?:(?!\().)*\(/, 135,
     /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 136],
    [[0, [7, "rawStringContinues"], /^[^]/], 135,
     "\"", -1],
    [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
     "\"", 137],
    ["\\", 138,
     [0, /^(?!\")/, /^[^]/], 137,
     "\"", -1],
    [/^[^]/, 137],
    [3, "keyword", e[20], -1,
     /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
    [/^\/\*\*(?!\/)/, 141,
     "/*", 144,
     /^\/\/.*/, -1],
    [e[48], 142,
     0, 143],
    [0, 141,
     0, 141],
    [2, 375, 143, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 144,
     "*/", -1],
    [3, "keyword", e[21], 147,
     [0, [5, 386], "["], 148],
    [0, 145,
     0, -1],
    [1, 9, 149],
    [1, 9, 150],
    ["(", 151],
    ["[", 152],
    [1, 9, 153],
    [1, 9, 154],
    [3, "number", e[22], 155],
    [1, 390, 156],
    [1, 9, 157],
    [1, 9, 158],
    [")", 159],
    ["]", 160],
    [1, 9, 146],
    [1, 9, 161],
    ["]", 159],
    [3, "keyword", e[23], 163,
     3, "keyword", e[14], 163],
    [1, 9, 164],
    [1, 145, 165,
     0, 165],
    [1, 9, 166],
    [3, "type def", e[18], 167],
    [1, 9, 168],
    [3, "keyword", e[24], 169,
     ":", 170,
     0, 172],
    [1, 9, 168],
    [1, 9, 171],
    [1, 412, 172],
    [1, 9, 173],
    [";", -1,
     2, 426, -1, {"name":"ClassBody"}],
    [3, "keyword", e[25], 175],
    [1, 9, 176],
    [3, "keyword", e[20], 177,
     3, "keyword", e[1], 178,
     0, 178],
    [1, 9, 179],
    [1, 9, 180],
    [1, 430, 181],
    [1, 127, 181],
    [1, 9, 182],
    [3, "operator", "=", 183,
     0, 185],
    [1, 9, 184],
    [1, 430, 185],
    [1, 9, 186],
    [";", -1],
    [3, "keyword", e[26], 188,
     0, 188],
    [1, 9, 189],
    [3, "keyword", e[27], 190],
    [1, 9, 191],
    [2, 443, 192, {"name":"TemplateParams"}],
    [1, 9, 193],
    [1, 9, 194],
    [1, 9, 195],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 197],
    [1, 9, 198],
    [2, 12, 199, {"name":"Statement"},
     "}", -1],
    [1, 9, 198],
    [e[45], 200,
     /^\:(?!\:)/, -1],
    [0, 202,
     0, 203,
     3, "keyword", e[28], 214,
     [5, 448], 215],
    [3, "keyword", e[29], 204,
     3, "keyword", e[30], 204,
     3, "keyword", e[31], 204],
    [3, "type", e[32], 205],
    [1, 9, 206],
    [1, 9, 207],
    [0, 202,
     3, "keyword", e[28], 208,
     0, 209,
     1, 453, 208],
    [0, 203,
     3, "type", e[33], 208,
     0, 208],
    [1, 9, 210],
    [3, "type", e[32], 211],
    [1, 458, 212,
     0, -1],
    [0, 209,
     1, 9, 213,
     0, 208],
    [1, 9, 210],
    [3, "type", e[33], 208],
    [1, 9, 216],
    [1, 453, 214],
    [1, 458, 217,
     0, -1],
    [1, 9, 216],
    [1, 465, 219,
     1, 482, 220],
    [1, 9, 218],
    [1, 9, 221],
    [1, 323, 222,
     0, -1],
    [1, 9, 221],
    ["(", 224],
    [1, 9, 225],
    [1, 517, 226],
    [1, 9, 227],
    [")", -1],
    [3, "keyword", e[34], 229,
     0, 231,
     3, "def", e[38], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[35], -1,
     2, 139, -1, {"name":"prefixOp","token":"operator"},
     e[56], -1,
     3, "keyword", e[36], 230,
     3, "keyword", e[37], 230],
    [e[57], -1],
    [1, 523, 232],
    [0, 231,
     3, "qualified def", e[38], -1],
    ["{", 234],
    [1, 9, 235],
    [2, 12, 236, {"name":"Statement"},
     "}", -1],
    [1, 9, 235],
    [3, "keyword", e[39], 238,
     0, -1],
    [1, 9, 239],
    ["(", 240],
    [1, 9, 241],
    [1, 430, 242],
    [1, 9, 243],
    [1, 344, 244,
     0, 244],
    [1, 9, 245],
    [")", 246],
    [1, 9, 247],
    [2, 196, 248, {"name":"Block"}],
    [1, 9, 237],
    [2, 528, 250, {"name":"ParamList"}],
    [1, 9, 251],
    [3, "keyword", e[31], 252,
     /^(?:\&|\&\&)?/, 253],
    [1, 9, 251],
    [1, 9, 254],
    [3, "keyword", e[40], 255,
     3, "keyword", e[2], 256,
     0, 267],
    [1, 9, 257],
    [1, 9, 258],
    ["(", 259,
     0, 267],
    ["(", 260],
    [1, 9, 261],
    [1, 9, 262],
    [1, 218, 263],
    [1, 533, 264],
    [1, 9, 265],
    [1, 9, 266],
    [")", 267],
    [")", 267],
    [1, 9, 268],
    [1, 145, 269,
     0, 269],
    [1, 9, 270],
    ["->", 271,
     0, 273],
    [1, 9, 272],
    [1, 430, 273],
    [1, 9, 274],
    [3, "keyword", e[41], 275,
     2, 539, 276, {"name":"InitializerList"},
     0, 276],
    [1, 9, 274],
    [1, 9, 277],
    [";", -1,
     2, 196, -1, {"name":"Block"},
     3, "operator", "=", 278],
    [1, 9, 279],
    [3, "keyword", e[15], 280,
     3, "keyword", e[37], 280],
    [1, 9, 281],
    [";", -1],
    ["{", 283],
    [1, 9, 284],
    [1, 542, 285,
     0, 298],
    [1, 9, 286],
    [3, "operator", "=", 287,
     0, 288],
    [1, 9, 289],
    [1, 9, 290],
    [1, 218, 288],
    [",", 291,
     0, 298],
    [1, 9, 292],
    [1, 542, 293,
     0, 294],
    [1, 9, 295],
    [1, 9, 290],
    [3, "operator", "=", 296,
     0, 294],
    [1, 9, 297],
    [1, 218, 294],
    [1, 9, 299],
    ["}", -1],
    ["(", 301],
    [1, 9, 302],
    [1, 218, 303,
     0, 303],
    [1, 9, 304],
    [")", -1],
    [1, 9, 306],
    [3, "keyword", e[42], 307,
     0, -1],
    [1, 9, 308],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 310],
    [1, 9, 311],
    [1, 545, 312,
     0, 317],
    [1, 9, 313],
    [";", 314,
     0, 317],
    [1, 9, 315],
    [1, 545, 316,
     0, 316],
    [1, 9, 313],
    [1, 9, 318],
    ["}", -1],
    ["(", 320],
    [1, 9, 321],
    [1, 556, 322,
     ")", -1],
    [1, 9, 321],
    [2, 561, -1, {"name":"BlockOf"},
     2, 223, 324, {"name":"ArgList"},
     e[44], 326,
     2, 223, -1, {"name":"ArgList"},
     "[", 330,
     3, "operator", e[43], -1,
     e[44], 334,
     3, "operator", e[35], 336,
     "?", 338],
    [1, 9, 325],
    [2, 196, -1, {"name":"Block"},
     0, -1],
    [1, 9, 327],
    [2, 571, 328, {"name":"fieldName","token":"property"}],
    [1, 9, 329],
    [2, 370, -1, {"name":"TemplateArgs"},
     0, -1],
    [1, 9, 331],
    [1, 218, 332],
    [1, 9, 333],
    ["]", -1],
    [1, 9, 335],
    [2, 571, -1, {"name":"fieldName","token":"property"}],
    [1, 9, 337],
    [1, 218, -1],
    [1, 9, 339],
    [1, 218, 340],
    [1, 9, 341],
    [":", 342],
    [1, 9, 343],
    [1, 218, -1],
    [0, 345,
     "(", 352],
    [e[61], 346,
     1, 228, 347],
    [1, 9, 345],
    [1, 9, 348],
    ["[", 349,
     0, -1],
    [1, 9, 350],
    ["]", 351],
    [1, 9, 348],
    [1, 9, 353],
    [1, 344, 354],
    [1, 9, 355],
    [")", -1],
    ["(", 357],
    [1, 9, 358],
    [")", -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "type", e[32], -1,
     3, "keyword", e[28], -1,
     [5, 448], 359],
    [1, 453, -1],
    [3, "operator", "=", 361,
     2, 561, -1, {"name":"BlockOf"},
     2, 223, -1, {"name":"ArgList"}],
    [1, 9, 362],
    [1, 218, -1],
    [3, "callee", e[58], -1,
     e[18], -1],
    ["::", -1,
     [5, 572], 365],
    [3, "variable qualifier", e[18], 366],
    [2, 370, 367, {"name":"TemplateArgs"},
     0, 367],
    [1, 9, 368],
    ["::", -1],
    [2, 363, -1, {"name":"unqualifiedVariableName","token":"variable"}],
    ["<", 371],
    [1, 9, 372],
    [1, 576, 373],
    [1, 9, 374],
    [">", -1],
    [3, "tag", /^\@param(?![a-zA-Z¡-￿_])/, 376,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z¡-￿_])/, 377,
     3, "tag", e[47], 384,
     "{", 378],
    [e[45], 376,
     3, "def", e[46], 384,
     "<", 379,
     0, 384],
    [e[45], 377,
     3, "type", e[46], 384,
     0, 384],
    [3, "tag", e[47], 380],
    [3, "type def", /^[a-zA-Z¡-￿_]+/, 381],
    [/^[\t ]*/, 382],
    [">", 384],
    [1, 608, 383],
    ["}", 384],
    [e[48], 385,
     0, -1],
    [0, 384,
     0, 384],
    ["[", 387],
    [1, 9, 388],
    [" ", 389,
     "[", -1],
    [1, 9, 388],
    [1, 612, 391,
     3, "meta", e[18], 392,
     0, -1],
    [1, 9, 390],
    [1, 9, 393],
    ["(", 394,
     0, 395],
    [1, 9, 396],
    [1, 9, 397],
    [1, 617, 398,
     ")", 395],
    [e[49], 399],
    [1, 9, 396],
    [1, 9, 400],
    [",", 401,
     0, -1],
    [1, 9, 402],
    [1, 612, 403,
     3, "meta", e[18], 404],
    [1, 9, 402],
    [1, 9, 405],
    ["(", 406,
     0, 407],
    [1, 9, 408],
    [1, 9, 409],
    [1, 617, 410,
     ")", 407],
    [e[49], 411],
    [1, 9, 408],
    [1, 9, 400],
    [3, "keyword", e[50], 413,
     0, 413,
     0, -1],
    [1, 9, 414],
    [3, "keyword", e[51], 415,
     0, 415],
    [1, 9, 416],
    [1, 430, 417],
    [1, 9, 418],
    [",", 419,
     0, -1],
    [1, 9, 420],
    [3, "keyword", e[50], 421,
     0, 421],
    [1, 9, 422],
    [3, "keyword", e[51], 423,
     0, 423],
    [1, 9, 424],
    [1, 430, 425],
    [1, 9, 418],
    ["{", 427],
    [1, 9, 428],
    [2, 627, 429, {"name":"ClassItem"},
     "}", -1],
    [1, 9, 428],
    [3, "keyword", e[20], 431,
     0, 433],
    [1, 9, 432],
    [1, 430, -1],
    [3, "keyword", e[29], 434,
     3, "keyword", e[30], 434,
     3, "keyword", e[31], 434,
     3, "keyword", e[14], 435,
     0, 435],
    [1, 9, 433],
    [1, 9, 436],
    [3, "keyword", e[28], 437,
     0, 438,
     1, 453, 437],
    [1, 9, 439],
    [3, "type", e[32], 440],
    [1, 458, 441,
     0, -1],
    [0, 438,
     1, 9, 442,
     0, 437],
    [1, 9, 439],
    [3, "type", e[33], 437],
    ["<", 444],
    [1, 9, 445],
    [1, 638, 446],
    [1, 9, 447],
    [">", -1],
    [/^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, 449],
    [1, 453, 450],
    [1, 9, 451],
    [1, 458, 452,
     /^[a-zA-Z¡-￿_]/, -1],
    [1, 9, 451],
    [3, "keyword", e[20], 454,
     0, 455],
    [1, 9, 455],
    [0, 456,
     3, "type", e[18], -1],
    [1, 664, 457],
    [0, 456,
     3, "type qualified", e[18], -1],
    [2, 370, -1, {"name":"TemplateArgs"},
     "::", 459,
     1, 145, -1,
     "[", 461,
     /^[\*\&]/, -1,
     3, "keyword", e[31], -1],
    [1, 9, 460],
    [3, "type qualified", e[18], -1],
    [1, 9, 462],
    [3, "number", e[22], 463,
     0, 463],
    [1, 9, 464],
    ["]", -1],
    [3, "keyword", e[37], 466,
     3, "keyword", e[36], 470,
     2, 139, -1, {"name":"prefixOp","token":"operator"}],
    [1, 9, 467],
    ["[", 468,
     0, -1],
    [1, 9, 469],
    ["]", -1],
    [1, 9, 471],
    ["[", 472,
     0, 473],
    [1, 9, 474],
    [1, 9, 475],
    ["]", 473],
    ["(", 476,
     0, 477],
    [1, 9, 478],
    [1, 9, 479],
    [1, 218, 480],
    [1, 145, -1,
     0, -1],
    [1, 9, 481],
    [")", 477],
    [3, "keyword", e[52], -1,
     "[", 483,
     3, "keyword", e[53], 490,
     2, 669, 502, {"name":"ParenExpr"},
     3, "atom", e[54], -1,
     3, "number", e[22], -1,
     2, 134, -1, {"name":"string","token":"string"},
     2, 561, -1, {"name":"BlockOf"},
     3, "keyword", e[55], 505,
     1, 127, -1],
    [1, 9, 484],
    [/^(?!\[)/, 485],
    [1, 674, 486],
    [1, 9, 487],
    ["]", 488],
    [1, 9, 489],
    [2, 249, -1, {"name":"FunctionDef"},
     2, 196, -1, {"name":"Block"}],
    [1, 9, 491],
    ["<", 492],
    [1, 9, 493],
    [1, 430, 494],
    [1, 9, 495],
    [">", 496],
    [1, 9, 497],
    ["(", 498],
    [1, 9, 499],
    [1, 218, 500],
    [1, 9, 501],
    [")", -1],
    [1, 9, 503],
    [/^(?![\[\(\-\+])/, 504,
     0, -1],
    [1, 218, -1],
    [1, 9, 506],
    ["(", 507,
     e[49], 508],
    [1, 9, 509],
    [1, 9, 510],
    [1, 430, 511],
    [1, 218, 512],
    [1, 9, 513],
    [1, 9, 514],
    [")", 512],
    [3, "meta", e[17], 515],
    [1, 9, 516],
    [2, 319, -1, {"name":"ParenTokens"},
     0, -1],
    [1, 218, 518,
     0, -1],
    [1, 9, 519],
    [",", 520,
     0, -1],
    [1, 9, 521],
    [1, 218, 522],
    [1, 9, 519],
    ["::", -1,
     [5, 684], 524],
    [3, "qualifier def", e[18], 525],
    [2, 370, 526, {"name":"TemplateArgs"},
     0, 526],
    [1, 9, 527],
    ["::", -1],
    ["(", 529],
    [1, 9, 530],
    [1, 688, 531],
    [1, 9, 532],
    [")", -1],
    [1, 430, 534,
     0, -1],
    [1, 9, 535],
    [",", 536,
     0, -1],
    [1, 9, 537],
    [1, 430, 538],
    [1, 9, 535],
    [":", 540],
    [1, 9, 541],
    [1, 702, -1],
    [3, "keyword", e[34], 543,
     3, "def property", e[18], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[35], -1,
     2, 139, -1, {"name":"prefixOp","token":"operator"},
     e[56], -1,
     3, "keyword", e[36], 544,
     3, "keyword", e[37], 544],
    [e[57], -1],
    [1, 430, 546],
    [1, 9, 547],
    [2, 571, 548, {"name":"fieldName","token":"property"},
     0, 548],
    [1, 9, 549],
    [":", 550,
     "[", 551,
     0, -1],
    [1, 9, 552],
    [1, 9, 553],
    [3, "number", e[22], -1],
    [3, "number", e[22], 554,
     0, 554],
    [1, 9, 555],
    ["]", -1],
    [2, 319, -1, {"name":"ParenTokens"},
     2, 708, -1, {"name":"BracketTokens"},
     2, 712, -1, {"name":"BraceTokens"},
     3, "keyword", /^(?:auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|volatile|do|if|static|while|asm|alignof)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "keyword", /^(?:alignas|asm|bool|catch|class|compl|concept|constexpr|const_cast|decltype|delete|dynamic_cast|explicit|export|friend|import|module|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|reinterpret_cast|requires|static_assert|static_cast|synchronized|template|this|throw|try|typedef|typeid|using|virtual|wchar_t)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "atom", e[54], -1,
     3, "number", e[22], -1,
     2, 134, -1, {"name":"string","token":"string"},
     3, "operator", e[35], -1,
     2, 139, -1, {"name":"prefixOp","token":"operator"},
     0, 557,
     2, 363, -1, {"name":"unqualifiedVariableName","token":"variable"},
     /^(?![\)\]\}])./, -1],
    ["::", 558,
     /^(?=[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*\:\:)/, 559],
    [0, 557,
     2, 369, -1, {"name":"qualifiedVariableName","token":"qualified"}],
    [3, "variable qualifier", e[18], 560],
    ["::", 558],
    ["{", 562],
    [1, 9, 563],
    [1, 218, 564,
     0, 569],
    [1, 9, 565],
    [",", 566,
     0, 569],
    [1, 9, 567],
    [1, 218, 568,
     0, 568],
    [1, 9, 565],
    [1, 9, 570],
    ["}", -1],
    [3, "callee", e[58], -1,
     e[18], -1],
    [3, "variable qualifier", e[18], 573],
    [1, 716, 574,
     0, 574],
    [1, 9, 575],
    ["::", -1],
    [3, "keyword", e[27], 577,
     0, 578,
     0, 579,
     0, -1],
    [1, 9, 580],
    [1, 9, 581],
    [3, "keyword", e[29], 582,
     3, "keyword", e[30], 582,
     [5, 721], 583,
     1, 724, 584],
    [2, 370, 578, {"name":"TemplateArgs"}],
    [3, "keyword", e[23], 585,
     3, "keyword", e[20], 585],
    [1, 9, 579],
    [1, 430, 586],
    [1, 9, 587],
    [1, 9, 588],
    [1, 9, 589],
    [e[49], 590],
    [1, 430, 590],
    [2, 528, 584, {"name":"ParamList"},
     1, 360, 584,
     0, 584],
    [1, 9, 591],
    [",", 592,
     0, -1],
    [1, 9, 593],
    [3, "keyword", e[27], 594,
     0, 595,
     0, 596],
    [1, 9, 597],
    [1, 9, 598],
    [3, "keyword", e[29], 599,
     3, "keyword", e[30], 599,
     [5, 730], 600,
     1, 724, 601],
    [2, 370, 595, {"name":"TemplateArgs"}],
    [3, "keyword", e[23], 602,
     3, "keyword", e[20], 602],
    [1, 9, 596],
    [1, 430, 603],
    [1, 9, 604],
    [1, 9, 605],
    [1, 9, 606],
    [e[49], 607],
    [1, 430, 607],
    [2, 528, 601, {"name":"ParamList"},
     1, 360, 601,
     0, 601],
    [1, 9, 591],
    [3, "attribute", "{", 609,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 608,
     "\n", 610,
     0, -1],
    [1, 608, 611],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 608],
    [/^(?=\*\/)/, 608,
     3, "attribute", "}", 608],
    ["::", -1,
     [5, 733], 613],
    [3, "meta", e[18], 614],
    [2, 370, 615, {"name":"TemplateArgs"},
     0, 615],
    [1, 9, 616],
    ["::", -1],
    [3, "number", e[22], -1,
     2, 134, -1, {"name":"string","token":"string"},
     e[18], -1,
     3, "operator", e[35], -1,
     ",", -1,
     "(", 618,
     "[", 621,
     "{", 624],
    [1, 9, 619],
    [1, 617, 620,
     ")", -1],
    [1, 9, 619],
    [1, 9, 622],
    [1, 617, 623,
     "]", -1],
    [1, 9, 622],
    [1, 9, 625],
    [1, 617, 626,
     "}", -1],
    [1, 9, 625],
    [3, "keyword", e[51], 628,
     2, 187, -1, {"name":"Template"},
     1, 174, -1,
     3, "keyword", e[0], 630,
     3, "meta", e[17], 634,
     1, 162, -1,
     2, 737, -1, {"name":"ObjectMember"}],
    [1, 9, 629],
    [":", -1],
    [1, 9, 631],
    [2, 223, 632, {"name":"ArgList"}],
    [1, 9, 633],
    [";", -1],
    [1, 9, 635],
    [2, 319, 636, {"name":"ParenTokens"},
     0, 636],
    [1, 9, 637],
    [/^\;?/, -1],
    [1, 755, 639,
     0, 640,
     0, -1],
    [1, 9, 641],
    [3, "keyword", e[29], 642,
     3, "keyword", e[30], 642,
     1, 430, 643],
    [",", 644,
     0, -1],
    [1, 9, 640],
    [1, 9, 645],
    [1, 9, 646],
    [e[49], 647],
    [1, 755, 648,
     0, 649],
    [1, 9, 650],
    [1, 9, 641],
    [3, "keyword", e[29], 651,
     3, "keyword", e[30], 651,
     1, 430, 652],
    [1, 228, 653],
    [1, 9, 649],
    [1, 9, 654],
    [1, 9, 655],
    [e[49], 656],
    [3, "operator", "=", 657,
     0, 639],
    [1, 9, 658],
    [1, 9, 659],
    [1, 228, 660],
    [1, 724, 639],
    [1, 9, 661],
    [3, "operator", "=", 662,
     0, 648],
    [1, 9, 663],
    [1, 724, 648],
    ["::", -1,
     [5, 766], 665],
    [3, "type qualifier", e[18], 666],
    [2, 370, 667, {"name":"TemplateArgs"},
     0, 667],
    [1, 9, 668],
    ["::", -1],
    ["(", 670],
    [1, 9, 671],
    [1, 218, 672,
     0, 672],
    [1, 9, 673],
    [")", -1],
    [/^\&?/, 675,
     "=", 676,
     3, "keyword", e[52], 676,
     0, -1],
    [1, 9, 677],
    [1, 9, 678],
    [1, 127, 676,
     0, 676],
    [",", 679,
     0, -1],
    [1, 9, 680],
    [/^\&?/, 681,
     "=", 682,
     3, "keyword", e[52], 682],
    [1, 9, 683],
    [1, 9, 678],
    [1, 127, 682,
     0, 682],
    [3, "qualifier def", e[18], 685],
    [1, 716, 686,
     0, 686],
    [1, 9, 687],
    ["::", -1],
    [1, 430, 689,
     0, -1],
    [1, 9, 690],
    [1, 344, 691,
     0, 692],
    [1, 9, 693],
    [1, 9, 694],
    [2, 528, 692, {"name":"ParamList"},
     0, 692],
    [",", 695,
     0, -1],
    [1, 9, 696],
    [1, 430, 697],
    [1, 9, 698],
    [1, 344, 699,
     0, 700],
    [1, 9, 701],
    [1, 9, 694],
    [2, 528, 700, {"name":"ParamList"},
     0, 700],
    [1, 770, 703,
     0, -1],
    [1, 9, 704],
    [",", 705,
     0, -1],
    [1, 9, 706],
    [1, 770, 707],
    [1, 9, 704],
    ["[", 709],
    [1, 9, 710],
    [1, 556, 711,
     "]", -1],
    [1, 9, 710],
    ["{", 713],
    [1, 9, 714],
    [1, 556, 715,
     "}", -1],
    [1, 9, 714],
    ["<", 717],
    [1, 9, 718],
    [e[59], 719,
     ">", -1],
    [1, 716, 720,
     2, 134, 720, {"name":"string","token":"string"},
     /^[^]/, 720],
    [1, 9, 718],
    [1, 430, 722],
    [1, 9, 723],
    [e[60], -1],
    [1, 465, 725,
     1, 482, 726],
    [1, 9, 724],
    [1, 9, 727],
    [e[59], 728,
     0, -1],
    [1, 323, 729],
    [1, 9, 727],
    [1, 430, 731],
    [1, 9, 732],
    [e[60], -1],
    [3, "meta", e[18], 734],
    [1, 716, 735,
     0, 735],
    [1, 9, 736],
    ["::", -1],
    [3, "keyword", e[29], 738,
     3, "keyword", e[30], 738,
     3, "keyword", e[31], 738,
     3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 741,
     1, 430, 739],
    [1, 9, 737],
    [1, 9, 740],
    [1, 782, 741],
    [1, 9, 742],
    [2, 249, -1, {"name":"FunctionDef"},
     1, 360, 743,
     ":", 744,
     "[", 745,
     0, 743,
     3, "meta", e[17], 746],
    [1, 9, 747],
    [1, 9, 748],
    [1, 9, 749],
    [1, 9, 750],
    [";", -1],
    [3, "number", e[22], 743],
    [3, "number", e[22], 751,
     0, 751],
    [2, 319, 752, {"name":"ParenTokens"},
     0, 752],
    [1, 9, 753],
    [1, 9, 754],
    ["]", 743],
    [/^\;?/, -1],
    [3, "keyword", e[27], 756,
     0, 758],
    [1, 9, 757],
    [2, 370, 758, {"name":"TemplateArgs"}],
    [1, 9, 759],
    [3, "keyword", e[23], 760,
     3, "keyword", e[20], 760],
    [1, 9, 761],
    [3, "type def", e[18], 762],
    [1, 9, 763],
    [3, "operator", "=", 764,
     0, -1],
    [1, 9, 765],
    [1, 127, -1,
     3, "number", e[22], -1],
    [3, "type qualifier", e[18], 767],
    [1, 716, 768,
     0, 768],
    [1, 9, 769],
    ["::", -1],
    [1, 364, 771,
     2, 571, 772, {"name":"fieldName","token":"property"}],
    [1, 9, 770],
    [1, 9, 773],
    ["(", 774,
     "{", 775],
    [1, 9, 776],
    [1, 9, 777],
    [1, 517, 778],
    [1, 517, 779],
    [1, 9, 780],
    [1, 9, 781],
    [")", -1],
    ["}", -1],
    [0, 783,
     "(", 790],
    [e[61], 784,
     1, 542, 785],
    [1, 9, 783],
    [1, 9, 786],
    ["[", 787,
     0, -1],
    [1, 9, 788],
    ["]", 789],
    [1, 9, 786],
    [1, 9, 791],
    [1, 782, 792],
    [1, 9, 793],
    [")", -1]
  ];
  var start = 0;
  var token = 5;

  var cpp = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", ObjectPattern: "}", EnumBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && brack != ")") { return base }
      return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^else\b/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
  }

  function constructorAhead(line, pos) {
    var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
    return match && match[1] == match[2]
  }

  function localConstructorAhead(line, pos, cx) {
    var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
    if (!ahead) { return false }
    while (cx.name != "Statement") { cx = cx.parent; }
    var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
    return className ? className[1] == ahead[1] : false
  }

  var rawStringOpen = /R"(.*?)\(/g;

  function rawStringContinues(line, pos, cx) {
    rawStringOpen.lastIndex = cx.startPos;
    var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
    return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
  }

  var scopes = ["Block", "FunctionDef"], typeScopes = ["Template"];

  var CppMode = (function (superclass) {
    function CppMode(conf) {
      superclass.call(this, cpp, {
        predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
      });
      this.conf = conf;
    }

    if ( superclass ) CppMode.__proto__ = superclass;
    CppMode.prototype = Object.create( superclass && superclass.prototype );
    CppMode.prototype.constructor = CppMode;

    CppMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (textAfter.charAt(0) == "#") { return 0 }
      return indent(state, textAfter, line, this.conf)
    };

    return CppMode;
  }(CodeMirror.GrammarMode));

  CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
  CppMode.prototype.blockCommentStart = "/*";
  CppMode.prototype.blockCommentEnd = "*/";
  CppMode.prototype.blockCommentContinue = " * ";
  CppMode.prototype.lineComment = "//";
  CppMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
