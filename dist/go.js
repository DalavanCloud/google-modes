(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^const(?![a-zA-Z¡-￿_0-9_])/, /^var(?![a-zA-Z¡-￿_0-9_])/, /^type(?![a-zA-Z¡-￿_0-9_])/, /^import(?![a-zA-Z¡-￿_0-9_])/, /^package(?![a-zA-Z¡-￿_0-9_])/, /^func(?![a-zA-Z¡-￿_0-9_])/, /^go(?![a-zA-Z¡-￿_0-9_])/, /^defer(?![a-zA-Z¡-￿_0-9_])/, /^return(?![a-zA-Z¡-￿_0-9_])/, /^break(?![a-zA-Z¡-￿_0-9_])/, /^continue(?![a-zA-Z¡-￿_0-9_])/, /^default(?![a-zA-Z¡-￿_0-9_])/, /^case(?![a-zA-Z¡-￿_0-9_])/, /^select(?![a-zA-Z¡-￿_0-9_])/, /^goto(?![a-zA-Z¡-￿_0-9_])/, /^fallthrough(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*/, [1, "\n", "\t", " "], /^[a-zA-Z¡-￿_\.]+/, /^\@[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z¡-￿_])/, /^[^]/], /^if(?![a-zA-Z¡-￿_0-9_])/, /^else(?![a-zA-Z¡-￿_0-9_])/, /^switch(?![a-zA-Z¡-￿_0-9_])/, /^for(?![a-zA-Z¡-￿_0-9_])/, /^(?:\!|\+|\-|\*|\^|\&|\<\-)/, /^range(?![a-zA-Z¡-￿_0-9_])/, /^struct(?![a-zA-Z¡-￿_0-9_])/, /^interface(?![a-zA-Z¡-￿_0-9_])/, /^map(?![a-zA-Z¡-￿_0-9_])/, /^chan(?![a-zA-Z¡-￿_0-9_])/, /^(?=\{)/, /^(?:(?:0o|0O)[0-7]+|(?:0x|OX)[0-9a-fA-F]+|(?:[0-9]+(?:\.[0-9]+)?|\.[0-9]+)(?:[eE][\+\-]?[0-9]+)?i?)/, /^(?:true|false|nil|iota)(?![a-zA-Z¡-￿_0-9_])/, /^make(?![a-zA-Z¡-￿_0-9_])/, /^(?:append|cap|close|complex|copy|delete|imag|len|new|panic|print|println|real|recover)(?![a-zA-Z¡-￿_0-9_])/, /^(?:\+\+|\-\-)/, /^(?:(?:\+|\&\^?|\-|\||\*|\^|\/|\<\<?|\>\>?|\%|\=)\=?|\<\-|\=|\:\=|\!\=)/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?=\()/, [1, ";", "\n"], /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\:)/, /^(?:\.\.\.)?/];
  var nodes = [
    [1, 4, 2],
    [/^[^]/, 0],
    [1, 6, 1],
    [3, "keyword", e[9], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[27], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[22], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[1], -1,
     3, "builtin", e[34], -1,
     3, "atom", e[33], -1,
     3, "builtin", e[35], -1,
     3, "operator", e[37], -1,
     3, "operator", e[25], -1,
     3, "operator", e[36], -1,
     3, "number", e[32], -1,
     2, 9, -1, {"name":"string","token":"string"},
     3, "variable", e[16], -1,
     2, 11, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    [/^[ \t]/, 4,
     2, 11, 4, {"name":"comment","token":"comment"},
     [0, /^(?=\n)/, [7, "skippableNewline"]], 5,
     0, -1],
    ["\n", 4],
    [/^[ \t]/, 6,
     2, 11, 6, {"name":"comment","token":"comment"},
     "\n", 6,
     0, 7],
    [2, 16, 8, {"name":"Statement"},
     0, -1],
    [/^[ \t]/, 8,
     2, 11, 8, {"name":"comment","token":"comment"},
     e[39], 8,
     0, 7],
    [/^(?:\'(?:\\.(?:(?!\').)*|.)\'|\"(?:\\.|(?!\").)*\")/, -1,
     "`", 10],
    [[0, /^(?!\`)/, /^[^]/], 10,
     "`", -1],
    [/^\/\*\*(?!\/)/, 12,
     "/*", 15,
     /^\/\/.*/, -1],
    [e[20], 13,
     0, 14],
    [0, 12,
     0, 12],
    [2, 54, 14, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 15,
     "*/", -1],
    [3, "keyword", e[0], 17,
     3, "keyword", e[1], 17,
     3, "keyword", e[2], 19,
     3, "keyword", e[3], 23,
     3, "keyword", e[4], 27,
     2, 65, -1, {"name":"IfStatement"},
     2, 87, -1, {"name":"SwitchStatement"},
     2, 96, -1, {"name":"ForStatement"},
     3, "keyword", e[5], 29,
     3, "keyword", e[6], 31,
     3, "keyword", e[7], 31,
     3, "keyword", e[8], 33,
     3, "keyword", e[9], 35,
     3, "keyword", e[10], 35,
     3, "keyword", e[11], 37,
     3, "keyword", e[12], 38,
     /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\:(?!\=))/, 37,
     2, 108, -1, {"name":"Block"},
     3, "keyword", e[13], 41,
     3, "keyword", e[14], 43,
     3, "keyword", e[15], -1,
     3, "keyword", e[12], 45,
     1, 113, 49],
    [1, 4, 18],
    [1, 124, -1],
    [1, 4, 20],
    [2, 134, -1, {"name":"Set"},
     3, "def", e[16], 21],
    [1, 4, 22],
    [1, 139, -1],
    [1, 4, 24],
    [2, 174, -1, {"name":"Set"},
     ".", 25,
     3, "def", e[16], 25,
     0, 25],
    [1, 4, 26],
    [2, 9, -1, {"name":"string","token":"string"}],
    [1, 4, 28],
    [3, "variable", e[16], -1],
    [1, 4, 30],
    [2, 179, -1, {"name":"FunctionDecl"}],
    [1, 4, 32],
    [1, 113, -1],
    [1, 4, 34],
    [1, 194, -1],
    [1, 4, 36],
    [/^(?:[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*)?/, -1],
    [1, 4, 39],
    [1, 4, 40],
    [":", -1],
    [1, 194, 37],
    [1, 4, 42],
    [2, 108, -1, {"name":"Block"}],
    [1, 4, 44],
    [e[16], -1],
    [1, 4, 46],
    [2, 16, 47, {"name":"Statement"}],
    [1, 4, 48],
    [":", -1],
    [1, 4, 50],
    [",", 51,
     0, -1],
    [1, 4, 52],
    [1, 113, 53],
    [1, 4, 50],
    [3, "tag", /^\@param(?![a-zA-Z¡-￿_])/, 55,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z¡-￿_])/, 56,
     3, "tag", e[19], 63,
     "{", 57],
    [e[17], 55,
     3, "def", e[18], 63,
     "<", 58,
     0, 63],
    [e[17], 56,
     3, "type", e[18], 63,
     0, 63],
    [3, "tag", e[19], 59],
    [3, "type def", /^[a-zA-Z¡-￿_]+/, 60],
    [/^[\t ]*/, 61],
    [">", 63],
    [1, 200, 62],
    ["}", 63],
    [e[20], 64,
     0, -1],
    [0, 63,
     0, 63],
    [3, "keyword", e[21], 66],
    [1, 4, 67],
    [1, 204, 68],
    [1, 4, 69],
    [";", 70,
     0, 72],
    [1, 4, 71],
    [1, 204, 72],
    [1, 4, 73],
    [2, 108, 74, {"name":"Block"}],
    [1, 4, 75],
    [3, "keyword", e[22], 76,
     0, -1],
    [1, 4, 77],
    [3, "keyword", e[21], 78,
     0, 79],
    [1, 4, 80],
    [1, 4, 81],
    [1, 204, 82],
    [2, 108, 83, {"name":"Block"}],
    [1, 4, 84],
    [1, 4, 75],
    [";", 85,
     0, 79],
    [1, 4, 86],
    [1, 204, 79],
    [3, "keyword", e[23], 88],
    [1, 4, 89],
    [1, 204, 90,
     0, 94],
    [1, 4, 91],
    [";", 92,
     0, 94],
    [1, 4, 93],
    [1, 204, 94,
     0, 94],
    [1, 4, 95],
    [2, 108, -1, {"name":"Block"}],
    [3, "keyword", e[24], 97],
    [1, 4, 98],
    [1, 212, 99,
     1, 204, 100,
     0, 106],
    [1, 4, 101],
    [1, 4, 102],
    [1, 204, 100],
    [";", 103,
     0, 106],
    [1, 4, 104],
    [1, 204, 105,
     0, 105],
    [1, 4, 102],
    [1, 4, 107],
    [2, 108, -1, {"name":"Block"}],
    ["{", 109],
    [1, 4, 110],
    [1, 6, 111],
    [1, 4, 112],
    ["}", -1],
    [1, 212, 114,
     0, 116],
    [1, 4, 115],
    [1, 113, -1],
    [3, "operator", e[25], 117,
     3, "keyword", e[26], 117,
     [0, [6, 219], [5, 220]], 118,
     1, 223, 119],
    [1, 4, 116],
    [1, 139, 120],
    [1, 4, 121],
    [1, 4, 122],
    [1, 232, 123,
     2, 241, 123, {"name":"LiteralBody"},
     0, -1],
    [e[31], 119],
    [1, 4, 121],
    [2, 246, -1, {"name":"Set"},
     3, "def", e[16], 125],
    [1, 4, 126],
    [",", 127,
     1, 139, 128,
     0, 128],
    [1, 4, 129],
    [1, 4, 130],
    [3, "def", e[16], 131],
    [3, "operator", "=", 132,
     0, -1],
    [1, 4, 126],
    [1, 4, 133],
    [1, 194, -1],
    ["(", 135],
    [1, 4, 136],
    [1, 251, 137],
    [1, 4, 138],
    [")", -1],
    ["[", 140,
     3, "keyword", e[27], 146,
     3, "keyword", e[28], 148,
     "*", 150,
     3, "keyword", e[5], 152,
     3, "keyword", e[29], 156,
     3, "operator", "<-", 164,
     3, "keyword", e[30], 165,
     "(", 168,
     0, 172],
    [1, 4, 141],
    [1, 113, 142,
     0, 142],
    [1, 4, 143],
    ["]", 144],
    [1, 4, 145],
    [1, 139, -1],
    [1, 4, 147],
    [2, 256, -1, {"name":"StructBody"}],
    [1, 4, 149],
    [2, 261, -1, {"name":"InterfaceBody"}],
    [1, 4, 151],
    [1, 139, -1],
    [1, 4, 153],
    [2, 266, 154, {"name":"ParamList"}],
    [1, 4, 155],
    [2, 266, -1, {"name":"ParamList"},
     1, 139, -1,
     0, -1],
    [1, 4, 157],
    ["[", 158],
    [1, 4, 159],
    [1, 139, 160],
    [1, 4, 161],
    ["]", 162],
    [1, 4, 163],
    [1, 139, -1],
    [1, 4, 166],
    [1, 4, 167],
    [1, 139, -1],
    [3, "operator", "<-", 164,
     0, 164],
    [1, 4, 169],
    [1, 139, 170],
    [1, 4, 171],
    [")", -1],
    [3, "meta", /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*\./, 173,
     3, "type", e[16], -1],
    [1, 4, 172],
    ["(", 175],
    [1, 4, 176],
    [1, 271, 177],
    [1, 4, 178],
    [")", -1],
    ["(", 180,
     0, 186],
    [1, 4, 181],
    [3, "def", e[16], 182],
    [1, 4, 183],
    [1, 139, 184],
    [1, 4, 185],
    [")", 186],
    [1, 4, 187],
    [2, 276, 188, {"name":"funcName"},
     0, 188],
    [1, 4, 189],
    [2, 266, 190, {"name":"ParamList"}],
    [1, 4, 191],
    [2, 266, 192, {"name":"ParamList"},
     1, 139, 192,
     0, 192],
    [1, 4, 193],
    [2, 108, -1, {"name":"Block"},
     0, -1],
    [1, 113, 195,
     0, -1],
    [1, 4, 196],
    [",", 197,
     0, -1],
    [1, 4, 198],
    [1, 113, 199,
     0, 199],
    [1, 4, 196],
    [3, "attribute", "{", 201,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 200,
     "\n", 202,
     0, -1],
    [1, 200, 203],
    [/^[\t ]*(?:\*[\t ]*)?/, 200],
    [/^(?=\*\/)/, 200,
     3, "attribute", "}", 200],
    [1, 212, 205,
     0, 207],
    [1, 4, 206],
    [1, 204, -1],
    [3, "operator", e[25], 208,
     3, "keyword", e[26], 208,
     1, 223, 209],
    [1, 4, 207],
    [1, 4, 210],
    [1, 277, 211,
     0, -1],
    [1, 4, 210],
    [[5, 286], 213],
    [3, "def", e[16], 214],
    [1, 4, 215],
    [",", 216,
     3, "operator", ":=", -1],
    [1, 4, 217],
    [3, "def", e[16], 218],
    [1, 4, 215],
    [3, "keyword", e[5], -1],
    [1, 139, 221],
    [1, 4, 222],
    [e[31], -1],
    [3, "number", e[32], -1,
     2, 9, -1, {"name":"string","token":"string"},
     3, "atom", e[33], -1,
     3, "keyword", e[5], 224,
     3, "builtin", e[34], 226,
     3, "builtin", e[35], -1,
     3, "variable callee", e[38], -1,
     3, "variable", e[16], -1,
     2, 292, 228, {"name":"Bracketed"},
     "*", 230,
     2, 300, -1, {"name":"ParenExpr"}],
    [1, 4, 225],
    [2, 305, -1, {"name":"FunctionExpr"}],
    [1, 4, 227],
    [2, 310, -1, {"name":"TypeList"}],
    [1, 4, 229],
    [1, 139, -1,
     0, -1],
    [1, 4, 231],
    [1, 139, -1],
    [".(", 233,
     ".", 237,
     3, "operator", e[36], -1,
     3, "operator", e[37], 239,
     2, 315, -1, {"name":"ArgList"},
     2, 292, -1, {"name":"Bracketed"}],
    [1, 4, 234],
    [1, 139, 235],
    [1, 4, 236],
    [")", -1],
    [1, 4, 238],
    [3, "property callee", e[38], -1,
     3, "property", e[16], -1],
    [1, 4, 240],
    [1, 113, -1],
    ["{", 242],
    [1, 4, 243],
    [1, 322, 244],
    [1, 4, 245],
    ["}", -1],
    ["(", 247],
    [1, 4, 248],
    [1, 336, 249],
    [1, 4, 250],
    [")", -1],
    [/^[ \t]/, 251,
     2, 11, 251, {"name":"comment","token":"comment"},
     "\n", 251,
     0, 252],
    [3, "def", e[16], 253,
     0, -1],
    [1, 4, 254],
    [1, 139, 255],
    [/^[ \t]/, 255,
     2, 11, 255, {"name":"comment","token":"comment"},
     e[39], 255,
     0, 252],
    ["{", 257],
    [1, 4, 258],
    [1, 348, 259],
    [1, 4, 260],
    ["}", -1],
    ["{", 262],
    [1, 4, 263],
    [1, 361, 264],
    [1, 4, 265],
    ["}", -1],
    ["(", 267],
    [1, 4, 268],
    [1, 368, 269],
    [1, 4, 270],
    [")", -1],
    [/^[ \t]/, 271,
     2, 11, 271, {"name":"comment","token":"comment"},
     "\n", 271,
     0, 272],
    [".", 273,
     3, "def", e[16], 273,
     0, 273,
     0, -1],
    [1, 4, 274],
    [2, 9, 275, {"name":"string","token":"string"}],
    [/^[ \t]/, 275,
     2, 11, 275, {"name":"comment","token":"comment"},
     e[39], 275,
     0, 272],
    [3, "def", e[16], -1],
    [".(", 278,
     ".", 282,
     3, "operator", e[36], -1,
     3, "operator", e[37], 284,
     2, 315, -1, {"name":"ArgList"},
     2, 292, -1, {"name":"Bracketed"}],
    [1, 4, 279],
    [1, 139, 280],
    [1, 4, 281],
    [")", -1],
    [1, 4, 283],
    [3, "property callee", e[38], -1,
     3, "property", e[16], -1],
    [1, 4, 285],
    [1, 204, -1],
    [e[16], 287],
    [1, 4, 288],
    [",", 289,
     ":=", -1],
    [1, 4, 290],
    [e[16], 291],
    [1, 4, 288],
    ["[", 293],
    [1, 4, 294],
    [1, 194, 295],
    [1, 4, 296],
    [":", 297,
     "]", -1],
    [1, 4, 298],
    [1, 113, 299,
     0, 299],
    [1, 4, 296],
    ["(", 301],
    [1, 4, 302],
    [1, 194, 303],
    [1, 4, 304],
    [")", -1],
    [2, 266, 306, {"name":"ParamList"}],
    [1, 4, 307],
    [2, 266, 308, {"name":"ParamList"},
     1, 139, 308,
     0, 308],
    [1, 4, 309],
    [2, 108, -1, {"name":"Block"}],
    ["(", 311],
    [1, 4, 312],
    [1, 392, 313],
    [1, 4, 314],
    [")", -1],
    ["(", 316],
    [1, 4, 317],
    [1, 194, 318],
    [1, 4, 319],
    [e[41], 320],
    [1, 4, 321],
    [")", -1],
    [3, "property", e[40], 323,
     2, 241, 323, {"name":"LiteralBody"},
     1, 113, 323,
     0, -1],
    [1, 4, 324],
    [":", 325,
     0, 326],
    [1, 4, 327],
    [1, 4, 328],
    [2, 241, 326, {"name":"LiteralBody"},
     1, 113, 326],
    [",", 329,
     0, -1],
    [1, 4, 330],
    [3, "property", e[40], 331,
     2, 241, 331, {"name":"LiteralBody"},
     1, 113, 331,
     0, 332],
    [1, 4, 333],
    [1, 4, 328],
    [":", 334,
     0, 332],
    [1, 4, 335],
    [2, 241, 332, {"name":"LiteralBody"},
     1, 113, 332],
    [/^[ \t]/, 336,
     2, 11, 336, {"name":"comment","token":"comment"},
     "\n", 336,
     0, 337],
    [3, "def", e[16], 338,
     0, -1],
    [1, 4, 339],
    [",", 340,
     1, 139, 341,
     0, 341],
    [1, 4, 342],
    [1, 4, 343],
    [3, "def", e[16], 344],
    [3, "operator", "=", 345,
     0, 346],
    [1, 4, 339],
    [1, 4, 347],
    [/^[ \t]/, 346,
     2, 11, 346, {"name":"comment","token":"comment"},
     e[39], 346,
     0, 337],
    [1, 194, 346],
    [/^[ \t]/, 348,
     2, 11, 348, {"name":"comment","token":"comment"},
     "\n", 348,
     0, 349],
    [[5, 398], 350,
     "*", 351,
     0, 351,
     0, -1],
    [3, "def property", e[16], 352],
    [1, 4, 353],
    [1, 4, 354],
    [1, 139, 355],
    [",", 356,
     0, 351],
    [1, 4, 357],
    [1, 4, 358],
    [2, 9, 359, {"name":"string","token":"string"},
     0, 359],
    [3, "def property", e[16], 360],
    [/^[ \t]/, 359,
     2, 11, 359, {"name":"comment","token":"comment"},
     e[39], 359,
     0, 349],
    [1, 4, 354],
    [/^[ \t]/, 361,
     2, 11, 361, {"name":"comment","token":"comment"},
     "\n", 361,
     0, 362],
    [3, "property", /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\()/, 363,
     1, 139, 364,
     0, -1],
    [1, 4, 365],
    [/^[ \t]/, 364,
     2, 11, 364, {"name":"comment","token":"comment"},
     e[39], 364,
     0, 362],
    [2, 266, 366, {"name":"ParamList"}],
    [1, 4, 367],
    [2, 266, 364, {"name":"ParamList"},
     1, 139, 364,
     0, 364],
    [3, "def", e[16], 369,
     0, 370,
     0, -1],
    [1, 4, 371],
    [1, 4, 372],
    [",", 373,
     0, 370],
    [e[41], 374],
    [1, 4, 375],
    [1, 4, 376],
    [3, "def", e[16], 377],
    [1, 139, 378,
     0, 378],
    [1, 4, 371],
    [1, 4, 379],
    [",", 380,
     0, -1],
    [1, 4, 381],
    [3, "def", e[16], 382,
     0, 383,
     0, 384],
    [1, 4, 385],
    [1, 4, 386],
    [1, 4, 379],
    [",", 387,
     0, 383],
    [e[41], 388],
    [1, 4, 389],
    [1, 4, 390],
    [3, "def", e[16], 391],
    [1, 139, 384,
     0, 384],
    [1, 4, 385],
    [1, 139, 393,
     0, -1],
    [1, 4, 394],
    [",", 395,
     0, -1],
    [1, 4, 396],
    [1, 139, 397,
     0, 397],
    [1, 4, 394],
    [e[16], 399],
    [1, 4, 400],
    [/^[a-zA-Z¡-￿__\[\,\*\<\(]/, -1]
  ];
  var start = 0;
  var token = 3;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var scopes = ["Block", "FunctionDecl", "FunctionExpr", "IfStatement", "ForStatement", "SwitchStatement", "InterfaceBody"];
  var allowNewline = ["LiteralBody", "Bracketed", "ArgList", "ParamList", "ParenExpr"];

  function skippableNewline(line, pos, cx) {
    if (cx && allowNewline.indexOf(cx.name) > -1) { return true }
    var match = /(?:(\w+)|[\d"'\)\]\}:]|\+\+|--)\s*(?:\/\/.*)?$/.exec(line.slice(0, pos));
    return !match ||
      (match[1] ? /^(?:func|interface|select|case|defer|go|map|struct|chan|else|goto|package|switch|const|if|range|type|for|import|var)$/.test(match[1]) : false)
  }

  var bracketed = {
    Block: "}", LiteralBody: "}", StructBody: "}", InterfaceBody: "}",
    Bracketed: "]",
    Set: ")", ParamList: ")", ArgList: ")", ParenExpr: ")"
  };

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    if (brack) {
      var closed = textAfter && textAfter.charAt(0) == brack;
      var flat = closed || cx.name == "Block" && /^(case|default)\b/.test(textAfter);
      return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + (flat ? 0 : config.tabSize)
    } else if (cx.name == "Statement") {
      return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + config.tabSize
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  var GoMode = (function (superclass) {
    function GoMode(conf) {
      superclass.call(this, grammar, {
        predicates: {skippableNewline: skippableNewline}
      });
      this.conf = conf;
    }

    if ( superclass ) GoMode.__proto__ = superclass;
    GoMode.prototype = Object.create( superclass && superclass.prototype );
    GoMode.prototype.constructor = GoMode;

    GoMode.prototype.token = function token$$1 (stream, state) {
      return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
    };

    GoMode.prototype.indent = function indent (state, textAfter, line) {
      return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, this.conf)
    };

    return GoMode;
  }(CodeMirror.GrammarMode));

  GoMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
  GoMode.prototype.closeBrackets = "()[]{}''\"\"``";
  GoMode.prototype.blockCommentStart = "/*";
  GoMode.prototype.blockCommentEnd = "*/";
  GoMode.prototype.blockCommentContinue = " * ";
  GoMode.prototype.lineComment = "//";
  GoMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-go", function (conf) { return new GoMode(conf); });

})));
