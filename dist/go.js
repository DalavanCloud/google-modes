(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^const(?![a-zA-Z¡-￿_0-9_])/, /^var(?![a-zA-Z¡-￿_0-9_])/, /^type(?![a-zA-Z¡-￿_0-9_])/, /^import(?![a-zA-Z¡-￿_0-9_])/, /^package(?![a-zA-Z¡-￿_0-9_])/, /^func(?![a-zA-Z¡-￿_0-9_])/, /^go(?![a-zA-Z¡-￿_0-9_])/, /^defer(?![a-zA-Z¡-￿_0-9_])/, /^return(?![a-zA-Z¡-￿_0-9_])/, /^break(?![a-zA-Z¡-￿_0-9_])/, /^continue(?![a-zA-Z¡-￿_0-9_])/, /^default(?![a-zA-Z¡-￿_0-9_])/, /^case(?![a-zA-Z¡-￿_0-9_])/, /^select(?![a-zA-Z¡-￿_0-9_])/, /^goto(?![a-zA-Z¡-￿_0-9_])/, /^fallthrough(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*/, [1, "\n", "\t", " "], /^[a-zA-Z¡-￿_\.]+/, /^\@[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z¡-￿_])/, /^[^]/], /^if(?![a-zA-Z¡-￿_0-9_])/, /^else(?![a-zA-Z¡-￿_0-9_])/, /^switch(?![a-zA-Z¡-￿_0-9_])/, /^for(?![a-zA-Z¡-￿_0-9_])/, /^(?:\!|\+|\-|\*|\^|\&|\<\-)/, /^range(?![a-zA-Z¡-￿_0-9_])/, /^struct(?![a-zA-Z¡-￿_0-9_])/, /^interface(?![a-zA-Z¡-￿_0-9_])/, /^map(?![a-zA-Z¡-￿_0-9_])/, /^chan(?![a-zA-Z¡-￿_0-9_])/, /^(?=\{)/, /^(?:(?:0o|0O)[0-7]+|(?:0x|OX)[0-9a-fA-F]+|(?:[0-9]+(?:\.[0-9]+)?|\.[0-9]+)(?:[eE][\+\-]?[0-9]+)?i?)/, /^(?:true|false|nil|iota)(?![a-zA-Z¡-￿_0-9_])/, /^make(?![a-zA-Z¡-￿_0-9_])/, /^(?:append|cap|close|complex|copy|delete|imag|len|new|panic|print|println|real|recover)(?![a-zA-Z¡-￿_0-9_])/, /^(?:\+\+|\-\-)/, /^(?:(?:\+|\&\^?|\-|\||\*|\^|\/|\<\<?|\>\>?|\%|\=)\=?|\<\-|\=|\:\=|\!\=)/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?=\()/, [1, ";", "\n"], /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\:)/, /^(?:\.\.\.)?/];
  var nodes = [
    [1, 4, 2],
    [/^[^]/, 0],
    [1, 6, 1],
    [3, "keyword", e[9], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[27], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[22], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[1], -1,
     3, "builtin", e[34], -1,
     3, "atom", e[33], -1,
     3, "builtin", e[35], -1,
     3, "operator", e[37], -1,
     3, "operator", e[25], -1,
     3, "operator", e[36], -1,
     3, "number", e[32], -1,
     2, 9, -1, {"name":"string","token":"string"},
     3, "variable", e[16], -1,
     2, 11, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    [/^[ \t]/, 4,
     2, 11, 4, {"name":"comment","token":"comment"},
     [0, /^(?=\n)/, [7, "skippableNewline"]], 5,
     0, -1],
    ["\n", 4],
    [/^[ \t]/, 6,
     2, 11, 6, {"name":"comment","token":"comment"},
     "\n", 6,
     0, 7],
    [2, 16, 8, {"name":"Statement"},
     0, -1],
    [/^[ \t]/, 8,
     2, 11, 8, {"name":"comment","token":"comment"},
     e[39], 8,
     0, 7],
    [/^(?:\'(?:\\.(?:(?!\').)*|.)\'|\"(?:\\.|(?!\").)*\")/, -1,
     "`", 10],
    [[0, /^(?!\`)/, /^[^]/], 10,
     "`", -1],
    [/^\/\*\*(?!\/)/, 12,
     "/*", 15,
     /^\/\/.*/, -1],
    [e[20], 13,
     0, 14],
    [0, 12,
     0, 12],
    [2, 54, 14, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 15,
     "*/", -1],
    [3, "keyword", e[0], 17,
     3, "keyword", e[1], 17,
     3, "keyword", e[2], 19,
     3, "keyword", e[3], 23,
     3, "keyword", e[4], 27,
     2, 62, -1, {"name":"IfStatement"},
     2, 84, -1, {"name":"SwitchStatement"},
     2, 93, -1, {"name":"ForStatement"},
     3, "keyword", e[5], 29,
     3, "keyword", e[6], 31,
     3, "keyword", e[7], 31,
     3, "keyword", e[8], 33,
     3, "keyword", e[9], 35,
     3, "keyword", e[10], 35,
     3, "keyword", e[11], 37,
     3, "keyword", e[12], 38,
     /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\:(?!\=))/, 37,
     2, 105, -1, {"name":"Block"},
     3, "keyword", e[13], 41,
     3, "keyword", e[14], 43,
     3, "keyword", e[15], -1,
     3, "keyword", e[12], 45,
     1, 110, 49],
    [1, 4, 18],
    [1, 121, -1],
    [1, 4, 20],
    [2, 131, -1, {"name":"Set"},
     3, "def", e[16], 21],
    [1, 4, 22],
    [1, 136, -1],
    [1, 4, 24],
    [2, 171, -1, {"name":"Set"},
     ".", 25,
     3, "def", e[16], 25,
     0, 25],
    [1, 4, 26],
    [2, 9, -1, {"name":"string","token":"string"}],
    [1, 4, 28],
    [3, "variable", e[16], -1],
    [1, 4, 30],
    [2, 176, -1, {"name":"FunctionDecl"}],
    [1, 4, 32],
    [1, 110, -1],
    [1, 4, 34],
    [1, 191, -1],
    [1, 4, 36],
    [/^(?:[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*)?/, -1],
    [1, 4, 39],
    [1, 4, 40],
    [":", -1],
    [1, 191, 37],
    [1, 4, 42],
    [2, 105, -1, {"name":"Block"}],
    [1, 4, 44],
    [e[16], -1],
    [1, 4, 46],
    [2, 16, 47, {"name":"Statement"}],
    [1, 4, 48],
    [":", -1],
    [1, 4, 50],
    [",", 51,
     0, -1],
    [1, 4, 52],
    [1, 110, 53],
    [1, 4, 50],
    [3, "tag", /^\@param(?![a-zA-Z¡-￿_])/, 55,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z¡-￿_])/, 56,
     3, "tag", e[19], 60,
     "{", 57],
    [e[17], 55,
     3, "def", e[18], 60,
     0, 60],
    [e[17], 56,
     3, "type", e[18], 60,
     0, 60],
    [3, "tag", e[19], 58],
    [e[17], 58,
     2, 197, 59, {"name":"doccomment.tagContent","token":"attribute"}],
    ["}", 60],
    [e[20], 61,
     0, -1],
    [0, 60,
     0, 60],
    [3, "keyword", e[21], 63],
    [1, 4, 64],
    [1, 198, 65],
    [1, 4, 66],
    [";", 67,
     0, 69],
    [1, 4, 68],
    [1, 198, 69],
    [1, 4, 70],
    [2, 105, 71, {"name":"Block"}],
    [1, 4, 72],
    [3, "keyword", e[22], 73,
     0, -1],
    [1, 4, 74],
    [3, "keyword", e[21], 75,
     0, 76],
    [1, 4, 77],
    [1, 4, 78],
    [1, 198, 79],
    [2, 105, 80, {"name":"Block"}],
    [1, 4, 81],
    [1, 4, 72],
    [";", 82,
     0, 76],
    [1, 4, 83],
    [1, 198, 76],
    [3, "keyword", e[23], 85],
    [1, 4, 86],
    [1, 198, 87,
     0, 91],
    [1, 4, 88],
    [";", 89,
     0, 91],
    [1, 4, 90],
    [1, 198, 91,
     0, 91],
    [1, 4, 92],
    [2, 105, -1, {"name":"Block"}],
    [3, "keyword", e[24], 94],
    [1, 4, 95],
    [1, 206, 96,
     1, 198, 97,
     0, 103],
    [1, 4, 98],
    [1, 4, 99],
    [1, 198, 97],
    [";", 100,
     0, 103],
    [1, 4, 101],
    [1, 198, 102,
     0, 102],
    [1, 4, 99],
    [1, 4, 104],
    [2, 105, -1, {"name":"Block"}],
    ["{", 106],
    [1, 4, 107],
    [1, 6, 108],
    [1, 4, 109],
    ["}", -1],
    [1, 206, 111,
     0, 113],
    [1, 4, 112],
    [1, 110, -1],
    [3, "operator", e[25], 114,
     3, "keyword", e[26], 114,
     [0, [6, 213], [5, 214]], 115,
     1, 217, 116],
    [1, 4, 113],
    [1, 136, 117],
    [1, 4, 118],
    [1, 4, 119],
    [1, 226, 120,
     2, 235, 120, {"name":"LiteralBody"},
     0, -1],
    [e[31], 116],
    [1, 4, 118],
    [2, 240, -1, {"name":"Set"},
     3, "def", e[16], 122],
    [1, 4, 123],
    [",", 124,
     1, 136, 125,
     0, 125],
    [1, 4, 126],
    [1, 4, 127],
    [3, "def", e[16], 128],
    [3, "operator", "=", 129,
     0, -1],
    [1, 4, 123],
    [1, 4, 130],
    [1, 191, -1],
    ["(", 132],
    [1, 4, 133],
    [1, 245, 134],
    [1, 4, 135],
    [")", -1],
    ["[", 137,
     3, "keyword", e[27], 143,
     3, "keyword", e[28], 145,
     "*", 147,
     3, "keyword", e[5], 149,
     3, "keyword", e[29], 153,
     3, "operator", "<-", 161,
     3, "keyword", e[30], 162,
     "(", 165,
     0, 169],
    [1, 4, 138],
    [1, 110, 139,
     0, 139],
    [1, 4, 140],
    ["]", 141],
    [1, 4, 142],
    [1, 136, -1],
    [1, 4, 144],
    [2, 250, -1, {"name":"StructBody"}],
    [1, 4, 146],
    [2, 255, -1, {"name":"InterfaceBody"}],
    [1, 4, 148],
    [1, 136, -1],
    [1, 4, 150],
    [2, 260, 151, {"name":"ParamList"}],
    [1, 4, 152],
    [2, 260, -1, {"name":"ParamList"},
     1, 136, -1,
     0, -1],
    [1, 4, 154],
    ["[", 155],
    [1, 4, 156],
    [1, 136, 157],
    [1, 4, 158],
    ["]", 159],
    [1, 4, 160],
    [1, 136, -1],
    [1, 4, 163],
    [1, 4, 164],
    [1, 136, -1],
    [3, "operator", "<-", 161,
     0, 161],
    [1, 4, 166],
    [1, 136, 167],
    [1, 4, 168],
    [")", -1],
    [3, "meta", /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*\./, 170,
     3, "type", e[16], -1],
    [1, 4, 169],
    ["(", 172],
    [1, 4, 173],
    [1, 265, 174],
    [1, 4, 175],
    [")", -1],
    ["(", 177,
     0, 183],
    [1, 4, 178],
    [3, "def", e[16], 179],
    [1, 4, 180],
    [1, 136, 181],
    [1, 4, 182],
    [")", 183],
    [1, 4, 184],
    [2, 270, 185, {"name":"funcName"},
     0, 185],
    [1, 4, 186],
    [2, 260, 187, {"name":"ParamList"}],
    [1, 4, 188],
    [2, 260, 189, {"name":"ParamList"},
     1, 136, 189,
     0, 189],
    [1, 4, 190],
    [2, 105, -1, {"name":"Block"},
     0, -1],
    [1, 110, 192,
     0, -1],
    [1, 4, 193],
    [",", 194,
     0, -1],
    [1, 4, 195],
    [1, 110, 196,
     0, 196],
    [1, 4, 193],
    [1, 271, -1],
    [1, 206, 199,
     0, 201],
    [1, 4, 200],
    [1, 198, -1],
    [3, "operator", e[25], 202,
     3, "keyword", e[26], 202,
     1, 217, 203],
    [1, 4, 201],
    [1, 4, 204],
    [1, 275, 205,
     0, -1],
    [1, 4, 204],
    [[5, 284], 207],
    [3, "def", e[16], 208],
    [1, 4, 209],
    [",", 210,
     3, "operator", ":=", -1],
    [1, 4, 211],
    [3, "def", e[16], 212],
    [1, 4, 209],
    [3, "keyword", e[5], -1],
    [1, 136, 215],
    [1, 4, 216],
    [e[31], -1],
    [3, "number", e[32], -1,
     2, 9, -1, {"name":"string","token":"string"},
     3, "atom", e[33], -1,
     3, "keyword", e[5], 218,
     3, "builtin", e[34], 220,
     3, "builtin", e[35], -1,
     3, "variable callee", e[38], -1,
     3, "variable", e[16], -1,
     2, 290, 222, {"name":"Bracketed"},
     "*", 224,
     2, 298, -1, {"name":"ParenExpr"}],
    [1, 4, 219],
    [2, 303, -1, {"name":"FunctionExpr"}],
    [1, 4, 221],
    [2, 308, -1, {"name":"TypeList"}],
    [1, 4, 223],
    [1, 136, -1,
     0, -1],
    [1, 4, 225],
    [1, 136, -1],
    [".(", 227,
     ".", 231,
     3, "operator", e[36], -1,
     3, "operator", e[37], 233,
     2, 313, -1, {"name":"ArgList"},
     2, 290, -1, {"name":"Bracketed"}],
    [1, 4, 228],
    [1, 136, 229],
    [1, 4, 230],
    [")", -1],
    [1, 4, 232],
    [3, "property callee", e[38], -1,
     3, "property", e[16], -1],
    [1, 4, 234],
    [1, 110, -1],
    ["{", 236],
    [1, 4, 237],
    [1, 320, 238],
    [1, 4, 239],
    ["}", -1],
    ["(", 241],
    [1, 4, 242],
    [1, 334, 243],
    [1, 4, 244],
    [")", -1],
    [/^[ \t]/, 245,
     2, 11, 245, {"name":"comment","token":"comment"},
     "\n", 245,
     0, 246],
    [3, "def", e[16], 247,
     0, -1],
    [1, 4, 248],
    [1, 136, 249],
    [/^[ \t]/, 249,
     2, 11, 249, {"name":"comment","token":"comment"},
     e[39], 249,
     0, 246],
    ["{", 251],
    [1, 4, 252],
    [1, 346, 253],
    [1, 4, 254],
    ["}", -1],
    ["{", 256],
    [1, 4, 257],
    [1, 359, 258],
    [1, 4, 259],
    ["}", -1],
    ["(", 261],
    [1, 4, 262],
    [1, 366, 263],
    [1, 4, 264],
    [")", -1],
    [/^[ \t]/, 265,
     2, 11, 265, {"name":"comment","token":"comment"},
     "\n", 265,
     0, 266],
    [".", 267,
     3, "def", e[16], 267,
     0, 267,
     0, -1],
    [1, 4, 268],
    [2, 9, 269, {"name":"string","token":"string"}],
    [/^[ \t]/, 269,
     2, 11, 269, {"name":"comment","token":"comment"},
     e[39], 269,
     0, 266],
    [3, "def", e[16], -1],
    [/^(?!\}|\*\/)/, 272,
     0, -1],
    ["{", 273,
     /^[^]/, 271],
    [1, 271, 274],
    [/^\}?/, 271],
    [".(", 276,
     ".", 280,
     3, "operator", e[36], -1,
     3, "operator", e[37], 282,
     2, 313, -1, {"name":"ArgList"},
     2, 290, -1, {"name":"Bracketed"}],
    [1, 4, 277],
    [1, 136, 278],
    [1, 4, 279],
    [")", -1],
    [1, 4, 281],
    [3, "property callee", e[38], -1,
     3, "property", e[16], -1],
    [1, 4, 283],
    [1, 198, -1],
    [e[16], 285],
    [1, 4, 286],
    [",", 287,
     ":=", -1],
    [1, 4, 288],
    [e[16], 289],
    [1, 4, 286],
    ["[", 291],
    [1, 4, 292],
    [1, 191, 293],
    [1, 4, 294],
    [":", 295,
     "]", -1],
    [1, 4, 296],
    [1, 110, 297,
     0, 297],
    [1, 4, 294],
    ["(", 299],
    [1, 4, 300],
    [1, 191, 301],
    [1, 4, 302],
    [")", -1],
    [2, 260, 304, {"name":"ParamList"}],
    [1, 4, 305],
    [2, 260, 306, {"name":"ParamList"},
     1, 136, 306,
     0, 306],
    [1, 4, 307],
    [2, 105, -1, {"name":"Block"}],
    ["(", 309],
    [1, 4, 310],
    [1, 390, 311],
    [1, 4, 312],
    [")", -1],
    ["(", 314],
    [1, 4, 315],
    [1, 191, 316],
    [1, 4, 317],
    [e[41], 318],
    [1, 4, 319],
    [")", -1],
    [3, "property", e[40], 321,
     2, 235, 321, {"name":"LiteralBody"},
     1, 110, 321,
     0, -1],
    [1, 4, 322],
    [":", 323,
     0, 324],
    [1, 4, 325],
    [1, 4, 326],
    [2, 235, 324, {"name":"LiteralBody"},
     1, 110, 324],
    [",", 327,
     0, -1],
    [1, 4, 328],
    [3, "property", e[40], 329,
     2, 235, 329, {"name":"LiteralBody"},
     1, 110, 329,
     0, 330],
    [1, 4, 331],
    [1, 4, 326],
    [":", 332,
     0, 330],
    [1, 4, 333],
    [2, 235, 330, {"name":"LiteralBody"},
     1, 110, 330],
    [/^[ \t]/, 334,
     2, 11, 334, {"name":"comment","token":"comment"},
     "\n", 334,
     0, 335],
    [3, "def", e[16], 336,
     0, -1],
    [1, 4, 337],
    [",", 338,
     1, 136, 339,
     0, 339],
    [1, 4, 340],
    [1, 4, 341],
    [3, "def", e[16], 342],
    [3, "operator", "=", 343,
     0, 344],
    [1, 4, 337],
    [1, 4, 345],
    [/^[ \t]/, 344,
     2, 11, 344, {"name":"comment","token":"comment"},
     e[39], 344,
     0, 335],
    [1, 191, 344],
    [/^[ \t]/, 346,
     2, 11, 346, {"name":"comment","token":"comment"},
     "\n", 346,
     0, 347],
    [[5, 396], 348,
     "*", 349,
     0, 349,
     0, -1],
    [3, "def property", e[16], 350],
    [1, 4, 351],
    [1, 4, 352],
    [1, 136, 353],
    [",", 354,
     0, 349],
    [1, 4, 355],
    [1, 4, 356],
    [2, 9, 357, {"name":"string","token":"string"},
     0, 357],
    [3, "def property", e[16], 358],
    [/^[ \t]/, 357,
     2, 11, 357, {"name":"comment","token":"comment"},
     e[39], 357,
     0, 347],
    [1, 4, 352],
    [/^[ \t]/, 359,
     2, 11, 359, {"name":"comment","token":"comment"},
     "\n", 359,
     0, 360],
    [3, "property", /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\()/, 361,
     1, 136, 362,
     0, -1],
    [1, 4, 363],
    [/^[ \t]/, 362,
     2, 11, 362, {"name":"comment","token":"comment"},
     e[39], 362,
     0, 360],
    [2, 260, 364, {"name":"ParamList"}],
    [1, 4, 365],
    [2, 260, 362, {"name":"ParamList"},
     1, 136, 362,
     0, 362],
    [3, "def", e[16], 367,
     0, 368,
     0, -1],
    [1, 4, 369],
    [1, 4, 370],
    [",", 371,
     0, 368],
    [e[41], 372],
    [1, 4, 373],
    [1, 4, 374],
    [3, "def", e[16], 375],
    [1, 136, 376,
     0, 376],
    [1, 4, 369],
    [1, 4, 377],
    [",", 378,
     0, -1],
    [1, 4, 379],
    [3, "def", e[16], 380,
     0, 381,
     0, 382],
    [1, 4, 383],
    [1, 4, 384],
    [1, 4, 377],
    [",", 385,
     0, 381],
    [e[41], 386],
    [1, 4, 387],
    [1, 4, 388],
    [3, "def", e[16], 389],
    [1, 136, 382,
     0, 382],
    [1, 4, 383],
    [1, 136, 391,
     0, -1],
    [1, 4, 392],
    [",", 393,
     0, -1],
    [1, 4, 394],
    [1, 136, 395,
     0, 395],
    [1, 4, 392],
    [e[16], 397],
    [1, 4, 398],
    [/^[a-zA-Z¡-￿__\[\,\*\<\(]/, -1]
  ];
  var start = 0;
  var token = 3;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state, once) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (once && scope.locals.indexOf(name) > -1)
          { return "variable-2" }
        scope.locals.push(name);
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var scopes = ["Block", "FunctionDecl", "FunctionExpr", "IfStatement", "ForStatement", "SwitchStatement", "InterfaceBody"];
  var allowNewline = ["LiteralBody", "Bracketed", "ArgList", "ParamList", "ParenExpr"];

  function skippableNewline(line, pos, cx) {
    if (cx && allowNewline.indexOf(cx.name) > -1) { return true }
    var match = /(?:(\w+)|[\d"'\)\]\}:]|\+\+|--)\s*(?:\/\/.*)?$/.exec(line.slice(0, pos));
    return !match ||
      (match[1] ? /^(?:func|interface|select|case|defer|go|map|struct|chan|else|goto|package|switch|const|if|range|type|for|import|var)$/.test(match[1]) : false)
  }

  var bracketed = {
    Block: "}", LiteralBody: "}", StructBody: "}", InterfaceBody: "}",
    Bracketed: "]",
    Set: ")", ParamList: ")", ArgList: ")", ParenExpr: ")"
  };

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    if (brack) {
      var closed = textAfter && textAfter.charAt(0) == brack;
      var flat = closed || cx.name == "Block" && /^(case|default)\b/.test(textAfter);
      return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + (flat ? 0 : config.tabSize)
    } else if (cx.name == "Statement") {
      return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + (inside ? config.tabSize : 0)
    } else {
      return findIndent(cx.parent, textAfter, inside, config)
    }
  }

  var GoMode = (function (superclass) {
    function GoMode(conf) {
      superclass.call(this, grammar, {
        predicates: {skippableNewline: skippableNewline}
      });
      this.conf = conf;
    }

    if ( superclass ) GoMode.__proto__ = superclass;
    GoMode.prototype = Object.create( superclass && superclass.prototype );
    GoMode.prototype.constructor = GoMode;

    GoMode.prototype.token = function token$$1 (stream, state) {
      return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
    };

    GoMode.prototype.indent = function indent (state, textAfter, line) {
      return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, this.conf)
    };

    return GoMode;
  }(CodeMirror.GrammarMode));

  GoMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
  GoMode.prototype.closeBrackets = "()[]{}''\"\"``";
  GoMode.prototype.blockCommentStart = "/*";
  GoMode.prototype.blockCommentEnd = "*/";
  GoMode.prototype.blockCommentContinue = " * ";
  GoMode.prototype.lineComment = "//";
  GoMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-go", function (conf) { return new GoMode(conf); });

})));
