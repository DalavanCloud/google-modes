(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^const(?![a-zA-Z¡-￿_0-9_])/, /^var(?![a-zA-Z¡-￿_0-9_])/, /^type(?![a-zA-Z¡-￿_0-9_])/, /^import(?![a-zA-Z¡-￿_0-9_])/, /^package(?![a-zA-Z¡-￿_0-9_])/, /^func(?![a-zA-Z¡-￿_0-9_])/, /^go(?![a-zA-Z¡-￿_0-9_])/, /^defer(?![a-zA-Z¡-￿_0-9_])/, /^return(?![a-zA-Z¡-￿_0-9_])/, /^break(?![a-zA-Z¡-￿_0-9_])/, /^continue(?![a-zA-Z¡-￿_0-9_])/, /^default(?![a-zA-Z¡-￿_0-9_])/, /^case(?![a-zA-Z¡-￿_0-9_])/, /^select(?![a-zA-Z¡-￿_0-9_])/, /^goto(?![a-zA-Z¡-￿_0-9_])/, /^fallthrough(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*/, [0, /^(?!\*\/|\{?\@[a-zA-Z¡-￿_])/, /^[^]/], /^if(?![a-zA-Z¡-￿_0-9_])/, /^else(?![a-zA-Z¡-￿_0-9_])/, /^switch(?![a-zA-Z¡-￿_0-9_])/, /^for(?![a-zA-Z¡-￿_0-9_])/, /^(?:\!|\+|\-|\*|\^|\&|\<\-)/, /^range(?![a-zA-Z¡-￿_0-9_])/, /^struct(?![a-zA-Z¡-￿_0-9_])/, /^interface(?![a-zA-Z¡-￿_0-9_])/, /^map(?![a-zA-Z¡-￿_0-9_])/, /^chan(?![a-zA-Z¡-￿_0-9_])/, /^\@[a-zA-Z¡-￿_]+/, [1, "\n", "\t", " "], /^(?=\{)/, /^(?:(?:0o|0O)[0-7]+|(?:0x|OX)[0-9a-fA-F]+|(?:[0-9]+(?:\.[0-9]+)?|\.[0-9]+)(?:[eE][\+\-]?[0-9]+)?i?)/, /^(?:true|false|nil|iota)(?![a-zA-Z¡-￿_0-9_])/, /^make(?![a-zA-Z¡-￿_0-9_])/, /^(?:append|cap|close|complex|copy|delete|imag|len|new|panic|print|println|real|recover)(?![a-zA-Z¡-￿_0-9_])/, /^(?:\+\+|\-\-)/, /^(?:(?:\+|\&\^?|\-|\||\*|\^|\/|\<\<?|\>\>?|\%|\=)\=?|\<\-|\=|\:\=|\!\=)/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?=\()/, [1, ";", "\n"], /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\:)/, /^(?:\.\.\.)?/];
  var nodes = [
    [1, 4, 2],
    [/^[^]/, 0],
    [1, 6, 1],
    [3, "keyword", e[9], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[27], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[1], -1,
     3, "builtin", e[33], -1,
     3, "atom", e[32], -1,
     3, "builtin", e[34], -1,
     3, "operator", e[36], -1,
     3, "operator", e[22], -1,
     3, "operator", e[35], -1,
     3, "number", e[31], -1,
     2, 9, -1, {"name":"string","token":"string"},
     3, "variable", e[16], -1,
     2, 11, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    [/^[ \t]/, 4,
     2, 11, 4, {"name":"comment","token":"comment"},
     [0, /^(?=\n)/, [7, "skippableNewline"]], 5,
     0, -1],
    ["\n", 4],
    [/^[ \t]/, 6,
     2, 11, 6, {"name":"comment","token":"comment"},
     "\n", 6,
     0, 7],
    [2, 16, 8, {"name":"Statement"},
     0, -1],
    [/^[ \t]/, 8,
     2, 11, 8, {"name":"comment","token":"comment"},
     e[38], 8,
     0, 7],
    [/^(?:\'(?:\\.(?:(?!\').)*|.)\'|\"(?:\\.|(?!\").)*\")/, -1,
     "`", 10],
    [[0, /^(?!\`)/, /^[^]/], 10,
     "`", -1],
    [/^\/\*\*(?!\/)/, 12,
     "/*", 15,
     /^\/\/.*/, -1],
    [e[17], 13,
     0, 14],
    [0, 12,
     0, 12],
    [2, 54, 14, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 15,
     "*/", -1],
    [3, "keyword", e[0], 17,
     3, "keyword", e[1], 17,
     3, "keyword", e[2], 19,
     3, "keyword", e[3], 23,
     3, "keyword", e[4], 27,
     2, 58, -1, {"name":"IfStatement"},
     2, 80, -1, {"name":"SwitchStatement"},
     2, 89, -1, {"name":"ForStatement"},
     3, "keyword", e[5], 29,
     3, "keyword", e[6], 31,
     3, "keyword", e[7], 31,
     3, "keyword", e[8], 33,
     3, "keyword", e[9], 35,
     3, "keyword", e[10], 35,
     3, "keyword", e[11], 37,
     3, "keyword", e[12], 38,
     /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\:(?!\=))/, 37,
     2, 101, -1, {"name":"Block"},
     3, "keyword", e[13], 41,
     3, "keyword", e[14], 43,
     3, "keyword", e[15], -1,
     3, "keyword", e[12], 45,
     1, 106, 49],
    [1, 4, 18],
    [1, 117, -1],
    [1, 4, 20],
    [2, 127, -1, {"name":"Set"},
     3, "def", e[16], 21],
    [1, 4, 22],
    [1, 132, -1],
    [1, 4, 24],
    [2, 167, -1, {"name":"Set"},
     ".", 25,
     3, "def", e[16], 25,
     0, 25],
    [1, 4, 26],
    [2, 9, -1, {"name":"string","token":"string"}],
    [1, 4, 28],
    [3, "variable", e[16], -1],
    [1, 4, 30],
    [2, 172, -1, {"name":"FunctionDecl"}],
    [1, 4, 32],
    [1, 106, -1],
    [1, 4, 34],
    [1, 187, -1],
    [1, 4, 36],
    [/^(?:[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*)?/, -1],
    [1, 4, 39],
    [1, 4, 40],
    [":", -1],
    [1, 187, 37],
    [1, 4, 42],
    [2, 101, -1, {"name":"Block"}],
    [1, 4, 44],
    [e[16], -1],
    [1, 4, 46],
    [2, 16, 47, {"name":"Statement"}],
    [1, 4, 48],
    [":", -1],
    [1, 4, 50],
    [",", 51,
     0, -1],
    [1, 4, 52],
    [1, 106, 53],
    [1, 4, 50],
    [3, "tag", /^\@(?:param|throws|exception)(?![a-zA-Z¡-￿_])/, 55,
     3, "tag", e[28], 56,
     2, 193, 56, {"name":"doccomment.braced"}],
    [e[29], 55,
     3, "def", /^[a-zA-Z¡-￿_\.]+/, 56,
     0, 56],
    [e[17], 57,
     0, -1],
    [0, 56,
     0, 56],
    [3, "keyword", e[18], 59],
    [1, 4, 60],
    [1, 197, 61],
    [1, 4, 62],
    [";", 63,
     0, 65],
    [1, 4, 64],
    [1, 197, 65],
    [1, 4, 66],
    [2, 101, 67, {"name":"Block"}],
    [1, 4, 68],
    [3, "keyword", e[19], 69,
     0, -1],
    [1, 4, 70],
    [3, "keyword", e[18], 71,
     0, 72],
    [1, 4, 73],
    [1, 4, 74],
    [1, 197, 75],
    [2, 101, 76, {"name":"Block"}],
    [1, 4, 77],
    [1, 4, 68],
    [";", 78,
     0, 72],
    [1, 4, 79],
    [1, 197, 72],
    [3, "keyword", e[20], 81],
    [1, 4, 82],
    [1, 197, 83,
     0, 87],
    [1, 4, 84],
    [";", 85,
     0, 87],
    [1, 4, 86],
    [1, 197, 87,
     0, 87],
    [1, 4, 88],
    [2, 101, -1, {"name":"Block"}],
    [3, "keyword", e[21], 90],
    [1, 4, 91],
    [1, 205, 92,
     1, 197, 93,
     0, 99],
    [1, 4, 94],
    [1, 4, 95],
    [1, 197, 93],
    [";", 96,
     0, 99],
    [1, 4, 97],
    [1, 197, 98,
     0, 98],
    [1, 4, 95],
    [1, 4, 100],
    [2, 101, -1, {"name":"Block"}],
    ["{", 102],
    [1, 4, 103],
    [1, 6, 104],
    [1, 4, 105],
    ["}", -1],
    [1, 205, 107,
     0, 109],
    [1, 4, 108],
    [1, 106, -1],
    [3, "operator", e[22], 110,
     3, "keyword", e[23], 110,
     [0, [6, 212], [5, 213]], 111,
     1, 216, 112],
    [1, 4, 109],
    [1, 132, 113],
    [1, 4, 114],
    [1, 4, 115],
    [1, 225, 116,
     2, 234, 116, {"name":"LiteralBody"},
     0, -1],
    [e[30], 112],
    [1, 4, 114],
    [2, 239, -1, {"name":"Set"},
     3, "def", e[16], 118],
    [1, 4, 119],
    [",", 120,
     1, 132, 121,
     0, 121],
    [1, 4, 122],
    [1, 4, 123],
    [3, "def", e[16], 124],
    [3, "operator", "=", 125,
     0, -1],
    [1, 4, 119],
    [1, 4, 126],
    [1, 187, -1],
    ["(", 128],
    [1, 4, 129],
    [1, 244, 130],
    [1, 4, 131],
    [")", -1],
    ["[", 133,
     3, "keyword", e[24], 139,
     3, "keyword", e[25], 141,
     "*", 143,
     3, "keyword", e[5], 145,
     3, "keyword", e[26], 149,
     3, "operator", "<-", 157,
     3, "keyword", e[27], 158,
     "(", 161,
     0, 165],
    [1, 4, 134],
    [1, 106, 135,
     0, 135],
    [1, 4, 136],
    ["]", 137],
    [1, 4, 138],
    [1, 132, -1],
    [1, 4, 140],
    [2, 249, -1, {"name":"StructBody"}],
    [1, 4, 142],
    [2, 254, -1, {"name":"InterfaceBody"}],
    [1, 4, 144],
    [1, 132, -1],
    [1, 4, 146],
    [2, 259, 147, {"name":"ParamList"}],
    [1, 4, 148],
    [2, 259, -1, {"name":"ParamList"},
     1, 132, -1,
     0, -1],
    [1, 4, 150],
    ["[", 151],
    [1, 4, 152],
    [1, 132, 153],
    [1, 4, 154],
    ["]", 155],
    [1, 4, 156],
    [1, 132, -1],
    [1, 4, 159],
    [1, 4, 160],
    [1, 132, -1],
    [3, "operator", "<-", 157,
     0, 157],
    [1, 4, 162],
    [1, 132, 163],
    [1, 4, 164],
    [")", -1],
    [3, "meta", /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*\./, 166,
     3, "type", e[16], -1],
    [1, 4, 165],
    ["(", 168],
    [1, 4, 169],
    [1, 264, 170],
    [1, 4, 171],
    [")", -1],
    ["(", 173,
     0, 179],
    [1, 4, 174],
    [3, "def", e[16], 175],
    [1, 4, 176],
    [1, 132, 177],
    [1, 4, 178],
    [")", 179],
    [1, 4, 180],
    [2, 269, 181, {"name":"funcName"},
     0, 181],
    [1, 4, 182],
    [2, 259, 183, {"name":"ParamList"}],
    [1, 4, 184],
    [2, 259, 185, {"name":"ParamList"},
     1, 132, 185,
     0, 185],
    [1, 4, 186],
    [2, 101, -1, {"name":"Block"},
     0, -1],
    [1, 106, 188,
     0, -1],
    [1, 4, 189],
    [",", 190,
     0, -1],
    [1, 4, 191],
    [1, 106, 192,
     0, 192],
    [1, 4, 189],
    ["{", 194],
    [3, "tag", e[28], 195],
    [e[29], 195,
     2, 270, 196, {"name":"doccomment.tagContent","token":"attribute"}],
    ["}", -1],
    [1, 205, 198,
     0, 200],
    [1, 4, 199],
    [1, 197, -1],
    [3, "operator", e[22], 201,
     3, "keyword", e[23], 201,
     1, 216, 202],
    [1, 4, 200],
    [1, 4, 203],
    [1, 271, 204,
     0, -1],
    [1, 4, 203],
    [[5, 280], 206],
    [3, "def", e[16], 207],
    [1, 4, 208],
    [",", 209,
     3, "operator", ":=", -1],
    [1, 4, 210],
    [3, "def", e[16], 211],
    [1, 4, 208],
    [3, "keyword", e[5], -1],
    [1, 132, 214],
    [1, 4, 215],
    [e[30], -1],
    [3, "number", e[31], -1,
     2, 9, -1, {"name":"string","token":"string"},
     3, "atom", e[32], -1,
     3, "keyword", e[5], 217,
     3, "builtin", e[33], 219,
     3, "builtin", e[34], -1,
     3, "variable callee", e[37], -1,
     3, "variable", e[16], -1,
     2, 286, 221, {"name":"Bracketed"},
     "*", 223,
     2, 294, -1, {"name":"ParenExpr"}],
    [1, 4, 218],
    [2, 299, -1, {"name":"FunctionExpr"}],
    [1, 4, 220],
    [2, 304, -1, {"name":"TypeList"}],
    [1, 4, 222],
    [1, 132, -1,
     0, -1],
    [1, 4, 224],
    [1, 132, -1],
    [".(", 226,
     ".", 230,
     3, "operator", e[35], -1,
     3, "operator", e[36], 232,
     2, 309, -1, {"name":"ArgList"},
     2, 286, -1, {"name":"Bracketed"}],
    [1, 4, 227],
    [1, 132, 228],
    [1, 4, 229],
    [")", -1],
    [1, 4, 231],
    [3, "property callee", e[37], -1,
     3, "property", e[16], -1],
    [1, 4, 233],
    [1, 106, -1],
    ["{", 235],
    [1, 4, 236],
    [1, 316, 237],
    [1, 4, 238],
    ["}", -1],
    ["(", 240],
    [1, 4, 241],
    [1, 330, 242],
    [1, 4, 243],
    [")", -1],
    [/^[ \t]/, 244,
     2, 11, 244, {"name":"comment","token":"comment"},
     "\n", 244,
     0, 245],
    [3, "def", e[16], 246,
     0, -1],
    [1, 4, 247],
    [1, 132, 248],
    [/^[ \t]/, 248,
     2, 11, 248, {"name":"comment","token":"comment"},
     e[38], 248,
     0, 245],
    ["{", 250],
    [1, 4, 251],
    [1, 342, 252],
    [1, 4, 253],
    ["}", -1],
    ["{", 255],
    [1, 4, 256],
    [1, 355, 257],
    [1, 4, 258],
    ["}", -1],
    ["(", 260],
    [1, 4, 261],
    [1, 362, 262],
    [1, 4, 263],
    [")", -1],
    [/^[ \t]/, 264,
     2, 11, 264, {"name":"comment","token":"comment"},
     "\n", 264,
     0, 265],
    [".", 266,
     3, "def", e[16], 266,
     0, 266,
     0, -1],
    [1, 4, 267],
    [2, 9, 268, {"name":"string","token":"string"}],
    [/^[ \t]/, 268,
     2, 11, 268, {"name":"comment","token":"comment"},
     e[38], 268,
     0, 265],
    [3, "def", e[16], -1],
    [1, 386, -1],
    [".(", 272,
     ".", 276,
     3, "operator", e[35], -1,
     3, "operator", e[36], 278,
     2, 309, -1, {"name":"ArgList"},
     2, 286, -1, {"name":"Bracketed"}],
    [1, 4, 273],
    [1, 132, 274],
    [1, 4, 275],
    [")", -1],
    [1, 4, 277],
    [3, "property callee", e[37], -1,
     3, "property", e[16], -1],
    [1, 4, 279],
    [1, 197, -1],
    [e[16], 281],
    [1, 4, 282],
    [",", 283,
     ":=", -1],
    [1, 4, 284],
    [e[16], 285],
    [1, 4, 282],
    ["[", 287],
    [1, 4, 288],
    [1, 187, 289],
    [1, 4, 290],
    [":", 291,
     "]", -1],
    [1, 4, 292],
    [1, 106, 293,
     0, 293],
    [1, 4, 290],
    ["(", 295],
    [1, 4, 296],
    [1, 187, 297],
    [1, 4, 298],
    [")", -1],
    [2, 259, 300, {"name":"ParamList"}],
    [1, 4, 301],
    [2, 259, 302, {"name":"ParamList"},
     1, 132, 302,
     0, 302],
    [1, 4, 303],
    [2, 101, -1, {"name":"Block"}],
    ["(", 305],
    [1, 4, 306],
    [1, 390, 307],
    [1, 4, 308],
    [")", -1],
    ["(", 310],
    [1, 4, 311],
    [1, 187, 312],
    [1, 4, 313],
    [e[40], 314],
    [1, 4, 315],
    [")", -1],
    [3, "property", e[39], 317,
     2, 234, 317, {"name":"LiteralBody"},
     1, 106, 317,
     0, -1],
    [1, 4, 318],
    [":", 319,
     0, 320],
    [1, 4, 321],
    [1, 4, 322],
    [2, 234, 320, {"name":"LiteralBody"},
     1, 106, 320],
    [",", 323,
     0, -1],
    [1, 4, 324],
    [3, "property", e[39], 325,
     2, 234, 325, {"name":"LiteralBody"},
     1, 106, 325,
     0, 326],
    [1, 4, 327],
    [1, 4, 322],
    [":", 328,
     0, 326],
    [1, 4, 329],
    [2, 234, 326, {"name":"LiteralBody"},
     1, 106, 326],
    [/^[ \t]/, 330,
     2, 11, 330, {"name":"comment","token":"comment"},
     "\n", 330,
     0, 331],
    [3, "def", e[16], 332,
     0, -1],
    [1, 4, 333],
    [",", 334,
     1, 132, 335,
     0, 335],
    [1, 4, 336],
    [1, 4, 337],
    [3, "def", e[16], 338],
    [3, "operator", "=", 339,
     0, 340],
    [1, 4, 333],
    [1, 4, 341],
    [/^[ \t]/, 340,
     2, 11, 340, {"name":"comment","token":"comment"},
     e[38], 340,
     0, 331],
    [1, 187, 340],
    [/^[ \t]/, 342,
     2, 11, 342, {"name":"comment","token":"comment"},
     "\n", 342,
     0, 343],
    [[5, 396], 344,
     "*", 345,
     0, 345,
     0, -1],
    [3, "def property", e[16], 346],
    [1, 4, 347],
    [1, 4, 348],
    [1, 132, 349],
    [",", 350,
     0, 345],
    [1, 4, 351],
    [1, 4, 352],
    [2, 9, 353, {"name":"string","token":"string"},
     0, 353],
    [3, "def property", e[16], 354],
    [/^[ \t]/, 353,
     2, 11, 353, {"name":"comment","token":"comment"},
     e[38], 353,
     0, 343],
    [1, 4, 348],
    [/^[ \t]/, 355,
     2, 11, 355, {"name":"comment","token":"comment"},
     "\n", 355,
     0, 356],
    [3, "property", /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\()/, 357,
     1, 132, 358,
     0, -1],
    [1, 4, 359],
    [/^[ \t]/, 358,
     2, 11, 358, {"name":"comment","token":"comment"},
     e[38], 358,
     0, 356],
    [2, 259, 360, {"name":"ParamList"}],
    [1, 4, 361],
    [2, 259, 358, {"name":"ParamList"},
     1, 132, 358,
     0, 358],
    [3, "def", e[16], 363,
     0, 364,
     0, -1],
    [1, 4, 365],
    [1, 4, 366],
    [",", 367,
     0, 364],
    [e[40], 368],
    [1, 4, 369],
    [1, 4, 370],
    [3, "def", e[16], 371],
    [1, 132, 372,
     0, 372],
    [1, 4, 365],
    [1, 4, 373],
    [",", 374,
     0, -1],
    [1, 4, 375],
    [3, "def", e[16], 376,
     0, 377,
     0, 378],
    [1, 4, 379],
    [1, 4, 380],
    [1, 4, 373],
    [",", 381,
     0, 377],
    [e[40], 382],
    [1, 4, 383],
    [1, 4, 384],
    [3, "def", e[16], 385],
    [1, 132, 378,
     0, 378],
    [1, 4, 379],
    [/^(?!\}|\*\/)/, 387,
     0, -1],
    ["{", 388,
     /^[^]/, 386],
    [1, 386, 389],
    [/^\}?/, 386],
    [1, 132, 391,
     0, -1],
    [1, 4, 392],
    [",", 393,
     0, -1],
    [1, 4, 394],
    [1, 132, 395,
     0, 395],
    [1, 4, 392],
    [e[16], 397],
    [1, 4, 398],
    [/^[a-zA-Z¡-￿__\[\,\*\<\(]/, -1]
  ];
  var start = 0;
  var token = 3;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state, once) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (once && scope.locals.indexOf(name) > -1)
          { return "variable-2" }
        scope.locals.push(name);
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var scopes = ["Block", "FunctionDecl", "FunctionExpr", "IfStatement", "ForStatement", "SwitchStatement", "InterfaceBody"];
  var allowNewline = ["LiteralBody", "Bracketed", "ArgList", "ParamList", "ParenExpr"];

  function skippableNewline(line, pos, cx) {
    if (cx && allowNewline.indexOf(cx.name) > -1) { return true }
    var match = /(?:(\w+)|[\d"'\)\]\}:]|\+\+|--)\s*(?:\/\/.*)?$/.exec(line.slice(0, pos));
    return !match ||
      (match[1] ? /^(?:func|interface|select|case|defer|go|map|struct|chan|else|goto|package|switch|const|if|range|type|for|import|var)$/.test(match[1]) : false)
  }

  var bracketed = {
    Block: "}", LiteralBody: "}", StructBody: "}", InterfaceBody: "}",
    Bracketed: "]",
    Set: ")", ParamList: ")", ArgList: ")", ParenExpr: ")"
  };

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    if (brack) {
      var closed = textAfter && textAfter.charAt(0) == brack;
      var flat = closed || cx.name == "Block" && /^(case|default)\b/.test(textAfter);
      return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + (flat ? 0 : config.tabSize)
    } else if (cx.name == "Statement") {
      return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + (inside ? config.tabSize : 0)
    } else {
      return findIndent(cx.parent, textAfter, inside, config)
    }
  }

  var GoMode = (function (superclass) {
    function GoMode(conf) {
      superclass.call(this, grammar, {
        predicates: {skippableNewline: skippableNewline}
      });
      this.conf = conf;
    }

    if ( superclass ) GoMode.__proto__ = superclass;
    GoMode.prototype = Object.create( superclass && superclass.prototype );
    GoMode.prototype.constructor = GoMode;

    GoMode.prototype.token = function token$$1 (stream, state) {
      return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
    };

    GoMode.prototype.indent = function indent (state, textAfter, line) {
      return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, this.conf)
    };

    return GoMode;
  }(CodeMirror.GrammarMode));

  GoMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
  GoMode.prototype.closeBrackets = "()[]{}''\"\"``";
  GoMode.prototype.blockCommentStart = "/*";
  GoMode.prototype.blockCommentEnd = "*/";
  GoMode.prototype.blockCommentContinue = " * ";
  GoMode.prototype.lineComment = "//";
  GoMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-go", function (conf) { return new GoMode(conf); });

})));
