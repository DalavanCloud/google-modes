(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^const(?![a-zA-Z¡-￿_0-9_])/, /^var(?![a-zA-Z¡-￿_0-9_])/, /^type(?![a-zA-Z¡-￿_0-9_])/, /^import(?![a-zA-Z¡-￿_0-9_])/, /^package(?![a-zA-Z¡-￿_0-9_])/, /^func(?![a-zA-Z¡-￿_0-9_])/, /^go(?![a-zA-Z¡-￿_0-9_])/, /^defer(?![a-zA-Z¡-￿_0-9_])/, /^return(?![a-zA-Z¡-￿_0-9_])/, /^break(?![a-zA-Z¡-￿_0-9_])/, /^continue(?![a-zA-Z¡-￿_0-9_])/, /^default(?![a-zA-Z¡-￿_0-9_])/, /^case(?![a-zA-Z¡-￿_0-9_])/, /^select(?![a-zA-Z¡-￿_0-9_])/, /^goto(?![a-zA-Z¡-￿_0-9_])/, /^fallthrough(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*/, [1, "\n", "\t", " "], /^[a-zA-Z¡-￿_\.]+/, /^\@[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z¡-￿_])/, /^[^]/], /^if(?![a-zA-Z¡-￿_0-9_])/, /^else(?![a-zA-Z¡-￿_0-9_])/, /^switch(?![a-zA-Z¡-￿_0-9_])/, /^for(?![a-zA-Z¡-￿_0-9_])/, /^(?:\!|\+|\-|\*|\^|\&|\<\-)/, /^range(?![a-zA-Z¡-￿_0-9_])/, /^struct(?![a-zA-Z¡-￿_0-9_])/, /^interface(?![a-zA-Z¡-￿_0-9_])/, /^map(?![a-zA-Z¡-￿_0-9_])/, /^chan(?![a-zA-Z¡-￿_0-9_])/, /^(?=\{)/, /^(?:(?:0o|0O)[0-7]+|(?:0x|OX)[0-9a-fA-F]+|(?:[0-9]+(?:\.[0-9]+)?|\.[0-9]+)(?:[eE][\+\-]?[0-9]+)?i?)/, /^(?:true|false|nil|iota)(?![a-zA-Z¡-￿_0-9_])/, /^make(?![a-zA-Z¡-￿_0-9_])/, /^(?:append|cap|close|complex|copy|delete|imag|len|new|panic|print|println|real|recover)(?![a-zA-Z¡-￿_0-9_])/, /^(?:\+\+|\-\-)/, /^(?:(?:\+|\&\^?|\-|\||\*|\^|\/|\<\<?|\>\>?|\%|\=)\=?|\<\-|\=|\:\=|\!\=)/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?=\()/, [1, ";", "\n"], /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\:)/, /^(?:\.\.\.)?/];
  var nodes = [
    [1, 4, 2],
    [/^[^]/, 0],
    [1, 6, 1],
    [3, "keyword", e[9], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[27], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[22], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[1], -1,
     3, "builtin", e[34], -1,
     3, "atom", e[33], -1,
     3, "builtin", e[35], -1,
     3, "operator", e[37], -1,
     3, "operator", e[25], -1,
     3, "operator", e[36], -1,
     3, "number", e[32], -1,
     2, 9, -1, {"name":"string","token":"string"},
     3, "variable", e[16], -1,
     2, 11, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    [/^[ \t]/, 4,
     2, 11, 4, {"name":"comment","token":"comment"},
     [0, /^(?=\n)/, [7, "skippableNewline"]], 5,
     0, -1],
    ["\n", 4],
    [/^[ \t]/, 6,
     2, 11, 6, {"name":"comment","token":"comment"},
     "\n", 6,
     0, 7],
    [2, 16, 8, {"name":"Statement"},
     0, -1],
    [/^[ \t]/, 8,
     2, 11, 8, {"name":"comment","token":"comment"},
     e[39], 8,
     0, 7],
    [/^(?:\'(?:\\.(?:(?!\').)*|.)\'|\"(?:\\.|(?!\").)*\")/, -1,
     "`", 10],
    [[0, /^(?!\`)/, /^[^]/], 10,
     "`", -1],
    [/^\/\*\*(?!\/)/, 12,
     "/*", 15,
     /^\/\/.*/, -1],
    [e[20], 13,
     0, 14],
    [0, 12,
     0, 12],
    [2, 54, 14, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 15,
     "*/", -1],
    [3, "keyword", e[0], 17,
     3, "keyword", e[1], 17,
     3, "keyword", e[2], 19,
     3, "keyword", e[3], 23,
     3, "keyword", e[4], 27,
     2, 64, -1, {"name":"IfStatement"},
     2, 86, -1, {"name":"SwitchStatement"},
     2, 95, -1, {"name":"ForStatement"},
     3, "keyword", e[5], 29,
     3, "keyword", e[6], 31,
     3, "keyword", e[7], 31,
     3, "keyword", e[8], 33,
     3, "keyword", e[9], 35,
     3, "keyword", e[10], 35,
     3, "keyword", e[11], 37,
     3, "keyword", e[12], 38,
     /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\:(?!\=))/, 37,
     2, 107, -1, {"name":"Block"},
     3, "keyword", e[13], 41,
     3, "keyword", e[14], 43,
     3, "keyword", e[15], -1,
     3, "keyword", e[12], 45,
     1, 112, 49],
    [1, 4, 18],
    [1, 123, -1],
    [1, 4, 20],
    [2, 133, -1, {"name":"Set"},
     3, "def", e[16], 21],
    [1, 4, 22],
    [1, 138, -1],
    [1, 4, 24],
    [2, 173, -1, {"name":"Set"},
     ".", 25,
     3, "def", e[16], 25,
     0, 25],
    [1, 4, 26],
    [2, 9, -1, {"name":"string","token":"string"}],
    [1, 4, 28],
    [3, "variable", e[16], -1],
    [1, 4, 30],
    [2, 178, -1, {"name":"FunctionDecl"}],
    [1, 4, 32],
    [1, 112, -1],
    [1, 4, 34],
    [1, 193, -1],
    [1, 4, 36],
    [/^(?:[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*)?/, -1],
    [1, 4, 39],
    [1, 4, 40],
    [":", -1],
    [1, 193, 37],
    [1, 4, 42],
    [2, 107, -1, {"name":"Block"}],
    [1, 4, 44],
    [e[16], -1],
    [1, 4, 46],
    [2, 16, 47, {"name":"Statement"}],
    [1, 4, 48],
    [":", -1],
    [1, 4, 50],
    [",", 51,
     0, -1],
    [1, 4, 52],
    [1, 112, 53],
    [1, 4, 50],
    [3, "tag", /^\@param(?![a-zA-Z¡-￿_])/, 55,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z¡-￿_])/, 56,
     3, "tag", e[19], 62,
     "{", 57],
    [e[17], 55,
     3, "def", e[18], 62,
     "<", 58,
     0, 62],
    [e[17], 56,
     3, "type", e[18], 62,
     0, 62],
    [3, "tag", e[19], 59],
    [3, "type def", /^[a-zA-Z¡-￿_]+/, 60],
    [e[17], 59,
     2, 199, 61, {"name":"doccomment.tagContent","token":"attribute"}],
    [">", 62],
    ["}", 62],
    [e[20], 63,
     0, -1],
    [0, 62,
     0, 62],
    [3, "keyword", e[21], 65],
    [1, 4, 66],
    [1, 200, 67],
    [1, 4, 68],
    [";", 69,
     0, 71],
    [1, 4, 70],
    [1, 200, 71],
    [1, 4, 72],
    [2, 107, 73, {"name":"Block"}],
    [1, 4, 74],
    [3, "keyword", e[22], 75,
     0, -1],
    [1, 4, 76],
    [3, "keyword", e[21], 77,
     0, 78],
    [1, 4, 79],
    [1, 4, 80],
    [1, 200, 81],
    [2, 107, 82, {"name":"Block"}],
    [1, 4, 83],
    [1, 4, 74],
    [";", 84,
     0, 78],
    [1, 4, 85],
    [1, 200, 78],
    [3, "keyword", e[23], 87],
    [1, 4, 88],
    [1, 200, 89,
     0, 93],
    [1, 4, 90],
    [";", 91,
     0, 93],
    [1, 4, 92],
    [1, 200, 93,
     0, 93],
    [1, 4, 94],
    [2, 107, -1, {"name":"Block"}],
    [3, "keyword", e[24], 96],
    [1, 4, 97],
    [1, 208, 98,
     1, 200, 99,
     0, 105],
    [1, 4, 100],
    [1, 4, 101],
    [1, 200, 99],
    [";", 102,
     0, 105],
    [1, 4, 103],
    [1, 200, 104,
     0, 104],
    [1, 4, 101],
    [1, 4, 106],
    [2, 107, -1, {"name":"Block"}],
    ["{", 108],
    [1, 4, 109],
    [1, 6, 110],
    [1, 4, 111],
    ["}", -1],
    [1, 208, 113,
     0, 115],
    [1, 4, 114],
    [1, 112, -1],
    [3, "operator", e[25], 116,
     3, "keyword", e[26], 116,
     [0, [6, 215], [5, 216]], 117,
     1, 219, 118],
    [1, 4, 115],
    [1, 138, 119],
    [1, 4, 120],
    [1, 4, 121],
    [1, 228, 122,
     2, 237, 122, {"name":"LiteralBody"},
     0, -1],
    [e[31], 118],
    [1, 4, 120],
    [2, 242, -1, {"name":"Set"},
     3, "def", e[16], 124],
    [1, 4, 125],
    [",", 126,
     1, 138, 127,
     0, 127],
    [1, 4, 128],
    [1, 4, 129],
    [3, "def", e[16], 130],
    [3, "operator", "=", 131,
     0, -1],
    [1, 4, 125],
    [1, 4, 132],
    [1, 193, -1],
    ["(", 134],
    [1, 4, 135],
    [1, 247, 136],
    [1, 4, 137],
    [")", -1],
    ["[", 139,
     3, "keyword", e[27], 145,
     3, "keyword", e[28], 147,
     "*", 149,
     3, "keyword", e[5], 151,
     3, "keyword", e[29], 155,
     3, "operator", "<-", 163,
     3, "keyword", e[30], 164,
     "(", 167,
     0, 171],
    [1, 4, 140],
    [1, 112, 141,
     0, 141],
    [1, 4, 142],
    ["]", 143],
    [1, 4, 144],
    [1, 138, -1],
    [1, 4, 146],
    [2, 252, -1, {"name":"StructBody"}],
    [1, 4, 148],
    [2, 257, -1, {"name":"InterfaceBody"}],
    [1, 4, 150],
    [1, 138, -1],
    [1, 4, 152],
    [2, 262, 153, {"name":"ParamList"}],
    [1, 4, 154],
    [2, 262, -1, {"name":"ParamList"},
     1, 138, -1,
     0, -1],
    [1, 4, 156],
    ["[", 157],
    [1, 4, 158],
    [1, 138, 159],
    [1, 4, 160],
    ["]", 161],
    [1, 4, 162],
    [1, 138, -1],
    [1, 4, 165],
    [1, 4, 166],
    [1, 138, -1],
    [3, "operator", "<-", 163,
     0, 163],
    [1, 4, 168],
    [1, 138, 169],
    [1, 4, 170],
    [")", -1],
    [3, "meta", /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*\./, 172,
     3, "type", e[16], -1],
    [1, 4, 171],
    ["(", 174],
    [1, 4, 175],
    [1, 267, 176],
    [1, 4, 177],
    [")", -1],
    ["(", 179,
     0, 185],
    [1, 4, 180],
    [3, "def", e[16], 181],
    [1, 4, 182],
    [1, 138, 183],
    [1, 4, 184],
    [")", 185],
    [1, 4, 186],
    [2, 272, 187, {"name":"funcName"},
     0, 187],
    [1, 4, 188],
    [2, 262, 189, {"name":"ParamList"}],
    [1, 4, 190],
    [2, 262, 191, {"name":"ParamList"},
     1, 138, 191,
     0, 191],
    [1, 4, 192],
    [2, 107, -1, {"name":"Block"},
     0, -1],
    [1, 112, 194,
     0, -1],
    [1, 4, 195],
    [",", 196,
     0, -1],
    [1, 4, 197],
    [1, 112, 198,
     0, 198],
    [1, 4, 195],
    [1, 273, -1],
    [1, 208, 201,
     0, 203],
    [1, 4, 202],
    [1, 200, -1],
    [3, "operator", e[25], 204,
     3, "keyword", e[26], 204,
     1, 219, 205],
    [1, 4, 203],
    [1, 4, 206],
    [1, 277, 207,
     0, -1],
    [1, 4, 206],
    [[5, 286], 209],
    [3, "def", e[16], 210],
    [1, 4, 211],
    [",", 212,
     3, "operator", ":=", -1],
    [1, 4, 213],
    [3, "def", e[16], 214],
    [1, 4, 211],
    [3, "keyword", e[5], -1],
    [1, 138, 217],
    [1, 4, 218],
    [e[31], -1],
    [3, "number", e[32], -1,
     2, 9, -1, {"name":"string","token":"string"},
     3, "atom", e[33], -1,
     3, "keyword", e[5], 220,
     3, "builtin", e[34], 222,
     3, "builtin", e[35], -1,
     3, "variable callee", e[38], -1,
     3, "variable", e[16], -1,
     2, 292, 224, {"name":"Bracketed"},
     "*", 226,
     2, 300, -1, {"name":"ParenExpr"}],
    [1, 4, 221],
    [2, 305, -1, {"name":"FunctionExpr"}],
    [1, 4, 223],
    [2, 310, -1, {"name":"TypeList"}],
    [1, 4, 225],
    [1, 138, -1,
     0, -1],
    [1, 4, 227],
    [1, 138, -1],
    [".(", 229,
     ".", 233,
     3, "operator", e[36], -1,
     3, "operator", e[37], 235,
     2, 315, -1, {"name":"ArgList"},
     2, 292, -1, {"name":"Bracketed"}],
    [1, 4, 230],
    [1, 138, 231],
    [1, 4, 232],
    [")", -1],
    [1, 4, 234],
    [3, "property callee", e[38], -1,
     3, "property", e[16], -1],
    [1, 4, 236],
    [1, 112, -1],
    ["{", 238],
    [1, 4, 239],
    [1, 322, 240],
    [1, 4, 241],
    ["}", -1],
    ["(", 243],
    [1, 4, 244],
    [1, 336, 245],
    [1, 4, 246],
    [")", -1],
    [/^[ \t]/, 247,
     2, 11, 247, {"name":"comment","token":"comment"},
     "\n", 247,
     0, 248],
    [3, "def", e[16], 249,
     0, -1],
    [1, 4, 250],
    [1, 138, 251],
    [/^[ \t]/, 251,
     2, 11, 251, {"name":"comment","token":"comment"},
     e[39], 251,
     0, 248],
    ["{", 253],
    [1, 4, 254],
    [1, 348, 255],
    [1, 4, 256],
    ["}", -1],
    ["{", 258],
    [1, 4, 259],
    [1, 361, 260],
    [1, 4, 261],
    ["}", -1],
    ["(", 263],
    [1, 4, 264],
    [1, 368, 265],
    [1, 4, 266],
    [")", -1],
    [/^[ \t]/, 267,
     2, 11, 267, {"name":"comment","token":"comment"},
     "\n", 267,
     0, 268],
    [".", 269,
     3, "def", e[16], 269,
     0, 269,
     0, -1],
    [1, 4, 270],
    [2, 9, 271, {"name":"string","token":"string"}],
    [/^[ \t]/, 271,
     2, 11, 271, {"name":"comment","token":"comment"},
     e[39], 271,
     0, 268],
    [3, "def", e[16], -1],
    [/^(?!\}|\*\/)/, 274,
     0, -1],
    ["{", 275,
     /^[^]/, 273],
    [1, 273, 276],
    [/^\}?/, 273],
    [".(", 278,
     ".", 282,
     3, "operator", e[36], -1,
     3, "operator", e[37], 284,
     2, 315, -1, {"name":"ArgList"},
     2, 292, -1, {"name":"Bracketed"}],
    [1, 4, 279],
    [1, 138, 280],
    [1, 4, 281],
    [")", -1],
    [1, 4, 283],
    [3, "property callee", e[38], -1,
     3, "property", e[16], -1],
    [1, 4, 285],
    [1, 200, -1],
    [e[16], 287],
    [1, 4, 288],
    [",", 289,
     ":=", -1],
    [1, 4, 290],
    [e[16], 291],
    [1, 4, 288],
    ["[", 293],
    [1, 4, 294],
    [1, 193, 295],
    [1, 4, 296],
    [":", 297,
     "]", -1],
    [1, 4, 298],
    [1, 112, 299,
     0, 299],
    [1, 4, 296],
    ["(", 301],
    [1, 4, 302],
    [1, 193, 303],
    [1, 4, 304],
    [")", -1],
    [2, 262, 306, {"name":"ParamList"}],
    [1, 4, 307],
    [2, 262, 308, {"name":"ParamList"},
     1, 138, 308,
     0, 308],
    [1, 4, 309],
    [2, 107, -1, {"name":"Block"}],
    ["(", 311],
    [1, 4, 312],
    [1, 392, 313],
    [1, 4, 314],
    [")", -1],
    ["(", 316],
    [1, 4, 317],
    [1, 193, 318],
    [1, 4, 319],
    [e[41], 320],
    [1, 4, 321],
    [")", -1],
    [3, "property", e[40], 323,
     2, 237, 323, {"name":"LiteralBody"},
     1, 112, 323,
     0, -1],
    [1, 4, 324],
    [":", 325,
     0, 326],
    [1, 4, 327],
    [1, 4, 328],
    [2, 237, 326, {"name":"LiteralBody"},
     1, 112, 326],
    [",", 329,
     0, -1],
    [1, 4, 330],
    [3, "property", e[40], 331,
     2, 237, 331, {"name":"LiteralBody"},
     1, 112, 331,
     0, 332],
    [1, 4, 333],
    [1, 4, 328],
    [":", 334,
     0, 332],
    [1, 4, 335],
    [2, 237, 332, {"name":"LiteralBody"},
     1, 112, 332],
    [/^[ \t]/, 336,
     2, 11, 336, {"name":"comment","token":"comment"},
     "\n", 336,
     0, 337],
    [3, "def", e[16], 338,
     0, -1],
    [1, 4, 339],
    [",", 340,
     1, 138, 341,
     0, 341],
    [1, 4, 342],
    [1, 4, 343],
    [3, "def", e[16], 344],
    [3, "operator", "=", 345,
     0, 346],
    [1, 4, 339],
    [1, 4, 347],
    [/^[ \t]/, 346,
     2, 11, 346, {"name":"comment","token":"comment"},
     e[39], 346,
     0, 337],
    [1, 193, 346],
    [/^[ \t]/, 348,
     2, 11, 348, {"name":"comment","token":"comment"},
     "\n", 348,
     0, 349],
    [[5, 398], 350,
     "*", 351,
     0, 351,
     0, -1],
    [3, "def property", e[16], 352],
    [1, 4, 353],
    [1, 4, 354],
    [1, 138, 355],
    [",", 356,
     0, 351],
    [1, 4, 357],
    [1, 4, 358],
    [2, 9, 359, {"name":"string","token":"string"},
     0, 359],
    [3, "def property", e[16], 360],
    [/^[ \t]/, 359,
     2, 11, 359, {"name":"comment","token":"comment"},
     e[39], 359,
     0, 349],
    [1, 4, 354],
    [/^[ \t]/, 361,
     2, 11, 361, {"name":"comment","token":"comment"},
     "\n", 361,
     0, 362],
    [3, "property", /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\()/, 363,
     1, 138, 364,
     0, -1],
    [1, 4, 365],
    [/^[ \t]/, 364,
     2, 11, 364, {"name":"comment","token":"comment"},
     e[39], 364,
     0, 362],
    [2, 262, 366, {"name":"ParamList"}],
    [1, 4, 367],
    [2, 262, 364, {"name":"ParamList"},
     1, 138, 364,
     0, 364],
    [3, "def", e[16], 369,
     0, 370,
     0, -1],
    [1, 4, 371],
    [1, 4, 372],
    [",", 373,
     0, 370],
    [e[41], 374],
    [1, 4, 375],
    [1, 4, 376],
    [3, "def", e[16], 377],
    [1, 138, 378,
     0, 378],
    [1, 4, 371],
    [1, 4, 379],
    [",", 380,
     0, -1],
    [1, 4, 381],
    [3, "def", e[16], 382,
     0, 383,
     0, 384],
    [1, 4, 385],
    [1, 4, 386],
    [1, 4, 379],
    [",", 387,
     0, 383],
    [e[41], 388],
    [1, 4, 389],
    [1, 4, 390],
    [3, "def", e[16], 391],
    [1, 138, 384,
     0, 384],
    [1, 4, 385],
    [1, 138, 393,
     0, -1],
    [1, 4, 394],
    [",", 395,
     0, -1],
    [1, 4, 396],
    [1, 138, 397,
     0, 397],
    [1, 4, 394],
    [e[16], 399],
    [1, 4, 400],
    [/^[a-zA-Z¡-￿__\[\,\*\<\(]/, -1]
  ];
  var start = 0;
  var token = 3;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state, once) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (once && scope.locals.indexOf(name) > -1)
          { return "variable-2" }
        scope.locals.push(name);
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var scopes = ["Block", "FunctionDecl", "FunctionExpr", "IfStatement", "ForStatement", "SwitchStatement", "InterfaceBody"];
  var allowNewline = ["LiteralBody", "Bracketed", "ArgList", "ParamList", "ParenExpr"];

  function skippableNewline(line, pos, cx) {
    if (cx && allowNewline.indexOf(cx.name) > -1) { return true }
    var match = /(?:(\w+)|[\d"'\)\]\}:]|\+\+|--)\s*(?:\/\/.*)?$/.exec(line.slice(0, pos));
    return !match ||
      (match[1] ? /^(?:func|interface|select|case|defer|go|map|struct|chan|else|goto|package|switch|const|if|range|type|for|import|var)$/.test(match[1]) : false)
  }

  var bracketed = {
    Block: "}", LiteralBody: "}", StructBody: "}", InterfaceBody: "}",
    Bracketed: "]",
    Set: ")", ParamList: ")", ArgList: ")", ParenExpr: ")"
  };

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    if (brack) {
      var closed = textAfter && textAfter.charAt(0) == brack;
      var flat = closed || cx.name == "Block" && /^(case|default)\b/.test(textAfter);
      return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + (flat ? 0 : config.tabSize)
    } else if (cx.name == "Statement") {
      return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + (inside ? config.tabSize : 0)
    } else {
      return findIndent(cx.parent, textAfter, inside, config)
    }
  }

  var GoMode = (function (superclass) {
    function GoMode(conf) {
      superclass.call(this, grammar, {
        predicates: {skippableNewline: skippableNewline}
      });
      this.conf = conf;
    }

    if ( superclass ) GoMode.__proto__ = superclass;
    GoMode.prototype = Object.create( superclass && superclass.prototype );
    GoMode.prototype.constructor = GoMode;

    GoMode.prototype.token = function token$$1 (stream, state) {
      return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
    };

    GoMode.prototype.indent = function indent (state, textAfter, line) {
      return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, this.conf)
    };

    return GoMode;
  }(CodeMirror.GrammarMode));

  GoMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
  GoMode.prototype.closeBrackets = "()[]{}''\"\"``";
  GoMode.prototype.blockCommentStart = "/*";
  GoMode.prototype.blockCommentEnd = "*/";
  GoMode.prototype.blockCommentContinue = " * ";
  GoMode.prototype.lineComment = "//";
  GoMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-go", function (conf) { return new GoMode(conf); });

})));
