(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^(?:var|let|const)(?![a-zA-Z¡-￿_0-9_\$])/, /^while(?![a-zA-Z¡-￿_0-9_\$])/, /^with(?![a-zA-Z¡-￿_0-9_\$])/, /^do(?![a-zA-Z¡-￿_0-9_\$])/, /^debugger(?![a-zA-Z¡-￿_0-9_\$])/, /^if(?![a-zA-Z¡-￿_0-9_\$])/, /^function(?![a-zA-Z¡-￿_0-9_\$])/, /^for(?![a-zA-Z¡-￿_0-9_\$])/, /^default(?![a-zA-Z¡-￿_0-9_\$])/, /^case(?![a-zA-Z¡-￿_0-9_\$])/, /^return(?![a-zA-Z¡-￿_0-9_\$])/, /^throw(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9_\$])/, /^switch(?![a-zA-Z¡-￿_0-9_\$])/, /^try(?![a-zA-Z¡-￿_0-9_\$])/, /^class(?![a-zA-Z¡-￿_0-9_\$])/, /^export(?![a-zA-Z¡-￿_0-9_\$])/, /^import(?![a-zA-Z¡-￿_0-9_\$])/, [0, "async", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 153]], /^[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*/, /^extends(?![a-zA-Z¡-￿_0-9_\$])/, /^enum(?![a-zA-Z¡-￿_0-9_\$])/, [1, ";", /^(?=\})/, [7, "canInsertSemi"]], /^catch(?![a-zA-Z¡-￿_0-9_\$])/, /^finally(?![a-zA-Z¡-￿_0-9_\$])/, /^from(?![a-zA-Z¡-￿_0-9_\$])/, [1, "\n", "\t", " "], /^[a-zA-Z¡-￿__\$]/, /^const(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:true|false|null|undefined|NaN|Infinity)(?![a-zA-Z¡-￿_0-9_\$])/, /^new(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:0x[0-9a-fA-F]+|0o[0-7]+|0b[01]+|(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)(?:[eE][\+\-]?[0-9]+)?)/, /^else(?![a-zA-Z¡-￿_0-9_\$])/, /^as(?![a-zA-Z¡-￿_0-9_\$])/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_]|\{)/, /^[^]/], /^(?:super|this)(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:delete|typeof|yield|await)(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:\.\.\.|\!|\+\+?|\-\-?)/, /^\/(?![\/\*])(?:\\.|\[(?:(?!\]).)*\]|(?!\/).)+\/[gimyus]*/, [0, /^[a-zA-Z¡-￿__\$]/, /^[a-zA-Z¡-￿_0-9_\$]*/, [5, 519]], /^(?:\+\+|\-\-)/, /^(?:\+|\-|\%|\*|\/(?![\/\*])|\>\>?\>?|\<\<?|\=\=?|\&\&?|\|\|?|\^|\!\=)\=?/, /^(?:in|instanceof)(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:public|private|protected|readonly|abstract|static)(?![a-zA-Z¡-￿_0-9_\$])/, [0, /^[a-zA-Z¡-￿__\$]/, /^[a-zA-Z¡-￿_0-9_\$]*/, [5, 544]], /^is(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:\.\.\.)?/, /^(?:get|set|async)(?![a-zA-Z¡-￿_0-9_\$])(?! *[\,\}\:\(\<])/];
  var nodes = [
    [1, 6, 2],
    [/^[^]/, 0],
    [1, 6, 3],
    [2, 7, 4, {"name":"Statement"},
     0, 1],
    [1, 6, 3],
    [3, "keyword", e[0], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[32], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[35], -1,
     3, "atom", e[29], -1,
     3, "variable", e[19], -1,
     3, "operator", e[37], -1,
     3, "operator", e[41], -1,
     3, "operator", e[40], -1,
     2, 155, -1, {"name":"string","token":"string"},
     3, "number", e[31], -1,
     2, 160, -1, {"name":"comment","token":"comment"},
     3, "string-2", e[38], -1,
     1, 166, -1,
     /^[^]/, -1],
    [e[26], 6,
     2, 160, 6, {"name":"comment","token":"comment"},
     0, -1],
    [3, "keyword", [0, "type", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 170]], 8,
     3, "keyword", [0, "namespace", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 171]], 18,
     3, "keyword", [0, "interface", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 172]], 26,
     [5, 173], 36,
     3, "keyword", e[21], 37,
     3, "keyword", [0, "declare", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 176]], 43,
     3, "keyword", /^abstract(?![a-zA-Z¡-￿_0-9_\$])/, 43,
     3, "keyword", e[0], 45,
     3, "keyword", e[1], 52,
     3, "keyword", e[2], 52,
     3, "keyword", e[3], 56,
     2, 177, -1, {"name":"Block"},
     ";", -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[5], 64,
     3, "keyword", e[6], 69,
     3, "keyword", e[7], 75,
     3, "keyword", e[8], 77,
     /^[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*(?= *\:)/, 77,
     3, "keyword", e[9], 78,
     3, "keyword", e[10], 81,
     3, "keyword", e[11], 85,
     3, "keyword", e[12], 89,
     3, "keyword", e[13], 93,
     3, "keyword", e[14], 97,
     3, "keyword", e[15], 113,
     3, "keyword", e[16], 117,
     3, "keyword", e[17], 129,
     3, "keyword", e[18], 145,
     "@", 147,
     1, 181, 151],
    [1, 6, 9],
    [3, "def type", e[19], 10],
    [1, 6, 11],
    [2, 187, 12, {"name":"TypeParams"},
     0, 12],
    [1, 6, 13],
    [3, "operator", "=", 14],
    [1, 6, 15],
    [1, 192, 16],
    [1, 6, 17],
    [e[22], -1],
    [1, 6, 19],
    [[5, 231], 20,
     3, "def", e[19], 21],
    [3, "variable", e[19], 22],
    [1, 6, 23],
    [1, 6, 24],
    [2, 177, -1, {"name":"Block"}],
    [".", 25],
    [1, 6, 19],
    [1, 6, 27],
    [3, "def type", e[19], 28],
    [1, 6, 29],
    [2, 187, 30, {"name":"TypeParams"},
     0, 30],
    [1, 6, 31],
    [3, "keyword", e[20], 32,
     0, 33],
    [1, 6, 34],
    [1, 6, 35],
    [1, 234, 33],
    [2, 240, -1, {"name":"ObjType"}],
    [3, "keyword", e[28], 38],
    [1, 6, 39],
    [1, 6, 40],
    [3, "def type", e[19], 41],
    [3, "keyword", e[21], 37],
    [1, 6, 42],
    [2, 248, -1, {"name":"EnumBody"}],
    [1, 6, 44],
    [2, 7, -1, {"name":"Statement"}],
    [1, 6, 46],
    [1, 253, 47],
    [1, 6, 48],
    [",", 49,
     e[22], -1],
    [1, 6, 50],
    [1, 253, 51],
    [1, 6, 48],
    [1, 6, 53],
    [2, 264, 54, {"name":"CondExpr"}],
    [1, 6, 55],
    [2, 7, -1, {"name":"Statement"}],
    [1, 6, 57],
    [2, 7, 58, {"name":"Statement"}],
    [1, 6, 59],
    [3, "keyword", e[1], 60,
     0, -1],
    [1, 6, 61],
    [2, 264, 62, {"name":"CondExpr"}],
    [1, 6, 63],
    [e[22], -1],
    [1, 6, 65],
    [2, 264, 66, {"name":"CondExpr"}],
    [1, 6, 67],
    [2, 7, 68, {"name":"Statement"}],
    [2, 269, -1, {"name":"Alternative"}],
    [1, 6, 70],
    [3, "keyword", "*", 71,
     0, 71],
    [1, 6, 72],
    [3, "def", e[19], 73],
    [1, 6, 74],
    [2, 273, -1, {"name":"FunctionDef"}],
    [1, 6, 76],
    [2, 282, -1, {"name":"ForStatement"}],
    [1, 6, 79],
    [1, 6, 80],
    [":", -1],
    [1, 181, 77],
    [1, 6, 82],
    [e[22], -1,
     1, 181, 83],
    [1, 6, 84],
    [e[22], -1],
    [1, 6, 86],
    [1, 181, 87],
    [1, 6, 88],
    [e[22], -1],
    [1, 6, 90],
    [/^(?:[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*)?/, 91],
    [1, 6, 92],
    [e[22], -1],
    [1, 6, 94],
    [2, 264, 95, {"name":"CondExpr"}],
    [1, 6, 96],
    [2, 177, -1, {"name":"Block"}],
    [1, 6, 98],
    [2, 177, 99, {"name":"Block"}],
    [1, 6, 100],
    [3, "keyword", e[23], 101,
     0, 102],
    [1, 6, 103],
    [1, 6, 104],
    ["(", 105],
    [3, "keyword", e[24], 106,
     0, -1],
    [1, 6, 107],
    [1, 6, 108],
    [3, "def", e[19], 109],
    [2, 177, -1, {"name":"Block"}],
    [1, 6, 110],
    [")", 111],
    [1, 6, 112],
    [2, 177, 102, {"name":"Block"}],
    [1, 6, 114],
    [3, "def type", e[19], 115],
    [1, 6, 116],
    [1, 285, -1],
    [1, 6, 118],
    ["*", 119,
     3, "keyword", e[8], 119,
     "{", 120,
     2, 7, -1, {"name":"Statement"}],
    [1, 6, 121],
    [1, 6, 122],
    [3, "keyword", e[25], 123,
     0, 124],
    [1, 296, 125],
    [1, 6, 126],
    [1, 6, 127],
    [1, 6, 128],
    [2, 155, 124, {"name":"string","token":"string"}],
    [e[22], -1],
    ["}", 119],
    [1, 6, 130],
    [2, 155, 131, {"name":"string","token":"string"},
     3, "keyword", "*", 132,
     1, 302, 133,
     "{", 134],
    [1, 6, 135],
    [1, 6, 136],
    [1, 6, 137],
    [1, 6, 138],
    [e[22], -1],
    [3, "keyword", e[33], 139,
     0, 133],
    [3, "keyword", e[25], 140,
     0, 131],
    [1, 296, 141],
    [1, 6, 142],
    [1, 6, 143],
    [1, 6, 144],
    [3, "def", e[19], 133],
    [2, 155, 131, {"name":"string","token":"string"}],
    ["}", 133],
    [1, 6, 146],
    [2, 7, -1, {"name":"Statement"}],
    [1, 6, 148],
    [1, 181, 149],
    [1, 6, 150],
    [2, 7, -1, {"name":"Statement"}],
    [1, 6, 152],
    [e[22], -1],
    [1, 6, 154],
    [3, "keyword", e[6], -1,
     /^(?:[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*|\()/, -1],
    ["'", 156,
     "\"", 158],
    ["\\", 157,
     /^(?!\')./, 156,
     "'", -1],
    [/^[^]/, 156],
    ["\\", 159,
     /^(?!\")./, 158,
     "\"", -1],
    [/^[^]/, 158],
    [/^\/\*\*(?!\/)/, 161,
     "/*", 165,
     /^\/\/.*/, -1],
    [0, 162,
     2, 307, 161, {"name":"doccomment.braced"},
     0, 163],
    [e[34], 164],
    [2, 311, 163, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [0, 162,
     0, 161],
    [[0, /^(?!\*\/)/, /^[^]/], 165,
     "*/", -1],
    [3, "string-2", "`", 167],
    [3, "string-2", "${", 168,
     2, 315, 167, {"name":"str2","token":"string-2"},
     3, "string-2", /^(?:(?!\`|\$\{|\\).)+/, 167,
     3, "string-2", "`", -1],
    [1, 181, 169],
    [3, "string-2", "}", 167],
    [e[26], 170,
     e[27], -1],
    [e[26], 171,
     e[27], -1],
    [e[26], 172,
     e[27], -1],
    [3, "keyword", e[28], 174],
    [1, 6, 175],
    [3, "keyword", e[21], -1],
    [e[26], 176,
     e[27], -1],
    ["{", 178],
    [1, 6, 179],
    [2, 7, 180, {"name":"Statement"},
     "}", -1],
    [1, 6, 179],
    [1, 317, 182],
    [1, 6, 183],
    [",", 184,
     1, 339, 185,
     0, -1],
    [1, 6, 186],
    [1, 6, 183],
    [1, 181, 185],
    ["<", 188],
    [1, 6, 189],
    [1, 358, 190],
    [1, 6, 191],
    [">", -1],
    [3, "keyword", /^this(?![a-zA-Z¡-￿_0-9_\$])/, 216,
     3, "atom", e[29], 216,
     3, "keyword", /^typeof(?![a-zA-Z¡-￿_0-9_\$])/, 193,
     3, "keyword", /^keyof(?![a-zA-Z¡-￿_0-9_\$])/, 194,
     [0, [5, 380], "("], 195,
     3, "keyword", e[30], 196,
     0, 196,
     0, 197,
     2, 383, 216, {"name":"TupleType"},
     2, 240, 216, {"name":"ObjType"},
     2, 155, 216, {"name":"string","token":"string"},
     3, "number", e[31], 216],
    [1, 6, 198],
    [1, 6, 199],
    [1, 6, 200],
    [1, 6, 201],
    [[5, 388], 202,
     3, "type", e[19], 203],
    [1, 391, 216],
    [1, 192, 216],
    [1, 192, 204],
    [2, 187, 205, {"name":"TypeParams"},
     0, 205],
    [3, "variable", e[19], 206],
    [1, 6, 207],
    [1, 6, 208],
    [1, 6, 209],
    [1, 6, 210],
    [2, 395, 216, {"name":"TypeArgs"},
     0, 216],
    [")", 216],
    [2, 400, 211, {"name":"ParamListSpec"}],
    [".", 212],
    [1, 6, 213],
    [1, 6, 197],
    [3, "operator", "=>", 214],
    [1, 6, 215],
    [1, 401, 216],
    [1, 6, 217],
    [3, "operator", /^[\&\|]/, 218,
     3, "keyword", /^(?:extends|implements)(?![a-zA-Z¡-￿_0-9_\$])/, 218,
     "[", 219,
     3, "operator", "?", 220,
     0, -1],
    [1, 6, 221],
    [1, 6, 222],
    [1, 6, 223],
    [1, 192, 224],
    [1, 192, 225,
     0, 225],
    [1, 192, 226],
    [1, 6, 217],
    [1, 6, 227],
    [1, 6, 228],
    ["]", 224],
    [3, "operator", ":", 229],
    [1, 6, 230],
    [1, 192, 224],
    [e[19], 232],
    [1, 6, 233],
    [".", -1],
    [1, 192, 235,
     0, -1],
    [1, 6, 236],
    [",", 237,
     0, -1],
    [1, 6, 238],
    [1, 192, 239,
     0, 239],
    [1, 6, 236],
    ["{", 241],
    [1, 6, 242],
    [1, 407, 243,
     0, 243],
    [1, 6, 244],
    [/^[\,\;]/, 245,
     "}", -1],
    [1, 6, 246],
    [1, 407, 247,
     0, 247],
    [1, 6, 244],
    ["{", 249],
    [1, 6, 250],
    [1, 440, 251],
    [1, 6, 252],
    ["}", -1],
    [1, 454, 254],
    [1, 6, 255],
    [3, "operator", "!", 256,
     0, 256],
    [1, 6, 257],
    [":", 258,
     0, 260],
    [1, 6, 259],
    [1, 192, 260],
    [1, 6, 261],
    [3, "operator", "=", 262,
     0, -1],
    [1, 6, 263],
    [1, 391, -1],
    ["(", 265],
    [1, 6, 266],
    [1, 181, 267],
    [1, 6, 268],
    [")", -1],
    [1, 6, 270],
    [3, "keyword", e[32], 271,
     0, -1],
    [1, 6, 272],
    [2, 7, -1, {"name":"Statement"}],
    [2, 187, 274, {"name":"TypeParams"},
     0, 274],
    [1, 6, 275],
    [2, 457, 276, {"name":"ParamList"}],
    [1, 6, 277],
    [":", 278,
     0, 280],
    [1, 6, 279],
    [1, 401, 280],
    [1, 6, 281],
    [2, 177, -1, {"name":"Block"},
     e[22], -1],
    [2, 462, 283, {"name":"ForSpec"}],
    [1, 6, 284],
    [2, 7, -1, {"name":"Statement"}],
    [2, 187, 286, {"name":"TypeParams"},
     0, 286],
    [1, 6, 287],
    [3, "keyword", e[20], 288,
     0, 290],
    [1, 6, 289],
    [1, 192, 290],
    [1, 6, 291],
    [3, "keyword", /^implements(?![a-zA-Z¡-￿_0-9_\$])/, 292,
     0, 294],
    [1, 6, 293],
    [1, 234, 294],
    [1, 6, 295],
    [2, 473, -1, {"name":"ClassBody"}],
    [1, 302, 297,
     0, -1],
    [1, 6, 298],
    [",", 299,
     0, -1],
    [1, 6, 300],
    [1, 302, 301,
     0, 301],
    [1, 6, 298],
    [3, "variable", /^[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*(?= +as)/, 303,
     3, "def", e[19], -1],
    [1, 6, 304],
    [3, "keyword", e[33], 305],
    [1, 6, 306],
    [3, "def", e[19], -1],
    ["{", 308],
    [1, 501, 309,
     2, 507, 310, {"name":"doccomment.type"}],
    [[0, /^(?!\}|\*\/)/, /^[^]/], 309,
     0, 310],
    [/^(?:\}|(?=\*\/))/, -1],
    [1, 501, 312],
    [0, 313,
     2, 307, 312, {"name":"doccomment.braced"},
     0, -1],
    [e[34], 314],
    [0, 313,
     0, 312],
    ["\\", 316,
     "\n", -1],
    [/^[^]/, -1],
    [3, "atom", e[29], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[36], 318,
     3, "operator", e[37], 318,
     3, "keyword", e[18], 318,
     3, "keyword", e[30], 320,
     3, "keyword", e[6], 326,
     3, "keyword", e[15], 332,
     2, 511, -1, {"name":"ArrowFunc"},
     3, "variable callee", e[39], 337,
     3, "variable", e[19], -1,
     3, "number", e[31], -1,
     2, 155, -1, {"name":"string","token":"string"},
     3, "string-2", e[38], -1,
     1, 166, -1,
     2, 523, -1, {"name":"ArrayLiteral"},
     2, 528, -1, {"name":"ObjectLiteral"},
     2, 533, -1, {"name":"ParenExpr"}],
    [1, 6, 319],
    [1, 317, -1],
    [1, 6, 321],
    [".", 322,
     3, "variable callee", e[39], 323,
     1, 317, -1],
    [1, 6, 324],
    [1, 6, 325],
    [3, "keyword", /^target(?![a-zA-Z¡-￿_0-9_\$])/, -1],
    [2, 395, -1, {"name":"TypeArgs"},
     0, -1],
    [1, 6, 327],
    [3, "keyword", "*", 328,
     0, 328],
    [1, 6, 329],
    [3, "def", e[19], 330,
     0, 330],
    [1, 6, 331],
    [2, 273, -1, {"name":"FunctionDef"}],
    [1, 6, 333],
    [[6, 538], 334,
     0, 335],
    [3, "def type", e[19], 335],
    [1, 6, 336],
    [1, 285, -1],
    [1, 6, 338],
    [2, 395, -1, {"name":"TypeArgs"},
     0, -1],
    [3, "keyword", e[33], 340,
     3, "operator", "!", -1,
     3, "operator", e[40], -1,
     3, "operator", e[41], 342,
     3, "keyword", e[42], 342,
     2, 539, -1, {"name":"ArgList"},
     1, 166, -1,
     ".", 344,
     "[", 348,
     3, "operator", "?", 352],
    [1, 6, 341],
    [1, 192, -1],
    [1, 6, 343],
    [1, 181, -1],
    [1, 6, 345],
    [3, "property callee", e[44], 346,
     3, "property", e[19], -1],
    [1, 6, 347],
    [2, 395, -1, {"name":"TypeArgs"},
     0, -1],
    [1, 6, 349],
    [1, 181, 350],
    [1, 6, 351],
    ["]", -1],
    [1, 6, 353],
    [1, 181, 354],
    [1, 6, 355],
    [3, "operator", ":", 356],
    [1, 6, 357],
    [1, 181, -1],
    [3, "def type", e[19], 359,
     0, -1],
    [1, 6, 360],
    [3, "keyword", e[20], 361,
     0, 362],
    [1, 6, 363],
    [1, 6, 364],
    [1, 192, 362],
    [3, "operator", "=", 365,
     0, 366],
    [1, 6, 367],
    [1, 6, 368],
    [1, 192, 366],
    [",", 369,
     0, -1],
    [1, 6, 370],
    [3, "def type", e[19], 371,
     0, 372],
    [1, 6, 373],
    [1, 6, 368],
    [3, "keyword", e[20], 374,
     0, 375],
    [1, 6, 376],
    [1, 6, 377],
    [1, 192, 375],
    [3, "operator", "=", 378,
     0, 372],
    [1, 6, 379],
    [1, 192, 372],
    ["(", 381],
    [1, 6, 382],
    [[6, 548], -1],
    ["[", 384],
    [1, 6, 385],
    [1, 234, 386],
    [1, 6, 387],
    ["]", -1],
    [e[19], 389],
    [1, 6, 390],
    [".", -1],
    [1, 317, 392],
    [1, 6, 393],
    [1, 551, 394,
     0, -1],
    [1, 6, 393],
    ["<", 396],
    [1, 6, 397],
    [1, 234, 398],
    [1, 6, 399],
    [">", -1],
    [2, 457, -1, {"name":"ParamList"}],
    [[5, 570], 402,
     0, 405],
    [3, "variable", e[19], 403],
    [1, 6, 404],
    [3, "keyword", e[45], 405],
    [1, 6, 406],
    [1, 192, -1],
    [3, "keyword", e[30], 408,
     0, 408,
     0, 416],
    [1, 6, 409],
    [2, 187, 410, {"name":"TypeParams"},
     0, 410],
    [1, 6, 411],
    [2, 457, 412, {"name":"ParamList"}],
    [1, 6, 413],
    [":", 414,
     0, -1],
    [1, 6, 415],
    [1, 401, -1],
    [3, "keyword", e[43], 417,
     "[", 418,
     3, "def property", e[19], 419,
     2, 155, 419, {"name":"string","token":"string"},
     3, "number", e[31], 419],
    [1, 6, 416],
    [1, 6, 420],
    [1, 6, 421],
    [[0, [5, 573], /^[a-zA-Z¡-￿__\$]/, /^[a-zA-Z¡-￿_0-9_\$]*/], 422,
     1, 181, 423],
    [/^\??/, 424],
    [1, 6, 425],
    [1, 6, 426],
    [1, 6, 427],
    [":", 428],
    ["]", 429],
    [2, 187, 430, {"name":"TypeParams"},
     0, 430,
     0, 431],
    [1, 6, 432],
    [1, 6, 433],
    [1, 6, 434],
    [1, 6, 435],
    [1, 192, 423],
    [":", 436],
    [2, 457, 431, {"name":"ParamList"}],
    [":", 437,
     0, -1],
    [1, 6, 438],
    [1, 6, 439],
    [1, 192, -1],
    [1, 401, -1],
    [3, "def property", e[19], 441,
     0, -1],
    [1, 6, 442],
    [3, "operator", "=", 443,
     0, 444],
    [1, 6, 445],
    [1, 6, 446],
    [1, 391, 444],
    [",", 447,
     0, -1],
    [1, 6, 448],
    [3, "def property", e[19], 449,
     0, 450],
    [1, 6, 451],
    [1, 6, 446],
    [3, "operator", "=", 452,
     0, 450],
    [1, 6, 453],
    [1, 391, 450],
    [3, "operator", "...", 455,
     0, 455],
    [1, 6, 456],
    [3, "def", e[19], -1,
     2, 576, -1, {"name":"ArrayPattern"},
     2, 581, -1, {"name":"ObjectPattern"}],
    ["(", 458],
    [1, 6, 459],
    [1, 586, 460],
    [1, 6, 461],
    [")", -1],
    ["(", 463],
    [1, 6, 464],
    [2, 626, 465, {"name":"StatementMaybeOf"}],
    [1, 6, 466],
    [1, 181, 467,
     0, 467,
     0, 471],
    [1, 6, 468],
    [";", 469],
    [1, 6, 470],
    [1, 181, 471,
     0, 471],
    [1, 6, 472],
    [")", -1],
    ["{", 474],
    [1, 6, 475],
    [0, 476,
     "@", 477,
     "}", -1],
    [3, "keyword", e[43], 478,
     3, "keyword", e[47], 479,
     0, 479],
    [1, 6, 480],
    [1, 6, 476],
    [1, 6, 481],
    [1, 181, 482],
    [3, "def property", e[19], 483,
     "[", 484,
     3, "number", e[31], 483,
     2, 155, 483, {"name":"string","token":"string"}],
    [1, 6, 475],
    [1, 6, 485],
    [1, 6, 486],
    [3, "keyword", "*", 487,
     0, 487,
     /^[\!\?]?/, 488],
    [1, 181, 489],
    [1, 6, 490],
    [1, 6, 491],
    [1, 6, 492],
    [2, 273, 482, {"name":"FunctionDef"}],
    [":", 493,
     0, 494],
    ["]", 483],
    [1, 6, 495],
    [1, 6, 496],
    [1, 192, 494],
    [3, "operator", "=", 497,
     0, 498],
    [1, 6, 499],
    [1, 6, 500],
    [1, 181, 498],
    [e[22], 482],
    [3, "tag", /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_])/, 502,
     3, "tag", /^\@[a-zA-Z¡-￿_]+/, -1],
    [e[26], 502,
     "{", 503,
     0, 504,
     0, -1],
    [2, 507, 505, {"name":"doccomment.type"}],
    [3, "def", /^[a-zA-Z¡-￿_]+/, -1,
     0, -1],
    ["}", 506],
    [[1, "\n", "\t", " ", /^\*(?!\/)/], 506,
     0, 504],
    [3, "type", "{", 508,
     3, "type", /^(?:(?!\{|\}|\*\/).)+/, 507,
     "\n", 509,
     0, -1],
    [2, 507, 510, {"name":"doccomment.type"}],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 507],
    [/^(?=\*\/)/, 507,
     3, "type", "}", 507],
    [3, "def", [0, /^[a-zA-Z¡-￿__\$]/, /^[a-zA-Z¡-￿_0-9_\$]*/, [5, 631]], 517,
     [5, 637], 512],
    [2, 457, 513, {"name":"ParamList"}],
    [1, 6, 514],
    [":", 515,
     0, 517],
    [1, 6, 516],
    [1, 401, 517],
    [1, 6, 518],
    [2, 644, -1, {"name":"ArrowRest"}],
    [/^ */, 520],
    [1, 649, 521,
     0, 522],
    [/^ */, 522],
    ["(", -1],
    ["[", 524],
    [1, 6, 525],
    [1, 651, 526],
    [1, 6, 527],
    ["]", -1],
    ["{", 529],
    [1, 6, 530],
    [1, 657, 531],
    [1, 6, 532],
    ["}", -1],
    ["(", 534],
    [1, 6, 535],
    [1, 181, 536],
    [1, 6, 537],
    [")", -1],
    [3, "keyword", e[20], -1],
    ["(", 540],
    [1, 6, 541],
    [1, 651, 542],
    [1, 6, 543],
    [")", -1],
    [/^ */, 545],
    [1, 649, 546,
     0, 547],
    [/^ */, 547],
    ["(", -1],
    [/^(?:\)|\.\.\.)/, -1,
     e[19], 549],
    [1, 6, 550],
    [/^[\?\:]/, -1],
    [3, "keyword", e[33], 552,
     3, "operator", "!", -1,
     3, "operator", e[40], -1,
     3, "operator", e[41], 554,
     3, "keyword", e[42], 554,
     2, 539, -1, {"name":"ArgList"},
     1, 166, -1,
     ".", 556,
     "[", 560,
     3, "operator", "?", 564],
    [1, 6, 553],
    [1, 192, -1],
    [1, 6, 555],
    [1, 391, -1],
    [1, 6, 557],
    [3, "property callee", e[44], 558,
     3, "property", e[19], -1],
    [1, 6, 559],
    [2, 395, -1, {"name":"TypeArgs"},
     0, -1],
    [1, 6, 561],
    [1, 181, 562],
    [1, 6, 563],
    ["]", -1],
    [1, 6, 565],
    [1, 181, 566],
    [1, 6, 567],
    [3, "operator", ":", 568],
    [1, 6, 569],
    [1, 391, -1],
    [e[19], 571],
    [1, 6, 572],
    [3, "keyword", e[45], -1],
    [e[19], 574],
    [1, 6, 575],
    [":", -1],
    ["[", 577],
    [1, 6, 578],
    [1, 663, 579],
    [1, 6, 580],
    ["]", -1],
    ["{", 582],
    [1, 6, 583],
    [1, 669, 584],
    [1, 6, 585],
    ["}", -1],
    ["@", 587,
     0, 588,
     0, -1],
    [1, 6, 589],
    [1, 6, 590],
    [1, 181, 588],
    [3, "keyword", e[43], 591,
     e[46], 592],
    [1, 6, 590],
    [1, 6, 593],
    [1, 454, 594],
    [1, 6, 595],
    [/^\??/, 596],
    [1, 6, 597],
    [":", 598,
     0, 599],
    [1, 6, 600],
    [1, 6, 601],
    [1, 192, 599],
    [3, "operator", "=", 602,
     0, 603],
    [1, 6, 604],
    [1, 6, 605],
    [1, 391, 603],
    [",", 606,
     0, -1],
    [1, 6, 607],
    ["@", 608,
     0, 609,
     0, 610],
    [1, 6, 611],
    [1, 6, 612],
    [1, 6, 605],
    [1, 181, 609],
    [3, "keyword", e[43], 613,
     e[46], 614],
    [1, 6, 612],
    [1, 6, 615],
    [1, 454, 616],
    [1, 6, 617],
    [/^\??/, 618],
    [1, 6, 619],
    [":", 620,
     0, 621],
    [1, 6, 622],
    [1, 6, 623],
    [1, 192, 621],
    [3, "operator", "=", 624,
     0, 610],
    [1, 6, 625],
    [1, 391, 610],
    [2, 7, 627, {"name":"Statement"}],
    [1, 6, 628],
    [3, "keyword", /^of(?![a-zA-Z¡-￿_0-9_\$])/, 629,
     0, -1],
    [1, 6, 630],
    [1, 181, -1],
    [1, 6, 632],
    [":", 633,
     0, 636],
    [1, 6, 634],
    [1, 192, 635],
    [1, 6, 636],
    ["=>", -1],
    [2, 457, 638, {"name":"ParamList"}],
    [1, 6, 639],
    [":", 640,
     0, 642],
    [1, 6, 641],
    [1, 401, 642],
    [1, 6, 643],
    ["=>", -1],
    [3, "operator", "=>", 645],
    [1, 6, 646],
    [2, 187, 647, {"name":"TypeParams"},
     0, 647],
    [1, 6, 648],
    [2, 177, -1, {"name":"Block"},
     1, 391, -1],
    ["<", 650],
    [1, 649, 650,
     [1, "=>", [0, /^(?!\>)/, /^[^]/]], 650,
     ">", -1],
    [1, 391, 652,
     0, -1],
    [1, 6, 653],
    [",", 654,
     0, -1],
    [1, 6, 655],
    [1, 391, 656,
     0, 656],
    [1, 6, 653],
    [2, 675, 658, {"name":"ObjectMember"},
     0, -1],
    [1, 6, 659],
    [",", 660,
     0, -1],
    [1, 6, 661],
    [2, 675, 662, {"name":"ObjectMember"},
     0, 662],
    [1, 6, 659],
    [1, 690, 664,
     0, 664,
     0, -1],
    [1, 6, 665],
    [",", 666,
     0, -1],
    [1, 6, 667],
    [1, 690, 668,
     0, 668,
     0, 668],
    [1, 6, 665],
    [1, 695, 670,
     0, -1],
    [1, 6, 671],
    [",", 672,
     0, -1],
    [1, 6, 673],
    [1, 695, 674,
     0, 674],
    [1, 6, 671],
    [3, "keyword", e[47], 676,
     0, 676],
    [1, 6, 677],
    [3, "def property", e[19], 678,
     "[", 679,
     3, "number", e[31], 678,
     2, 155, 678, {"name":"string","token":"string"},
     3, "operator", "...", 680],
    [1, 6, 681],
    [1, 6, 682],
    [1, 6, 683],
    [3, "keyword", "*", 684,
     0, 684,
     ":", 685,
     0, -1],
    [1, 181, 686],
    [1, 391, -1],
    [1, 6, 687],
    [1, 6, 688],
    [1, 6, 689],
    [2, 273, -1, {"name":"FunctionDef"}],
    [1, 391, -1],
    ["]", 678],
    [1, 454, 691],
    [1, 6, 692],
    [3, "operator", "=", 693,
     0, -1],
    [1, 6, 694],
    [1, 391, -1],
    [3, "def", /^[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*(?![a-z]|[A-Z]|[¡-￿]|_|[0-9]|_|\$| *\:)/, 696,
     3, "property", e[19], 700,
     3, "number", e[31], 700,
     2, 155, 700, {"name":"string","token":"string"},
     3, "operator", "...", 704],
    [1, 6, 697],
    [3, "operator", "=", 698,
     0, -1],
    [1, 6, 699],
    [1, 391, -1],
    [1, 6, 701],
    [":", 702],
    [1, 6, 703],
    [1, 690, -1],
    [1, 6, 705],
    [1, 690, -1]
  ];
  var start = 0;
  var token = 5;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", ObjectPattern: "}", EnumBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && brack != ")") { return base }
      return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^else\b/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
  }

  function canInsertSemi(string, pos) {
    for (var i = pos - 1; i >= 0; i--) {
      var ch = string.charCodeAt(i);
      if (ch === 10) { break }
      if (ch !== 32 && ch !== 9) { return false }
    }
    return true
  }

  var scopes = ["Block", "FunctionDef", "ArrowFunc", "ForStatement", "ParamListSpec"];

  var TSMode = (function (superclass) {
    function TSMode(conf, modeConf) {
      superclass.call(this, grammar, {
        predicates: {canInsertSemi: modeConf.requireSemicolons === false ? canInsertSemi : function () { return false; }}
      });
      this.conf = conf;
    }

    if ( superclass ) TSMode.__proto__ = superclass;
    TSMode.prototype = Object.create( superclass && superclass.prototype );
    TSMode.prototype.constructor = TSMode;

    TSMode.prototype.token = function token$$1 (stream, state) {
      return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
    };

    TSMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (!textAfter) { textAfter = line = "x"; } // Force getContextAt to terminate the statement, if needed
      return indent(state, textAfter, line, this.conf)
    };

    return TSMode;
  }(CodeMirror.GrammarMode));

  var meta = {
    electricInput: /^\s*(?:case .*?:|default:|\{|\})$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    blockCommentContinue: " * ",
    lineComment: "//",
    fold: "brace",
    closeBrackets: "()[]{}''\"\"``"
  };
  for (var prop in meta) { TSMode.prototype[prop] = meta[prop]; }

  CodeMirror.registerHelper("wordChars", "google-typescript", /[\w$]/);

  CodeMirror.defineMode("google-typescript", function (conf, modeConf) { return new TSMode(conf, modeConf); });

})));
