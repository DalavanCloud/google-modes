(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^(?:var|let|const)(?![a-zA-Z¡-￿_0-9_\$])/, /^while(?![a-zA-Z¡-￿_0-9_\$])/, /^with(?![a-zA-Z¡-￿_0-9_\$])/, /^do(?![a-zA-Z¡-￿_0-9_\$])/, /^debugger(?![a-zA-Z¡-￿_0-9_\$])/, /^if(?![a-zA-Z¡-￿_0-9_\$])/, /^function(?![a-zA-Z¡-￿_0-9_\$])/, /^for(?![a-zA-Z¡-￿_0-9_\$])/, /^default(?![a-zA-Z¡-￿_0-9_\$])/, /^case(?![a-zA-Z¡-￿_0-9_\$])/, /^return(?![a-zA-Z¡-￿_0-9_\$])/, /^throw(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9_\$])/, /^switch(?![a-zA-Z¡-￿_0-9_\$])/, /^try(?![a-zA-Z¡-￿_0-9_\$])/, /^class(?![a-zA-Z¡-￿_0-9_\$])/, /^export(?![a-zA-Z¡-￿_0-9_\$])/, /^import(?![a-zA-Z¡-￿_0-9_\$])/, [0, "async", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 139]], /^[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*/, /^extends(?![a-zA-Z¡-￿_0-9_\$])/, /^enum(?![a-zA-Z¡-￿_0-9_\$])/, [1, ";", /^(?=\})/, [7, "canInsertSemi"]], /^from(?![a-zA-Z¡-￿_0-9_\$])/, [1, "\n", "\t", " "], /^[a-zA-Z¡-￿__\$]/, /^const(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:true|false|null|undefined|NaN|Infinity)(?![a-zA-Z¡-￿_0-9_\$])/, /^new(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:0x[0-9a-fA-F]+|0o[0-7]+|0b[01]+|(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)(?:[eE][\+\-]?[0-9]+)?)/, /^else(?![a-zA-Z¡-￿_0-9_\$])/, /^catch(?![a-zA-Z¡-￿_0-9_\$])/, /^finally(?![a-zA-Z¡-￿_0-9_\$])/, /^as(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:super|this)(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:delete|typeof|yield|await)(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:\.\.\.|\!|\+\+?|\-\-?)/, /^\/(?![\/\*])(?:\\.|\[(?:(?!\]).)*\]|(?!\/).)+\/[gimyus]*/, [0, /^[a-zA-Z¡-￿__\$]/, /^[a-zA-Z¡-￿_0-9_\$]*/, [5, 513]], /^(?:\+\+|\-\-)/, /^(?:\+|\-|\%|\*|\/(?![\/\*])|\>\>?\>?|\<\<?|\=\=?|\&\&?|\|\|?|\^|\!\=)\=?/, /^(?:in|instanceof)(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:public|private|protected|readonly|abstract|static)(?![a-zA-Z¡-￿_0-9_\$])/, [0, /^[a-zA-Z¡-￿__\$]/, /^[a-zA-Z¡-￿_0-9_\$]*/, [5, 538]], /^is(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:\.\.\.)?/, /^(?:get|set|async)(?![a-zA-Z¡-￿_0-9_\$])(?! *[\,\}\:\(\<])/];
  var nodes = [
    [1, 6, 2],
    [/^[^]/, 0],
    [1, 6, 3],
    [2, 7, 4, {"name":"Statement"},
     0, 1],
    [1, 6, 3],
    [3, "keyword", e[0], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[32], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[34], -1,
     3, "atom", e[27], -1,
     3, "variable", e[19], -1,
     3, "operator", e[36], -1,
     3, "operator", e[40], -1,
     3, "operator", e[39], -1,
     2, 141, -1, {"name":"string","token":"string"},
     3, "number", e[29], -1,
     2, 146, -1, {"name":"comment","token":"comment"},
     3, "string-2", e[37], -1,
     1, 150, -1,
     /^[^]/, -1],
    [e[24], 6,
     2, 146, 6, {"name":"comment","token":"comment"},
     0, -1],
    [3, "keyword", [0, "type", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 154]], 8,
     3, "keyword", [0, "namespace", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 155]], 18,
     3, "keyword", [0, "interface", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 156]], 26,
     [5, 157], 36,
     3, "keyword", e[21], 37,
     3, "keyword", [0, "declare", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 160]], 43,
     3, "keyword", /^abstract(?![a-zA-Z¡-￿_0-9_\$])/, 43,
     3, "keyword", e[0], 45,
     3, "keyword", e[1], 52,
     3, "keyword", e[2], 52,
     3, "keyword", e[3], 56,
     2, 161, -1, {"name":"Block"},
     ";", -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[5], 64,
     3, "keyword", e[6], 69,
     3, "keyword", e[7], 75,
     3, "keyword", e[8], 77,
     /^[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*(?= *\:)/, 77,
     3, "keyword", e[9], 78,
     3, "keyword", e[10], 81,
     3, "keyword", e[11], 85,
     3, "keyword", e[12], 89,
     3, "keyword", e[13], 93,
     3, "keyword", e[14], 97,
     3, "keyword", e[15], 101,
     3, "keyword", e[16], 105,
     3, "keyword", e[17], 117,
     3, "keyword", e[18], 133,
     "@", 135,
     1, 165, 137],
    [1, 6, 9],
    [3, "def type", e[19], 10],
    [1, 6, 11],
    [2, 171, 12, {"name":"TypeParams"},
     0, 12],
    [1, 6, 13],
    [3, "operator", "=", 14],
    [1, 6, 15],
    [1, 176, 16],
    [1, 6, 17],
    [e[22], -1],
    [1, 6, 19],
    [[5, 215], 20,
     3, "def", e[19], 21],
    [3, "variable", e[19], 22],
    [1, 6, 23],
    [1, 6, 24],
    [2, 161, -1, {"name":"Block"}],
    [".", 25],
    [1, 6, 19],
    [1, 6, 27],
    [3, "def type", e[19], 28],
    [1, 6, 29],
    [2, 171, 30, {"name":"TypeParams"},
     0, 30],
    [1, 6, 31],
    [3, "keyword", e[20], 32,
     0, 33],
    [1, 6, 34],
    [1, 6, 35],
    [1, 218, 33],
    [2, 224, -1, {"name":"ObjType"}],
    [3, "keyword", e[26], 38],
    [1, 6, 39],
    [1, 6, 40],
    [3, "def type", e[19], 41],
    [3, "keyword", e[21], 37],
    [1, 6, 42],
    [2, 232, -1, {"name":"EnumBody"}],
    [1, 6, 44],
    [2, 7, -1, {"name":"Statement"}],
    [1, 6, 46],
    [1, 237, 47],
    [1, 6, 48],
    [",", 49,
     e[22], -1],
    [1, 6, 50],
    [1, 237, 51],
    [1, 6, 48],
    [1, 6, 53],
    [2, 248, 54, {"name":"CondExpr"}],
    [1, 6, 55],
    [2, 7, -1, {"name":"Statement"}],
    [1, 6, 57],
    [2, 7, 58, {"name":"Statement"}],
    [1, 6, 59],
    [3, "keyword", e[1], 60,
     0, -1],
    [1, 6, 61],
    [2, 248, 62, {"name":"CondExpr"}],
    [1, 6, 63],
    [e[22], -1],
    [1, 6, 65],
    [2, 248, 66, {"name":"CondExpr"}],
    [1, 6, 67],
    [2, 7, 68, {"name":"Statement"}],
    [2, 253, -1, {"name":"Alternative"}],
    [1, 6, 70],
    [3, "keyword", "*", 71,
     0, 71],
    [1, 6, 72],
    [3, "def", e[19], 73],
    [1, 6, 74],
    [2, 257, -1, {"name":"FunctionDef"}],
    [1, 6, 76],
    [2, 266, -1, {"name":"ForStatement"}],
    [1, 6, 79],
    [1, 6, 80],
    [":", -1],
    [1, 165, 77],
    [1, 6, 82],
    [e[22], -1,
     1, 165, 83],
    [1, 6, 84],
    [e[22], -1],
    [1, 6, 86],
    [1, 165, 87],
    [1, 6, 88],
    [e[22], -1],
    [1, 6, 90],
    [/^(?:[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*)?/, 91],
    [1, 6, 92],
    [e[22], -1],
    [1, 6, 94],
    [2, 248, 95, {"name":"CondExpr"}],
    [1, 6, 96],
    [2, 161, -1, {"name":"Block"}],
    [1, 6, 98],
    [2, 161, 99, {"name":"Block"}],
    [1, 6, 100],
    [2, 269, -1, {"name":"Catch"}],
    [1, 6, 102],
    [3, "def type", e[19], 103],
    [1, 6, 104],
    [1, 282, -1],
    [1, 6, 106],
    ["*", 107,
     3, "keyword", e[8], 107,
     "{", 108,
     2, 7, -1, {"name":"Statement"}],
    [1, 6, 109],
    [1, 6, 110],
    [3, "keyword", e[23], 111,
     0, 112],
    [1, 293, 113],
    [1, 6, 114],
    [1, 6, 115],
    [1, 6, 116],
    [2, 141, 112, {"name":"string","token":"string"}],
    [e[22], -1],
    ["}", 107],
    [1, 6, 118],
    [2, 141, 119, {"name":"string","token":"string"},
     3, "keyword", "*", 120,
     1, 299, 121,
     "{", 122],
    [1, 6, 123],
    [1, 6, 124],
    [1, 6, 125],
    [1, 6, 126],
    [e[22], -1],
    [3, "keyword", e[33], 127,
     0, 121],
    [3, "keyword", e[23], 128,
     0, 119],
    [1, 293, 129],
    [1, 6, 130],
    [1, 6, 131],
    [1, 6, 132],
    [3, "def", e[19], 121],
    [2, 141, 119, {"name":"string","token":"string"}],
    ["}", 121],
    [1, 6, 134],
    [2, 7, -1, {"name":"Statement"}],
    [1, 6, 136],
    [1, 165, -1],
    [1, 6, 138],
    [e[22], -1],
    [1, 6, 140],
    [3, "keyword", e[6], -1,
     /^(?:[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*|\()/, -1],
    ["'", 142,
     "\"", 144],
    ["\\", 143,
     /^(?!\')./, 142,
     "'", -1],
    [/^[^]/, 142],
    ["\\", 145,
     /^(?!\")./, 144,
     "\"", -1],
    [/^[^]/, 144],
    [/^\/\*\*(?!\/)/, 147,
     "/*", 149,
     /^\/\/.*/, -1],
    [1, 304, 147,
     0, 148],
    [2, 307, 148, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 149,
     "*/", -1],
    [3, "string-2", "`", 151],
    [3, "string-2", "${", 152,
     2, 309, 151, {"name":"str2","token":"string-2"},
     3, "string-2", /^(?:(?!\`|\$\{|\\).)+/, 151,
     3, "string-2", "`", -1],
    [1, 165, 153],
    [3, "string-2", "}", 151],
    [e[24], 154,
     e[25], -1],
    [e[24], 155,
     e[25], -1],
    [e[24], 156,
     e[25], -1],
    [3, "keyword", e[26], 158],
    [1, 6, 159],
    [3, "keyword", e[21], -1],
    [e[24], 160,
     e[25], -1],
    ["{", 162],
    [1, 6, 163],
    [2, 7, 164, {"name":"Statement"},
     "}", -1],
    [1, 6, 163],
    [1, 311, 166],
    [1, 6, 167],
    [",", 168,
     1, 333, 169,
     0, -1],
    [1, 6, 170],
    [1, 6, 167],
    [1, 165, 169],
    ["<", 172],
    [1, 6, 173],
    [1, 352, 174],
    [1, 6, 175],
    [">", -1],
    [3, "keyword", /^this(?![a-zA-Z¡-￿_0-9_\$])/, 200,
     3, "atom", e[27], 200,
     3, "keyword", /^typeof(?![a-zA-Z¡-￿_0-9_\$])/, 177,
     3, "keyword", /^keyof(?![a-zA-Z¡-￿_0-9_\$])/, 178,
     [0, [5, 374], "("], 179,
     3, "keyword", e[28], 180,
     0, 180,
     0, 181,
     2, 377, 200, {"name":"TupleType"},
     2, 224, 200, {"name":"ObjType"},
     2, 141, 200, {"name":"string","token":"string"},
     3, "number", e[29], 200],
    [1, 6, 182],
    [1, 6, 183],
    [1, 6, 184],
    [1, 6, 185],
    [[5, 382], 186,
     3, "type", e[19], 187],
    [1, 385, 200],
    [1, 176, 200],
    [1, 176, 188],
    [2, 171, 189, {"name":"TypeParams"},
     0, 189],
    [3, "variable", e[19], 190],
    [1, 6, 191],
    [1, 6, 192],
    [1, 6, 193],
    [1, 6, 194],
    [2, 389, 200, {"name":"TypeArgs"},
     0, 200],
    [")", 200],
    [2, 394, 195, {"name":"ParamListSpec"}],
    [".", 196],
    [1, 6, 197],
    [1, 6, 181],
    [3, "operator", "=>", 198],
    [1, 6, 199],
    [1, 395, 200],
    [1, 6, 201],
    [3, "operator", /^[\&\|]/, 202,
     3, "keyword", /^(?:extends|implements)(?![a-zA-Z¡-￿_0-9_\$])/, 202,
     "[", 203,
     3, "operator", "?", 204,
     0, -1],
    [1, 6, 205],
    [1, 6, 206],
    [1, 6, 207],
    [1, 176, 208],
    [1, 176, 209,
     0, 209],
    [1, 176, 210],
    [1, 6, 201],
    [1, 6, 211],
    [1, 6, 212],
    ["]", 208],
    [3, "operator", ":", 213],
    [1, 6, 214],
    [1, 176, 208],
    [e[19], 216],
    [1, 6, 217],
    [".", -1],
    [1, 176, 219,
     0, -1],
    [1, 6, 220],
    [",", 221,
     0, -1],
    [1, 6, 222],
    [1, 176, 223,
     0, 223],
    [1, 6, 220],
    ["{", 225],
    [1, 6, 226],
    [1, 401, 227,
     0, 227],
    [1, 6, 228],
    [/^[\,\;]/, 229,
     "}", -1],
    [1, 6, 230],
    [1, 401, 231,
     0, 231],
    [1, 6, 228],
    ["{", 233],
    [1, 6, 234],
    [1, 434, 235],
    [1, 6, 236],
    ["}", -1],
    [1, 448, 238],
    [1, 6, 239],
    [3, "operator", "!", 240,
     0, 240],
    [1, 6, 241],
    [":", 242,
     0, 244],
    [1, 6, 243],
    [1, 176, 244],
    [1, 6, 245],
    [3, "operator", "=", 246,
     0, -1],
    [1, 6, 247],
    [1, 385, -1],
    ["(", 249],
    [1, 6, 250],
    [1, 165, 251],
    [1, 6, 252],
    [")", -1],
    [1, 6, 254],
    [3, "keyword", e[30], 255,
     0, -1],
    [1, 6, 256],
    [2, 7, -1, {"name":"Statement"}],
    [2, 171, 258, {"name":"TypeParams"},
     0, 258],
    [1, 6, 259],
    [2, 451, 260, {"name":"ParamList"}],
    [1, 6, 261],
    [":", 262,
     0, 264],
    [1, 6, 263],
    [1, 395, 264],
    [1, 6, 265],
    [2, 161, -1, {"name":"Block"},
     e[22], -1],
    [2, 456, 267, {"name":"ForSpec"}],
    [1, 6, 268],
    [2, 7, -1, {"name":"Statement"}],
    [3, "keyword", e[31], 270,
     0, 278],
    [1, 6, 271],
    ["(", 272,
     0, 273],
    [1, 6, 274],
    [1, 6, 275],
    [3, "def", e[19], 276],
    [2, 161, 278, {"name":"Block"}],
    [1, 6, 277],
    [")", 273],
    [1, 6, 279],
    [3, "keyword", e[32], 280,
     0, -1],
    [1, 6, 281],
    [2, 161, -1, {"name":"Block"}],
    [2, 171, 283, {"name":"TypeParams"},
     0, 283],
    [1, 6, 284],
    [3, "keyword", e[20], 285,
     0, 287],
    [1, 6, 286],
    [1, 176, 287],
    [1, 6, 288],
    [3, "keyword", /^implements(?![a-zA-Z¡-￿_0-9_\$])/, 289,
     0, 291],
    [1, 6, 290],
    [1, 218, 291],
    [1, 6, 292],
    [2, 467, -1, {"name":"ClassBody"}],
    [1, 299, 294,
     0, -1],
    [1, 6, 295],
    [",", 296,
     0, -1],
    [1, 6, 297],
    [1, 299, 298,
     0, 298],
    [1, 6, 295],
    [3, "variable", /^[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*(?= +as)/, 300,
     3, "def", e[19], -1],
    [1, 6, 301],
    [3, "keyword", e[33], 302],
    [1, 6, 303],
    [3, "def", e[19], -1],
    [0, 305,
     2, 495, -1, {"name":"doccomment.braced"}],
    [[0, /^(?!\*\/|\@[a-zA-Z¡-￿_0-9]|\{)/, /^[^]/], 306],
    [0, 305,
     0, -1],
    [1, 499, 308],
    [1, 304, 308,
     0, -1],
    ["\\", 310,
     "\n", -1],
    [/^[^]/, -1],
    [3, "atom", e[27], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[35], 312,
     3, "operator", e[36], 312,
     3, "keyword", e[18], 312,
     3, "keyword", e[28], 314,
     3, "keyword", e[6], 320,
     3, "keyword", e[15], 326,
     2, 505, -1, {"name":"ArrowFunc"},
     3, "variable callee", e[38], 331,
     3, "variable", e[19], -1,
     3, "number", e[29], -1,
     2, 141, -1, {"name":"string","token":"string"},
     3, "string-2", e[37], -1,
     1, 150, -1,
     2, 517, -1, {"name":"ArrayLiteral"},
     2, 522, -1, {"name":"ObjectLiteral"},
     2, 527, -1, {"name":"ParenExpr"}],
    [1, 6, 313],
    [1, 311, -1],
    [1, 6, 315],
    [".", 316,
     3, "variable callee", e[38], 317,
     1, 311, -1],
    [1, 6, 318],
    [1, 6, 319],
    [3, "keyword", /^target(?![a-zA-Z¡-￿_0-9_\$])/, -1],
    [2, 389, -1, {"name":"TypeArgs"},
     0, -1],
    [1, 6, 321],
    [3, "keyword", "*", 322,
     0, 322],
    [1, 6, 323],
    [3, "def", e[19], 324,
     0, 324],
    [1, 6, 325],
    [2, 257, -1, {"name":"FunctionDef"}],
    [1, 6, 327],
    [[6, 532], 328,
     0, 329],
    [3, "def type", e[19], 329],
    [1, 6, 330],
    [1, 282, -1],
    [1, 6, 332],
    [2, 389, -1, {"name":"TypeArgs"},
     0, -1],
    [3, "keyword", e[33], 334,
     3, "operator", "!", -1,
     3, "operator", e[39], -1,
     3, "operator", e[40], 336,
     3, "keyword", e[41], 336,
     2, 533, -1, {"name":"ArgList"},
     1, 150, -1,
     ".", 338,
     "[", 342,
     3, "operator", "?", 346],
    [1, 6, 335],
    [1, 176, -1],
    [1, 6, 337],
    [1, 165, -1],
    [1, 6, 339],
    [3, "property callee", e[43], 340,
     3, "property", e[19], -1],
    [1, 6, 341],
    [2, 389, -1, {"name":"TypeArgs"},
     0, -1],
    [1, 6, 343],
    [1, 165, 344],
    [1, 6, 345],
    ["]", -1],
    [1, 6, 347],
    [1, 165, 348],
    [1, 6, 349],
    [3, "operator", ":", 350],
    [1, 6, 351],
    [1, 165, -1],
    [3, "def type", e[19], 353,
     0, -1],
    [1, 6, 354],
    [3, "keyword", e[20], 355,
     0, 356],
    [1, 6, 357],
    [1, 6, 358],
    [1, 176, 356],
    [3, "operator", "=", 359,
     0, 360],
    [1, 6, 361],
    [1, 6, 362],
    [1, 176, 360],
    [",", 363,
     0, -1],
    [1, 6, 364],
    [3, "def type", e[19], 365,
     0, 366],
    [1, 6, 367],
    [1, 6, 362],
    [3, "keyword", e[20], 368,
     0, 369],
    [1, 6, 370],
    [1, 6, 371],
    [1, 176, 369],
    [3, "operator", "=", 372,
     0, 366],
    [1, 6, 373],
    [1, 176, 366],
    ["(", 375],
    [1, 6, 376],
    [[6, 542], -1],
    ["[", 378],
    [1, 6, 379],
    [1, 218, 380],
    [1, 6, 381],
    ["]", -1],
    [e[19], 383],
    [1, 6, 384],
    [".", -1],
    [1, 311, 386],
    [1, 6, 387],
    [1, 545, 388,
     0, -1],
    [1, 6, 387],
    ["<", 390],
    [1, 6, 391],
    [1, 218, 392],
    [1, 6, 393],
    [">", -1],
    [2, 451, -1, {"name":"ParamList"}],
    [[5, 564], 396,
     0, 399],
    [3, "variable", e[19], 397],
    [1, 6, 398],
    [3, "keyword", e[44], 399],
    [1, 6, 400],
    [1, 176, -1],
    [3, "keyword", e[28], 402,
     0, 402,
     0, 410],
    [1, 6, 403],
    [2, 171, 404, {"name":"TypeParams"},
     0, 404],
    [1, 6, 405],
    [2, 451, 406, {"name":"ParamList"}],
    [1, 6, 407],
    [":", 408,
     0, -1],
    [1, 6, 409],
    [1, 395, -1],
    [3, "keyword", e[42], 411,
     "[", 412,
     3, "def property", e[19], 413,
     2, 141, 413, {"name":"string","token":"string"},
     3, "number", e[29], 413],
    [1, 6, 410],
    [1, 6, 414],
    [1, 6, 415],
    [[0, [5, 567], /^[a-zA-Z¡-￿__\$]/, /^[a-zA-Z¡-￿_0-9_\$]*/], 416,
     1, 165, 417],
    [/^\??/, 418],
    [1, 6, 419],
    [1, 6, 420],
    [1, 6, 421],
    [":", 422,
     3, "keyword", /^in(?![a-zA-Z¡-￿_0-9_\$])/, 422],
    ["]", 423],
    [2, 171, 424, {"name":"TypeParams"},
     0, 424,
     0, 425],
    [1, 6, 426],
    [1, 6, 427],
    [1, 6, 428],
    [1, 6, 429],
    [1, 176, 417],
    [":", 430],
    [2, 451, 425, {"name":"ParamList"}],
    [":", 431,
     0, -1],
    [1, 6, 432],
    [1, 6, 433],
    [1, 176, -1],
    [1, 395, -1],
    [3, "def property", e[19], 435,
     0, -1],
    [1, 6, 436],
    [3, "operator", "=", 437,
     0, 438],
    [1, 6, 439],
    [1, 6, 440],
    [1, 385, 438],
    [",", 441,
     0, -1],
    [1, 6, 442],
    [3, "def property", e[19], 443,
     0, 444],
    [1, 6, 445],
    [1, 6, 440],
    [3, "operator", "=", 446,
     0, 444],
    [1, 6, 447],
    [1, 385, 444],
    [3, "operator", "...", 449,
     0, 449],
    [1, 6, 450],
    [3, "def", e[19], -1,
     2, 570, -1, {"name":"ArrayPattern"},
     2, 575, -1, {"name":"ObjectPattern"}],
    ["(", 452],
    [1, 6, 453],
    [1, 580, 454],
    [1, 6, 455],
    [")", -1],
    ["(", 457],
    [1, 6, 458],
    [2, 620, 459, {"name":"StatementMaybeOf"}],
    [1, 6, 460],
    [1, 165, 461,
     0, 461,
     0, 465],
    [1, 6, 462],
    [";", 463],
    [1, 6, 464],
    [1, 165, 465,
     0, 465],
    [1, 6, 466],
    [")", -1],
    ["{", 468],
    [1, 6, 469],
    [0, 470,
     "@", 471,
     "}", -1],
    [3, "keyword", e[42], 472,
     3, "keyword", e[46], 473,
     0, 473],
    [1, 6, 474],
    [1, 6, 470],
    [1, 6, 475],
    [1, 165, 476],
    [3, "def property", e[19], 477,
     "[", 478,
     3, "number", e[29], 477,
     2, 141, 477, {"name":"string","token":"string"}],
    [1, 6, 469],
    [1, 6, 479],
    [1, 6, 480],
    [3, "keyword", "*", 481,
     0, 481,
     /^[\!\?]?/, 482],
    [1, 165, 483],
    [1, 6, 484],
    [1, 6, 485],
    [1, 6, 486],
    [2, 257, 476, {"name":"FunctionDef"}],
    [":", 487,
     0, 488],
    ["]", 477],
    [1, 6, 489],
    [1, 6, 490],
    [1, 176, 488],
    [3, "operator", "=", 491,
     0, 492],
    [1, 6, 493],
    [1, 6, 494],
    [1, 165, 492],
    [e[22], 476],
    ["{", 496],
    [1, 499, 497,
     1, 304, 498],
    [[0, /^(?!\}|\*\/)/, /^[^]/], 497,
     0, 498],
    [/^(?:\}|(?=\*\/))/, -1],
    [3, "tag", /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_0-9])/, 500,
     3, "tag", /^\@[a-zA-Z¡-￿_0-9]+/, -1],
    [e[24], 500,
     "{", 501,
     0, 502,
     0, -1],
    [2, 625, 503, {"name":"doccomment.type"}],
    [3, "def", /^[a-zA-Z¡-￿_0-9]+/, -1,
     0, -1],
    ["}", 504],
    [[1, "\n", "\t", " ", /^\*(?!\/)/], 504,
     0, 502],
    [3, "def", [0, /^[a-zA-Z¡-￿__\$]/, /^[a-zA-Z¡-￿_0-9_\$]*/, [5, 629]], 511,
     [5, 635], 506],
    [2, 451, 507, {"name":"ParamList"}],
    [1, 6, 508],
    [":", 509,
     0, 511],
    [1, 6, 510],
    [1, 395, 511],
    [1, 6, 512],
    [2, 642, -1, {"name":"ArrowRest"}],
    [/^\<(?! )/, -1,
     /^ */, 514],
    [1, 647, 515,
     0, 516],
    [/^ */, 516],
    ["(", -1],
    ["[", 518],
    [1, 6, 519],
    [1, 649, 520],
    [1, 6, 521],
    ["]", -1],
    ["{", 523],
    [1, 6, 524],
    [1, 655, 525],
    [1, 6, 526],
    ["}", -1],
    ["(", 528],
    [1, 6, 529],
    [1, 165, 530],
    [1, 6, 531],
    [")", -1],
    [3, "keyword", e[20], -1],
    ["(", 534],
    [1, 6, 535],
    [1, 649, 536],
    [1, 6, 537],
    [")", -1],
    [/^ */, 539],
    [1, 647, 540,
     0, 541],
    [/^ */, 541],
    ["(", -1],
    [/^(?:\)|\.\.\.)/, -1,
     e[19], 543],
    [1, 6, 544],
    [/^[\?\:]/, -1],
    [3, "keyword", e[33], 546,
     3, "operator", "!", -1,
     3, "operator", e[39], -1,
     3, "operator", e[40], 548,
     3, "keyword", e[41], 548,
     2, 533, -1, {"name":"ArgList"},
     1, 150, -1,
     ".", 550,
     "[", 554,
     3, "operator", "?", 558],
    [1, 6, 547],
    [1, 176, -1],
    [1, 6, 549],
    [1, 385, -1],
    [1, 6, 551],
    [3, "property callee", e[43], 552,
     3, "property", e[19], -1],
    [1, 6, 553],
    [2, 389, -1, {"name":"TypeArgs"},
     0, -1],
    [1, 6, 555],
    [1, 165, 556],
    [1, 6, 557],
    ["]", -1],
    [1, 6, 559],
    [1, 165, 560],
    [1, 6, 561],
    [3, "operator", ":", 562],
    [1, 6, 563],
    [1, 385, -1],
    [e[19], 565],
    [1, 6, 566],
    [3, "keyword", e[44], -1],
    [e[19], 568],
    [1, 6, 569],
    [/^(?:\:|in)/, -1],
    ["[", 571],
    [1, 6, 572],
    [1, 661, 573],
    [1, 6, 574],
    ["]", -1],
    ["{", 576],
    [1, 6, 577],
    [1, 667, 578],
    [1, 6, 579],
    ["}", -1],
    ["@", 581,
     0, 582,
     0, -1],
    [1, 6, 583],
    [3, "keyword", e[42], 584,
     e[45], 585],
    [1, 165, 586],
    [1, 6, 582],
    [1, 6, 587],
    [1, 6, 580],
    [1, 448, 588],
    [1, 6, 589],
    [/^\??/, 590],
    [1, 6, 591],
    [":", 592,
     0, 593],
    [1, 6, 594],
    [1, 6, 595],
    [1, 176, 593],
    [3, "operator", "=", 596,
     0, 597],
    [1, 6, 598],
    [1, 6, 599],
    [1, 385, 597],
    [",", 600,
     0, -1],
    [1, 6, 601],
    ["@", 602,
     0, 603,
     0, 604],
    [1, 6, 605],
    [3, "keyword", e[42], 606,
     e[45], 607],
    [1, 6, 599],
    [1, 165, 608],
    [1, 6, 603],
    [1, 6, 609],
    [1, 6, 601],
    [1, 448, 610],
    [1, 6, 611],
    [/^\??/, 612],
    [1, 6, 613],
    [":", 614,
     0, 615],
    [1, 6, 616],
    [1, 6, 617],
    [1, 176, 615],
    [3, "operator", "=", 618,
     0, 604],
    [1, 6, 619],
    [1, 385, 604],
    [2, 7, 621, {"name":"Statement"}],
    [1, 6, 622],
    [3, "keyword", /^of(?![a-zA-Z¡-￿_0-9_\$])/, 623,
     0, -1],
    [1, 6, 624],
    [1, 165, -1],
    [3, "type", "{", 626,
     3, "type", /^(?:(?!\{|\}|\*\/).)+/, 625,
     "\n", 627,
     0, -1],
    [2, 625, 628, {"name":"doccomment.type"}],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 625],
    [/^(?=\*\/)/, 625,
     3, "type", "}", 625],
    [1, 6, 630],
    [":", 631,
     0, 634],
    [1, 6, 632],
    [1, 176, 633],
    [1, 6, 634],
    ["=>", -1],
    [2, 451, 636, {"name":"ParamList"}],
    [1, 6, 637],
    [":", 638,
     0, 640],
    [1, 6, 639],
    [1, 395, 640],
    [1, 6, 641],
    ["=>", -1],
    [3, "operator", "=>", 643],
    [1, 6, 644],
    [2, 171, 645, {"name":"TypeParams"},
     0, 645],
    [1, 6, 646],
    [2, 161, -1, {"name":"Block"},
     1, 385, -1],
    ["<", 648],
    [1, 647, 648,
     [1, "=>", [0, /^(?!\>)/, /^[^]/]], 648,
     ">", -1],
    [1, 385, 650,
     0, -1],
    [1, 6, 651],
    [",", 652,
     0, -1],
    [1, 6, 653],
    [1, 385, 654,
     0, 654],
    [1, 6, 651],
    [2, 673, 656, {"name":"ObjectMember"},
     0, -1],
    [1, 6, 657],
    [",", 658,
     0, -1],
    [1, 6, 659],
    [2, 673, 660, {"name":"ObjectMember"},
     0, 660],
    [1, 6, 657],
    [1, 688, 662,
     0, 662,
     0, -1],
    [1, 6, 663],
    [",", 664,
     0, -1],
    [1, 6, 665],
    [1, 688, 666,
     0, 666,
     0, 666],
    [1, 6, 663],
    [1, 693, 668,
     0, -1],
    [1, 6, 669],
    [",", 670,
     0, -1],
    [1, 6, 671],
    [1, 693, 672,
     0, 672],
    [1, 6, 669],
    [3, "keyword", e[46], 674,
     0, 674],
    [1, 6, 675],
    [3, "def property", e[19], 676,
     "[", 677,
     3, "number", e[29], 676,
     2, 141, 676, {"name":"string","token":"string"},
     3, "operator", "...", 678],
    [1, 6, 679],
    [1, 6, 680],
    [1, 6, 681],
    [3, "keyword", "*", 682,
     0, 682,
     ":", 683,
     0, -1],
    [1, 165, 684],
    [1, 385, -1],
    [1, 6, 685],
    [1, 6, 686],
    [1, 6, 687],
    [2, 257, -1, {"name":"FunctionDef"}],
    [1, 385, -1],
    ["]", 676],
    [1, 448, 689],
    [1, 6, 690],
    [3, "operator", "=", 691,
     0, -1],
    [1, 6, 692],
    [1, 385, -1],
    [3, "def", /^[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*(?![a-z]|[A-Z]|[¡-￿]|_|[0-9]|_|\$| *\:)/, 694,
     3, "property", e[19], 698,
     3, "number", e[29], 698,
     2, 141, 698, {"name":"string","token":"string"},
     3, "operator", "...", 702],
    [1, 6, 695],
    [3, "operator", "=", 696,
     0, -1],
    [1, 6, 697],
    [1, 385, -1],
    [1, 6, 699],
    [":", 700],
    [1, 6, 701],
    [1, 688, -1],
    [1, 6, 703],
    [1, 688, -1]
  ];
  var start = 0;
  var token = 5;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", ObjectPattern: "}", EnumBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && brack != ")") { return base }
      return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^(else\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
  }

  function canInsertSemi(string, pos) {
    for (var i = pos - 1; i >= 0; i--) {
      var ch = string.charCodeAt(i);
      if (ch === 10) { break }
      if (ch !== 32 && ch !== 9) { return false }
    }
    return true
  }

  var scopes = ["Block", "FunctionDef", "ArrowFunc", "ForStatement", "ParamListSpec"];

  var TSMode = (function (superclass) {
    function TSMode(conf, modeConf) {
      superclass.call(this, grammar, {
        predicates: {canInsertSemi: modeConf.requireSemicolons === false ? canInsertSemi : function () { return false; }}
      });
      this.conf = conf;
    }

    if ( superclass ) TSMode.__proto__ = superclass;
    TSMode.prototype = Object.create( superclass && superclass.prototype );
    TSMode.prototype.constructor = TSMode;

    TSMode.prototype.token = function token$$1 (stream, state) {
      return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
    };

    TSMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (!textAfter) { textAfter = line = "x"; } // Force getContextAt to terminate the statement, if needed
      return indent(state, textAfter, line, this.conf)
    };

    return TSMode;
  }(CodeMirror.GrammarMode));

  var meta = {
    electricInput: /^\s*(?:case .*?:|default:|\{|\})$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    blockCommentContinue: " * ",
    lineComment: "//",
    fold: "brace",
    closeBrackets: "()[]{}''\"\"``"
  };
  for (var prop in meta) { TSMode.prototype[prop] = meta[prop]; }

  CodeMirror.registerHelper("wordChars", "google-typescript", /[\w$]/);

  CodeMirror.defineMode("google-typescript", function (conf, modeConf) { return new TSMode(conf, modeConf); });

})));
