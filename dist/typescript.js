(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^(?:var|let|const)(?![a-zA-Z¡-￿_0-9_\$])/, /^while(?![a-zA-Z¡-￿_0-9_\$])/, /^with(?![a-zA-Z¡-￿_0-9_\$])/, /^do(?![a-zA-Z¡-￿_0-9_\$])/, /^debugger(?![a-zA-Z¡-￿_0-9_\$])/, /^if(?![a-zA-Z¡-￿_0-9_\$])/, /^function(?![a-zA-Z¡-￿_0-9_\$])/, /^for(?![a-zA-Z¡-￿_0-9_\$])/, /^default(?![a-zA-Z¡-￿_0-9_\$])/, /^case(?![a-zA-Z¡-￿_0-9_\$])/, /^return(?![a-zA-Z¡-￿_0-9_\$])/, /^throw(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9_\$])/, /^switch(?![a-zA-Z¡-￿_0-9_\$])/, /^try(?![a-zA-Z¡-￿_0-9_\$])/, /^class(?![a-zA-Z¡-￿_0-9_\$])/, /^export(?![a-zA-Z¡-￿_0-9_\$])/, /^import(?![a-zA-Z¡-￿_0-9_\$])/, [0, "async", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 139]], /^[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*/, /^extends(?![a-zA-Z¡-￿_0-9_\$])/, /^enum(?![a-zA-Z¡-￿_0-9_\$])/, [1, ";", /^(?=\})/, [7, "canInsertSemi"]], /^from(?![a-zA-Z¡-￿_0-9_\$])/, [1, "\n", "\t", " "], /^[a-zA-Z¡-￿__\$]/, /^const(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:true|false|null|undefined|NaN|Infinity)(?![a-zA-Z¡-￿_0-9_\$])/, /^new(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:0x[0-9a-fA-F]+|0o[0-7]+|0b[01]+|(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)(?:[eE][\+\-]?[0-9]+)?)/, /^else(?![a-zA-Z¡-￿_0-9_\$])/, /^catch(?![a-zA-Z¡-￿_0-9_\$])/, /^finally(?![a-zA-Z¡-￿_0-9_\$])/, /^as(?![a-zA-Z¡-￿_0-9_\$])/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_0-9]|\{)/, /^[^]/], /^(?:super|this)(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:delete|typeof|yield|await)(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:\.\.\.|\!|\+\+?|\-\-?)/, /^\/(?![\/\*])(?:\\.|\[(?:(?!\]).)*\]|(?!\/).)+\/[gimyus]*/, [0, /^[a-zA-Z¡-￿__\$]/, /^[a-zA-Z¡-￿_0-9_\$]*/, [5, 518]], /^(?:\+\+|\-\-)/, /^(?:\+|\-|\%|\*|\/(?![\/\*])|\>\>?\>?|\<\<?|\=\=?|\&\&?|\|\|?|\^|\!\=)\=?/, /^(?:in|instanceof)(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:public|private|protected|readonly|abstract|static)(?![a-zA-Z¡-￿_0-9_\$])/, [0, /^[a-zA-Z¡-￿__\$]/, /^[a-zA-Z¡-￿_0-9_\$]*/, [5, 543]], /^is(?![a-zA-Z¡-￿_0-9_\$])/, /^(?:\.\.\.)?/, /^(?:get|set|async)(?![a-zA-Z¡-￿_0-9_\$])(?! *[\,\}\:\(\<])/];
  var nodes = [
    [1, 6, 2],
    [/^[^]/, 0],
    [1, 6, 3],
    [2, 7, 4, {"name":"Statement"},
     0, 1],
    [1, 6, 3],
    [3, "keyword", e[0], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[32], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[35], -1,
     3, "atom", e[27], -1,
     3, "variable", e[19], -1,
     3, "operator", e[37], -1,
     3, "operator", e[41], -1,
     3, "operator", e[40], -1,
     2, 141, -1, {"name":"string","token":"string"},
     3, "number", e[29], -1,
     2, 146, -1, {"name":"comment","token":"comment"},
     3, "string-2", e[38], -1,
     1, 152, -1,
     /^[^]/, -1],
    [e[24], 6,
     2, 146, 6, {"name":"comment","token":"comment"},
     0, -1],
    [3, "keyword", [0, "type", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 156]], 8,
     3, "keyword", [0, "namespace", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 157]], 18,
     3, "keyword", [0, "interface", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 158]], 26,
     [5, 159], 36,
     3, "keyword", e[21], 37,
     3, "keyword", [0, "declare", /^(?![a-zA-Z¡-￿_0-9_\$])/, [5, 162]], 43,
     3, "keyword", /^abstract(?![a-zA-Z¡-￿_0-9_\$])/, 43,
     3, "keyword", e[0], 45,
     3, "keyword", e[1], 52,
     3, "keyword", e[2], 52,
     3, "keyword", e[3], 56,
     2, 163, -1, {"name":"Block"},
     ";", -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[5], 64,
     3, "keyword", e[6], 69,
     3, "keyword", e[7], 75,
     3, "keyword", e[8], 77,
     /^[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*(?= *\:)/, 77,
     3, "keyword", e[9], 78,
     3, "keyword", e[10], 81,
     3, "keyword", e[11], 85,
     3, "keyword", e[12], 89,
     3, "keyword", e[13], 93,
     3, "keyword", e[14], 97,
     3, "keyword", e[15], 101,
     3, "keyword", e[16], 105,
     3, "keyword", e[17], 117,
     3, "keyword", e[18], 133,
     "@", 135,
     1, 167, 137],
    [1, 6, 9],
    [3, "def type", e[19], 10],
    [1, 6, 11],
    [2, 173, 12, {"name":"TypeParams"},
     0, 12],
    [1, 6, 13],
    [3, "operator", "=", 14],
    [1, 6, 15],
    [1, 178, 16],
    [1, 6, 17],
    [e[22], -1],
    [1, 6, 19],
    [[5, 217], 20,
     3, "def", e[19], 21],
    [3, "variable", e[19], 22],
    [1, 6, 23],
    [1, 6, 24],
    [2, 163, -1, {"name":"Block"}],
    [".", 25],
    [1, 6, 19],
    [1, 6, 27],
    [3, "def type", e[19], 28],
    [1, 6, 29],
    [2, 173, 30, {"name":"TypeParams"},
     0, 30],
    [1, 6, 31],
    [3, "keyword", e[20], 32,
     0, 33],
    [1, 6, 34],
    [1, 6, 35],
    [1, 220, 33],
    [2, 226, -1, {"name":"ObjType"}],
    [3, "keyword", e[26], 38],
    [1, 6, 39],
    [1, 6, 40],
    [3, "def type", e[19], 41],
    [3, "keyword", e[21], 37],
    [1, 6, 42],
    [2, 234, -1, {"name":"EnumBody"}],
    [1, 6, 44],
    [2, 7, -1, {"name":"Statement"}],
    [1, 6, 46],
    [1, 239, 47],
    [1, 6, 48],
    [",", 49,
     e[22], -1],
    [1, 6, 50],
    [1, 239, 51],
    [1, 6, 48],
    [1, 6, 53],
    [2, 250, 54, {"name":"CondExpr"}],
    [1, 6, 55],
    [2, 7, -1, {"name":"Statement"}],
    [1, 6, 57],
    [2, 7, 58, {"name":"Statement"}],
    [1, 6, 59],
    [3, "keyword", e[1], 60,
     0, -1],
    [1, 6, 61],
    [2, 250, 62, {"name":"CondExpr"}],
    [1, 6, 63],
    [e[22], -1],
    [1, 6, 65],
    [2, 250, 66, {"name":"CondExpr"}],
    [1, 6, 67],
    [2, 7, 68, {"name":"Statement"}],
    [2, 255, -1, {"name":"Alternative"}],
    [1, 6, 70],
    [3, "keyword", "*", 71,
     0, 71],
    [1, 6, 72],
    [3, "def", e[19], 73],
    [1, 6, 74],
    [2, 259, -1, {"name":"FunctionDef"}],
    [1, 6, 76],
    [2, 268, -1, {"name":"ForStatement"}],
    [1, 6, 79],
    [1, 6, 80],
    [":", -1],
    [1, 167, 77],
    [1, 6, 82],
    [e[22], -1,
     1, 167, 83],
    [1, 6, 84],
    [e[22], -1],
    [1, 6, 86],
    [1, 167, 87],
    [1, 6, 88],
    [e[22], -1],
    [1, 6, 90],
    [/^(?:[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*)?/, 91],
    [1, 6, 92],
    [e[22], -1],
    [1, 6, 94],
    [2, 250, 95, {"name":"CondExpr"}],
    [1, 6, 96],
    [2, 163, -1, {"name":"Block"}],
    [1, 6, 98],
    [2, 163, 99, {"name":"Block"}],
    [1, 6, 100],
    [2, 271, -1, {"name":"Catch"}],
    [1, 6, 102],
    [3, "def type", e[19], 103],
    [1, 6, 104],
    [1, 284, -1],
    [1, 6, 106],
    ["*", 107,
     3, "keyword", e[8], 107,
     "{", 108,
     2, 7, -1, {"name":"Statement"}],
    [1, 6, 109],
    [1, 6, 110],
    [3, "keyword", e[23], 111,
     0, 112],
    [1, 295, 113],
    [1, 6, 114],
    [1, 6, 115],
    [1, 6, 116],
    [2, 141, 112, {"name":"string","token":"string"}],
    [e[22], -1],
    ["}", 107],
    [1, 6, 118],
    [2, 141, 119, {"name":"string","token":"string"},
     3, "keyword", "*", 120,
     1, 301, 121,
     "{", 122],
    [1, 6, 123],
    [1, 6, 124],
    [1, 6, 125],
    [1, 6, 126],
    [e[22], -1],
    [3, "keyword", e[33], 127,
     0, 121],
    [3, "keyword", e[23], 128,
     0, 119],
    [1, 295, 129],
    [1, 6, 130],
    [1, 6, 131],
    [1, 6, 132],
    [3, "def", e[19], 121],
    [2, 141, 119, {"name":"string","token":"string"}],
    ["}", 121],
    [1, 6, 134],
    [2, 7, -1, {"name":"Statement"}],
    [1, 6, 136],
    [1, 167, -1],
    [1, 6, 138],
    [e[22], -1],
    [1, 6, 140],
    [3, "keyword", e[6], -1,
     /^(?:[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*|\()/, -1],
    ["'", 142,
     "\"", 144],
    ["\\", 143,
     /^(?!\')./, 142,
     "'", -1],
    [/^[^]/, 142],
    ["\\", 145,
     /^(?!\")./, 144,
     "\"", -1],
    [/^[^]/, 144],
    [/^\/\*\*(?!\/)/, 147,
     "/*", 151,
     /^\/\/.*/, -1],
    [0, 148,
     2, 306, 147, {"name":"doccomment.braced"},
     0, 149],
    [e[34], 150],
    [2, 310, 149, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [0, 148,
     0, 147],
    [[0, /^(?!\*\/)/, /^[^]/], 151,
     "*/", -1],
    [3, "string-2", "`", 153],
    [3, "string-2", "${", 154,
     2, 314, 153, {"name":"str2","token":"string-2"},
     3, "string-2", /^(?:(?!\`|\$\{|\\).)+/, 153,
     3, "string-2", "`", -1],
    [1, 167, 155],
    [3, "string-2", "}", 153],
    [e[24], 156,
     e[25], -1],
    [e[24], 157,
     e[25], -1],
    [e[24], 158,
     e[25], -1],
    [3, "keyword", e[26], 160],
    [1, 6, 161],
    [3, "keyword", e[21], -1],
    [e[24], 162,
     e[25], -1],
    ["{", 164],
    [1, 6, 165],
    [2, 7, 166, {"name":"Statement"},
     "}", -1],
    [1, 6, 165],
    [1, 316, 168],
    [1, 6, 169],
    [",", 170,
     1, 338, 171,
     0, -1],
    [1, 6, 172],
    [1, 6, 169],
    [1, 167, 171],
    ["<", 174],
    [1, 6, 175],
    [1, 357, 176],
    [1, 6, 177],
    [">", -1],
    [3, "keyword", /^this(?![a-zA-Z¡-￿_0-9_\$])/, 202,
     3, "atom", e[27], 202,
     3, "keyword", /^typeof(?![a-zA-Z¡-￿_0-9_\$])/, 179,
     3, "keyword", /^keyof(?![a-zA-Z¡-￿_0-9_\$])/, 180,
     [0, [5, 379], "("], 181,
     3, "keyword", e[28], 182,
     0, 182,
     0, 183,
     2, 382, 202, {"name":"TupleType"},
     2, 226, 202, {"name":"ObjType"},
     2, 141, 202, {"name":"string","token":"string"},
     3, "number", e[29], 202],
    [1, 6, 184],
    [1, 6, 185],
    [1, 6, 186],
    [1, 6, 187],
    [[5, 387], 188,
     3, "type", e[19], 189],
    [1, 390, 202],
    [1, 178, 202],
    [1, 178, 190],
    [2, 173, 191, {"name":"TypeParams"},
     0, 191],
    [3, "variable", e[19], 192],
    [1, 6, 193],
    [1, 6, 194],
    [1, 6, 195],
    [1, 6, 196],
    [2, 394, 202, {"name":"TypeArgs"},
     0, 202],
    [")", 202],
    [2, 399, 197, {"name":"ParamListSpec"}],
    [".", 198],
    [1, 6, 199],
    [1, 6, 183],
    [3, "operator", "=>", 200],
    [1, 6, 201],
    [1, 400, 202],
    [1, 6, 203],
    [3, "operator", /^[\&\|]/, 204,
     3, "keyword", /^(?:extends|implements)(?![a-zA-Z¡-￿_0-9_\$])/, 204,
     "[", 205,
     3, "operator", "?", 206,
     0, -1],
    [1, 6, 207],
    [1, 6, 208],
    [1, 6, 209],
    [1, 178, 210],
    [1, 178, 211,
     0, 211],
    [1, 178, 212],
    [1, 6, 203],
    [1, 6, 213],
    [1, 6, 214],
    ["]", 210],
    [3, "operator", ":", 215],
    [1, 6, 216],
    [1, 178, 210],
    [e[19], 218],
    [1, 6, 219],
    [".", -1],
    [1, 178, 221,
     0, -1],
    [1, 6, 222],
    [",", 223,
     0, -1],
    [1, 6, 224],
    [1, 178, 225,
     0, 225],
    [1, 6, 222],
    ["{", 227],
    [1, 6, 228],
    [1, 406, 229,
     0, 229],
    [1, 6, 230],
    [/^[\,\;]/, 231,
     "}", -1],
    [1, 6, 232],
    [1, 406, 233,
     0, 233],
    [1, 6, 230],
    ["{", 235],
    [1, 6, 236],
    [1, 439, 237],
    [1, 6, 238],
    ["}", -1],
    [1, 453, 240],
    [1, 6, 241],
    [3, "operator", "!", 242,
     0, 242],
    [1, 6, 243],
    [":", 244,
     0, 246],
    [1, 6, 245],
    [1, 178, 246],
    [1, 6, 247],
    [3, "operator", "=", 248,
     0, -1],
    [1, 6, 249],
    [1, 390, -1],
    ["(", 251],
    [1, 6, 252],
    [1, 167, 253],
    [1, 6, 254],
    [")", -1],
    [1, 6, 256],
    [3, "keyword", e[30], 257,
     0, -1],
    [1, 6, 258],
    [2, 7, -1, {"name":"Statement"}],
    [2, 173, 260, {"name":"TypeParams"},
     0, 260],
    [1, 6, 261],
    [2, 456, 262, {"name":"ParamList"}],
    [1, 6, 263],
    [":", 264,
     0, 266],
    [1, 6, 265],
    [1, 400, 266],
    [1, 6, 267],
    [2, 163, -1, {"name":"Block"},
     e[22], -1],
    [2, 461, 269, {"name":"ForSpec"}],
    [1, 6, 270],
    [2, 7, -1, {"name":"Statement"}],
    [3, "keyword", e[31], 272,
     0, 280],
    [1, 6, 273],
    ["(", 274,
     0, 275],
    [1, 6, 276],
    [1, 6, 277],
    [3, "def", e[19], 278],
    [2, 163, 280, {"name":"Block"}],
    [1, 6, 279],
    [")", 275],
    [1, 6, 281],
    [3, "keyword", e[32], 282,
     0, -1],
    [1, 6, 283],
    [2, 163, -1, {"name":"Block"}],
    [2, 173, 285, {"name":"TypeParams"},
     0, 285],
    [1, 6, 286],
    [3, "keyword", e[20], 287,
     0, 289],
    [1, 6, 288],
    [1, 178, 289],
    [1, 6, 290],
    [3, "keyword", /^implements(?![a-zA-Z¡-￿_0-9_\$])/, 291,
     0, 293],
    [1, 6, 292],
    [1, 220, 293],
    [1, 6, 294],
    [2, 472, -1, {"name":"ClassBody"}],
    [1, 301, 296,
     0, -1],
    [1, 6, 297],
    [",", 298,
     0, -1],
    [1, 6, 299],
    [1, 301, 300,
     0, 300],
    [1, 6, 297],
    [3, "variable", /^[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*(?= +as)/, 302,
     3, "def", e[19], -1],
    [1, 6, 303],
    [3, "keyword", e[33], 304],
    [1, 6, 305],
    [3, "def", e[19], -1],
    ["{", 307],
    [1, 500, 308,
     2, 506, 309, {"name":"doccomment.type"}],
    [[0, /^(?!\}|\*\/)/, /^[^]/], 308,
     0, 309],
    [/^(?:\}|(?=\*\/))/, -1],
    [1, 500, 311],
    [0, 312,
     2, 306, 311, {"name":"doccomment.braced"},
     0, -1],
    [e[34], 313],
    [0, 312,
     0, 311],
    ["\\", 315,
     "\n", -1],
    [/^[^]/, -1],
    [3, "atom", e[27], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[36], 317,
     3, "operator", e[37], 317,
     3, "keyword", e[18], 317,
     3, "keyword", e[28], 319,
     3, "keyword", e[6], 325,
     3, "keyword", e[15], 331,
     2, 510, -1, {"name":"ArrowFunc"},
     3, "variable callee", e[39], 336,
     3, "variable", e[19], -1,
     3, "number", e[29], -1,
     2, 141, -1, {"name":"string","token":"string"},
     3, "string-2", e[38], -1,
     1, 152, -1,
     2, 522, -1, {"name":"ArrayLiteral"},
     2, 527, -1, {"name":"ObjectLiteral"},
     2, 532, -1, {"name":"ParenExpr"}],
    [1, 6, 318],
    [1, 316, -1],
    [1, 6, 320],
    [".", 321,
     3, "variable callee", e[39], 322,
     1, 316, -1],
    [1, 6, 323],
    [1, 6, 324],
    [3, "keyword", /^target(?![a-zA-Z¡-￿_0-9_\$])/, -1],
    [2, 394, -1, {"name":"TypeArgs"},
     0, -1],
    [1, 6, 326],
    [3, "keyword", "*", 327,
     0, 327],
    [1, 6, 328],
    [3, "def", e[19], 329,
     0, 329],
    [1, 6, 330],
    [2, 259, -1, {"name":"FunctionDef"}],
    [1, 6, 332],
    [[6, 537], 333,
     0, 334],
    [3, "def type", e[19], 334],
    [1, 6, 335],
    [1, 284, -1],
    [1, 6, 337],
    [2, 394, -1, {"name":"TypeArgs"},
     0, -1],
    [3, "keyword", e[33], 339,
     3, "operator", "!", -1,
     3, "operator", e[40], -1,
     3, "operator", e[41], 341,
     3, "keyword", e[42], 341,
     2, 538, -1, {"name":"ArgList"},
     1, 152, -1,
     ".", 343,
     "[", 347,
     3, "operator", "?", 351],
    [1, 6, 340],
    [1, 178, -1],
    [1, 6, 342],
    [1, 167, -1],
    [1, 6, 344],
    [3, "property callee", e[44], 345,
     3, "property", e[19], -1],
    [1, 6, 346],
    [2, 394, -1, {"name":"TypeArgs"},
     0, -1],
    [1, 6, 348],
    [1, 167, 349],
    [1, 6, 350],
    ["]", -1],
    [1, 6, 352],
    [1, 167, 353],
    [1, 6, 354],
    [3, "operator", ":", 355],
    [1, 6, 356],
    [1, 167, -1],
    [3, "def type", e[19], 358,
     0, -1],
    [1, 6, 359],
    [3, "keyword", e[20], 360,
     0, 361],
    [1, 6, 362],
    [1, 6, 363],
    [1, 178, 361],
    [3, "operator", "=", 364,
     0, 365],
    [1, 6, 366],
    [1, 6, 367],
    [1, 178, 365],
    [",", 368,
     0, -1],
    [1, 6, 369],
    [3, "def type", e[19], 370,
     0, 371],
    [1, 6, 372],
    [1, 6, 367],
    [3, "keyword", e[20], 373,
     0, 374],
    [1, 6, 375],
    [1, 6, 376],
    [1, 178, 374],
    [3, "operator", "=", 377,
     0, 371],
    [1, 6, 378],
    [1, 178, 371],
    ["(", 380],
    [1, 6, 381],
    [[6, 547], -1],
    ["[", 383],
    [1, 6, 384],
    [1, 220, 385],
    [1, 6, 386],
    ["]", -1],
    [e[19], 388],
    [1, 6, 389],
    [".", -1],
    [1, 316, 391],
    [1, 6, 392],
    [1, 550, 393,
     0, -1],
    [1, 6, 392],
    ["<", 395],
    [1, 6, 396],
    [1, 220, 397],
    [1, 6, 398],
    [">", -1],
    [2, 456, -1, {"name":"ParamList"}],
    [[5, 569], 401,
     0, 404],
    [3, "variable", e[19], 402],
    [1, 6, 403],
    [3, "keyword", e[45], 404],
    [1, 6, 405],
    [1, 178, -1],
    [3, "keyword", e[28], 407,
     0, 407,
     0, 415],
    [1, 6, 408],
    [2, 173, 409, {"name":"TypeParams"},
     0, 409],
    [1, 6, 410],
    [2, 456, 411, {"name":"ParamList"}],
    [1, 6, 412],
    [":", 413,
     0, -1],
    [1, 6, 414],
    [1, 400, -1],
    [3, "keyword", e[43], 416,
     "[", 417,
     3, "def property", e[19], 418,
     2, 141, 418, {"name":"string","token":"string"},
     3, "number", e[29], 418],
    [1, 6, 415],
    [1, 6, 419],
    [1, 6, 420],
    [[0, [5, 572], /^[a-zA-Z¡-￿__\$]/, /^[a-zA-Z¡-￿_0-9_\$]*/], 421,
     1, 167, 422],
    [/^\??/, 423],
    [1, 6, 424],
    [1, 6, 425],
    [1, 6, 426],
    [":", 427,
     3, "keyword", /^in(?![a-zA-Z¡-￿_0-9_\$])/, 427],
    ["]", 428],
    [2, 173, 429, {"name":"TypeParams"},
     0, 429,
     0, 430],
    [1, 6, 431],
    [1, 6, 432],
    [1, 6, 433],
    [1, 6, 434],
    [1, 178, 422],
    [":", 435],
    [2, 456, 430, {"name":"ParamList"}],
    [":", 436,
     0, -1],
    [1, 6, 437],
    [1, 6, 438],
    [1, 178, -1],
    [1, 400, -1],
    [3, "def property", e[19], 440,
     0, -1],
    [1, 6, 441],
    [3, "operator", "=", 442,
     0, 443],
    [1, 6, 444],
    [1, 6, 445],
    [1, 390, 443],
    [",", 446,
     0, -1],
    [1, 6, 447],
    [3, "def property", e[19], 448,
     0, 449],
    [1, 6, 450],
    [1, 6, 445],
    [3, "operator", "=", 451,
     0, 449],
    [1, 6, 452],
    [1, 390, 449],
    [3, "operator", "...", 454,
     0, 454],
    [1, 6, 455],
    [3, "def", e[19], -1,
     2, 575, -1, {"name":"ArrayPattern"},
     2, 580, -1, {"name":"ObjectPattern"}],
    ["(", 457],
    [1, 6, 458],
    [1, 585, 459],
    [1, 6, 460],
    [")", -1],
    ["(", 462],
    [1, 6, 463],
    [2, 625, 464, {"name":"StatementMaybeOf"}],
    [1, 6, 465],
    [1, 167, 466,
     0, 466,
     0, 470],
    [1, 6, 467],
    [";", 468],
    [1, 6, 469],
    [1, 167, 470,
     0, 470],
    [1, 6, 471],
    [")", -1],
    ["{", 473],
    [1, 6, 474],
    [0, 475,
     "@", 476,
     "}", -1],
    [3, "keyword", e[43], 477,
     3, "keyword", e[47], 478,
     0, 478],
    [1, 6, 479],
    [1, 6, 475],
    [1, 6, 480],
    [1, 167, 481],
    [3, "def property", e[19], 482,
     "[", 483,
     3, "number", e[29], 482,
     2, 141, 482, {"name":"string","token":"string"}],
    [1, 6, 474],
    [1, 6, 484],
    [1, 6, 485],
    [3, "keyword", "*", 486,
     0, 486,
     /^[\!\?]?/, 487],
    [1, 167, 488],
    [1, 6, 489],
    [1, 6, 490],
    [1, 6, 491],
    [2, 259, 481, {"name":"FunctionDef"}],
    [":", 492,
     0, 493],
    ["]", 482],
    [1, 6, 494],
    [1, 6, 495],
    [1, 178, 493],
    [3, "operator", "=", 496,
     0, 497],
    [1, 6, 498],
    [1, 6, 499],
    [1, 167, 497],
    [e[22], 481],
    [3, "tag", /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_0-9])/, 501,
     3, "tag", /^\@[a-zA-Z¡-￿_0-9]+/, -1],
    [e[24], 501,
     "{", 502,
     0, 503,
     0, -1],
    [2, 506, 504, {"name":"doccomment.type"}],
    [3, "def", /^[a-zA-Z¡-￿_0-9]+/, -1,
     0, -1],
    ["}", 505],
    [[1, "\n", "\t", " ", /^\*(?!\/)/], 505,
     0, 503],
    [3, "type", "{", 507,
     3, "type", /^(?:(?!\{|\}|\*\/).)+/, 506,
     "\n", 508,
     0, -1],
    [2, 506, 509, {"name":"doccomment.type"}],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 506],
    [/^(?=\*\/)/, 506,
     3, "type", "}", 506],
    [3, "def", [0, /^[a-zA-Z¡-￿__\$]/, /^[a-zA-Z¡-￿_0-9_\$]*/, [5, 630]], 516,
     [5, 636], 511],
    [2, 456, 512, {"name":"ParamList"}],
    [1, 6, 513],
    [":", 514,
     0, 516],
    [1, 6, 515],
    [1, 400, 516],
    [1, 6, 517],
    [2, 643, -1, {"name":"ArrowRest"}],
    [/^\<(?! )/, -1,
     /^ */, 519],
    [1, 648, 520,
     0, 521],
    [/^ */, 521],
    ["(", -1],
    ["[", 523],
    [1, 6, 524],
    [1, 650, 525],
    [1, 6, 526],
    ["]", -1],
    ["{", 528],
    [1, 6, 529],
    [1, 656, 530],
    [1, 6, 531],
    ["}", -1],
    ["(", 533],
    [1, 6, 534],
    [1, 167, 535],
    [1, 6, 536],
    [")", -1],
    [3, "keyword", e[20], -1],
    ["(", 539],
    [1, 6, 540],
    [1, 650, 541],
    [1, 6, 542],
    [")", -1],
    [/^ */, 544],
    [1, 648, 545,
     0, 546],
    [/^ */, 546],
    ["(", -1],
    [/^(?:\)|\.\.\.)/, -1,
     e[19], 548],
    [1, 6, 549],
    [/^[\?\:]/, -1],
    [3, "keyword", e[33], 551,
     3, "operator", "!", -1,
     3, "operator", e[40], -1,
     3, "operator", e[41], 553,
     3, "keyword", e[42], 553,
     2, 538, -1, {"name":"ArgList"},
     1, 152, -1,
     ".", 555,
     "[", 559,
     3, "operator", "?", 563],
    [1, 6, 552],
    [1, 178, -1],
    [1, 6, 554],
    [1, 390, -1],
    [1, 6, 556],
    [3, "property callee", e[44], 557,
     3, "property", e[19], -1],
    [1, 6, 558],
    [2, 394, -1, {"name":"TypeArgs"},
     0, -1],
    [1, 6, 560],
    [1, 167, 561],
    [1, 6, 562],
    ["]", -1],
    [1, 6, 564],
    [1, 167, 565],
    [1, 6, 566],
    [3, "operator", ":", 567],
    [1, 6, 568],
    [1, 390, -1],
    [e[19], 570],
    [1, 6, 571],
    [3, "keyword", e[45], -1],
    [e[19], 573],
    [1, 6, 574],
    [/^(?:\:|in)/, -1],
    ["[", 576],
    [1, 6, 577],
    [1, 662, 578],
    [1, 6, 579],
    ["]", -1],
    ["{", 581],
    [1, 6, 582],
    [1, 668, 583],
    [1, 6, 584],
    ["}", -1],
    ["@", 586,
     0, 587,
     0, -1],
    [1, 6, 588],
    [3, "keyword", e[43], 589,
     e[46], 590],
    [1, 167, 591],
    [1, 6, 587],
    [1, 6, 592],
    [1, 6, 585],
    [1, 453, 593],
    [1, 6, 594],
    [/^\??/, 595],
    [1, 6, 596],
    [":", 597,
     0, 598],
    [1, 6, 599],
    [1, 6, 600],
    [1, 178, 598],
    [3, "operator", "=", 601,
     0, 602],
    [1, 6, 603],
    [1, 6, 604],
    [1, 390, 602],
    [",", 605,
     0, -1],
    [1, 6, 606],
    ["@", 607,
     0, 608,
     0, 609],
    [1, 6, 610],
    [3, "keyword", e[43], 611,
     e[46], 612],
    [1, 6, 604],
    [1, 167, 613],
    [1, 6, 608],
    [1, 6, 614],
    [1, 6, 606],
    [1, 453, 615],
    [1, 6, 616],
    [/^\??/, 617],
    [1, 6, 618],
    [":", 619,
     0, 620],
    [1, 6, 621],
    [1, 6, 622],
    [1, 178, 620],
    [3, "operator", "=", 623,
     0, 609],
    [1, 6, 624],
    [1, 390, 609],
    [2, 7, 626, {"name":"Statement"}],
    [1, 6, 627],
    [3, "keyword", /^of(?![a-zA-Z¡-￿_0-9_\$])/, 628,
     0, -1],
    [1, 6, 629],
    [1, 167, -1],
    [1, 6, 631],
    [":", 632,
     0, 635],
    [1, 6, 633],
    [1, 178, 634],
    [1, 6, 635],
    ["=>", -1],
    [2, 456, 637, {"name":"ParamList"}],
    [1, 6, 638],
    [":", 639,
     0, 641],
    [1, 6, 640],
    [1, 400, 641],
    [1, 6, 642],
    ["=>", -1],
    [3, "operator", "=>", 644],
    [1, 6, 645],
    [2, 173, 646, {"name":"TypeParams"},
     0, 646],
    [1, 6, 647],
    [2, 163, -1, {"name":"Block"},
     1, 390, -1],
    ["<", 649],
    [1, 648, 649,
     [1, "=>", [0, /^(?!\>)/, /^[^]/]], 649,
     ">", -1],
    [1, 390, 651,
     0, -1],
    [1, 6, 652],
    [",", 653,
     0, -1],
    [1, 6, 654],
    [1, 390, 655,
     0, 655],
    [1, 6, 652],
    [2, 674, 657, {"name":"ObjectMember"},
     0, -1],
    [1, 6, 658],
    [",", 659,
     0, -1],
    [1, 6, 660],
    [2, 674, 661, {"name":"ObjectMember"},
     0, 661],
    [1, 6, 658],
    [1, 689, 663,
     0, 663,
     0, -1],
    [1, 6, 664],
    [",", 665,
     0, -1],
    [1, 6, 666],
    [1, 689, 667,
     0, 667,
     0, 667],
    [1, 6, 664],
    [1, 694, 669,
     0, -1],
    [1, 6, 670],
    [",", 671,
     0, -1],
    [1, 6, 672],
    [1, 694, 673,
     0, 673],
    [1, 6, 670],
    [3, "keyword", e[47], 675,
     0, 675],
    [1, 6, 676],
    [3, "def property", e[19], 677,
     "[", 678,
     3, "number", e[29], 677,
     2, 141, 677, {"name":"string","token":"string"},
     3, "operator", "...", 679],
    [1, 6, 680],
    [1, 6, 681],
    [1, 6, 682],
    [3, "keyword", "*", 683,
     0, 683,
     ":", 684,
     0, -1],
    [1, 167, 685],
    [1, 390, -1],
    [1, 6, 686],
    [1, 6, 687],
    [1, 6, 688],
    [2, 259, -1, {"name":"FunctionDef"}],
    [1, 390, -1],
    ["]", 677],
    [1, 453, 690],
    [1, 6, 691],
    [3, "operator", "=", 692,
     0, -1],
    [1, 6, 693],
    [1, 390, -1],
    [3, "def", /^[a-zA-Z¡-￿__\$][a-zA-Z¡-￿_0-9_\$]*(?![a-z]|[A-Z]|[¡-￿]|_|[0-9]|_|\$| *\:)/, 695,
     3, "property", e[19], 699,
     3, "number", e[29], 699,
     2, 141, 699, {"name":"string","token":"string"},
     3, "operator", "...", 703],
    [1, 6, 696],
    [3, "operator", "=", 697,
     0, -1],
    [1, 6, 698],
    [1, 390, -1],
    [1, 6, 700],
    [":", 701],
    [1, 6, 702],
    [1, 689, -1],
    [1, 6, 704],
    [1, 689, -1]
  ];
  var start = 0;
  var token = 5;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", ObjectPattern: "}", EnumBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && brack != ")") { return base }
      return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^else\b/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
  }

  function canInsertSemi(string, pos) {
    for (var i = pos - 1; i >= 0; i--) {
      var ch = string.charCodeAt(i);
      if (ch === 10) { break }
      if (ch !== 32 && ch !== 9) { return false }
    }
    return true
  }

  var scopes = ["Block", "FunctionDef", "ArrowFunc", "ForStatement", "ParamListSpec"];

  var TSMode = (function (superclass) {
    function TSMode(conf, modeConf) {
      superclass.call(this, grammar, {
        predicates: {canInsertSemi: modeConf.requireSemicolons === false ? canInsertSemi : function () { return false; }}
      });
      this.conf = conf;
    }

    if ( superclass ) TSMode.__proto__ = superclass;
    TSMode.prototype = Object.create( superclass && superclass.prototype );
    TSMode.prototype.constructor = TSMode;

    TSMode.prototype.token = function token$$1 (stream, state) {
      return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
    };

    TSMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (!textAfter) { textAfter = line = "x"; } // Force getContextAt to terminate the statement, if needed
      return indent(state, textAfter, line, this.conf)
    };

    return TSMode;
  }(CodeMirror.GrammarMode));

  var meta = {
    electricInput: /^\s*(?:case .*?:|default:|\{|\})$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    blockCommentContinue: " * ",
    lineComment: "//",
    fold: "brace",
    closeBrackets: "()[]{}''\"\"``"
  };
  for (var prop in meta) { TSMode.prototype[prop] = meta[prop]; }

  CodeMirror.registerHelper("wordChars", "google-typescript", /[\w$]/);

  CodeMirror.defineMode("google-typescript", function (conf, modeConf) { return new TSMode(conf, modeConf); });

})));
