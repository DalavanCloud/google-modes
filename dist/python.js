(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^if(?![a-zA-Z¡-￿_0-9_])/, /^(?:while|elif)(?![a-zA-Z¡-￿_0-9_])/, /^else(?![a-zA-Z¡-￿_0-9_])/, /^(?:try|finally)(?![a-zA-Z¡-￿_0-9_])/, /^for(?![a-zA-Z¡-￿_0-9_])/, /^except(?![a-zA-Z¡-￿_0-9_])/, /^async(?![a-zA-Z¡-￿_0-9_])/, /^in(?![a-zA-Z¡-￿_0-9_])/, /^as(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*/, /^with(?![a-zA-Z¡-￿_0-9_])/, /^def(?![a-zA-Z¡-￿_0-9_])/, /^class(?![a-zA-Z¡-￿_0-9_])/, /^(?:pass|break|continue)(?![a-zA-Z¡-￿_0-9_])/, /^del(?![a-zA-Z¡-￿_0-9_])/, /^(?:return|assert)(?![a-zA-Z¡-￿_0-9_])/, /^raise(?![a-zA-Z¡-￿_0-9_])/, /^import(?![a-zA-Z¡-￿_0-9_])/, /^from(?![a-zA-Z¡-￿_0-9_])/, /^(?:global|nonlocal)(?![a-zA-Z¡-￿_0-9_])/, /^[\*\+\-\~]/, /^(?:not|await)(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?![a-zA-Z¡-￿_0-9_])(?= *(?:\, *[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?![a-zA-Z¡-￿_0-9_]) *)*(?:\=|in(?![a-zA-Z¡-￿_0-9_])))/, /^(?:(?:0b|OB)[01_]+|(?:0o|0O)[0-7_]+|(?:0x|OX)[0-9a-fA-F_]+|(?:[0-9][0-9_]*(?:\.[0-9_]+)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?[jJ]?)/, /^(?:None|True|False)(?![a-zA-Z¡-￿_0-9_])/, /^self(?![a-zA-Z¡-￿_0-9_])/, /^yield(?![a-zA-Z¡-￿_0-9_])/, /^lambda(?![a-zA-Z¡-￿_0-9_])/, /^(?:abs|all|any|bin|bool|bytearray|callable|chr|classmethod|compile|complex|delattr|dict|dir|divmod|enumerate|eval|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|isinstance|issubclass|iter|len|list|locals|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|vars|zip|__import__|NotImplemented|Ellipsis|__debug__|ascii|bytes|exec|print)(?![a-zA-Z¡-￿_0-9_])/, /^(?:(?:\^|\&|\||\<\<|\>\>|\+|\-|\*\*?|\@|\/|\%|\/)\=?|\=|\<|\>|\=\=|\>\=|\<\=|\<\>|\!\=)/, /^(?:or|and|in|is(?: +not)?|not(?: +in)?)(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?=\()/, [7, "stillIndented"], /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\=)/, [0, /^[a-zA-Z¡-￿__]/, /^[a-zA-Z¡-￿_0-9_]*/, [7, "isCompLocal"]], /^(?:\*|\*\*)/];
  var nodes = [
    [1, 6, 2],
    [/^[^]/, 0],
    [1, 6, 3],
    ["\n", 4,
     2, 8, 4, {"name":"Statement"},
     0, 1],
    [1, 6, 3],
    [3, "keyword", e[0], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[27], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[21], -1,
     3, "atom", e[24], -1,
     3, "atom", e[25], -1,
     3, "keyword", e[30], -1,
     3, "builtin", e[28], -1,
     3, "operator", e[29], -1,
     3, "operator", e[20], -1,
     3, "number", e[23], -1,
     2, 50, -1, {"name":"string","token":"string"},
     3, "variable", e[9], -1,
     3, "comment", /^\#.*/, -1,
     /^[^]/, -1],
    [/^[ \t]/, 6,
     3, "comment", /^\#.*/, 6,
     "\\\n", 6,
     [0, /^(?=\n)/, [7, "maySkipNewline"]], 7,
     0, -1],
    ["\n", 6],
    [3, "keyword", e[0], 9,
     3, "keyword", e[1], 9,
     3, "keyword", e[2], 15,
     3, "keyword", e[3], 15,
     3, "keyword", e[4], 19,
     3, "keyword", e[5], 29,
     3, "keyword", e[6], 39,
     1, 52, -1,
     2, 65, 41, {"name":"Annotation","token":"meta"},
     1, 73, 45],
    [1, 6, 10],
    [1, 103, 11],
    [1, 6, 12],
    [":", 13],
    [1, 6, 14],
    [1, 110, -1],
    [1, 6, 16],
    [":", 17],
    [1, 6, 18],
    [1, 110, -1],
    [1, 6, 20],
    [1, 116, 21],
    [1, 6, 22],
    [3, "keyword", e[7], 23],
    [1, 6, 24],
    [1, 103, 25],
    [1, 6, 26],
    [":", 27],
    [1, 6, 28],
    [1, 110, -1],
    [1, 6, 30],
    [1, 103, 31,
     0, 32],
    [1, 6, 33],
    [1, 6, 34],
    [3, "keyword", e[8], 35,
     0, 32],
    [":", 36],
    [1, 6, 37],
    [1, 6, 38],
    [3, "def", e[9], 32],
    [1, 110, -1],
    [1, 6, 40],
    [1, 52, -1],
    [1, 6, 42],
    [2, 122, 43, {"name":"ArgList"},
     0, 43],
    [1, 6, 44],
    ["\n", -1],
    [1, 6, 46],
    [";", 47,
     "\n", -1],
    [1, 6, 48],
    [1, 73, 49,
     0, 49],
    [1, 6, 46],
    [/^[uUrRfFbB]+(?=[\'\"])/, 51,
     1, 127, -1],
    [1, 127, -1],
    [3, "keyword", e[10], 53,
     3, "keyword", e[11], 59,
     3, "keyword", e[12], 63],
    [1, 6, 54],
    [1, 132, 55],
    [1, 6, 56],
    [":", 57],
    [1, 6, 58],
    [1, 110, -1],
    [1, 6, 60],
    [3, "def", e[9], 61],
    [1, 6, 62],
    [2, 146, -1, {"name":"FuncDef"}],
    [1, 6, 64],
    [2, 155, -1, {"name":"ClassDef"}],
    ["@", 66],
    [1, 6, 67],
    [e[9], 68],
    [1, 6, 69],
    [".", 70,
     0, -1],
    [1, 6, 71],
    [e[9], 72],
    [1, 6, 69],
    [3, "keyword", e[13], -1,
     3, "keyword", e[14], 74,
     3, "keyword", e[15], 76,
     3, "keyword", e[16], 78,
     3, "keyword", e[17], 84,
     3, "keyword", e[18], 86,
     3, "keyword", e[19], 97,
     1, 162, 99,
     1, 103, -1],
    [1, 6, 75],
    [1, 103, -1],
    [1, 6, 77],
    [1, 103, -1,
     0, -1],
    [1, 6, 79],
    [1, 103, 80,
     0, 80],
    [1, 6, 81],
    [3, "keyword", e[18], 82,
     0, -1],
    [1, 6, 83],
    [1, 103, -1],
    [1, 6, 85],
    [1, 132, -1],
    [1, 6, 87],
    [".", 88,
     1, 103, 89,
     0, 89],
    [1, 6, 87],
    [1, 6, 90],
    [3, "keyword", e[17], 91],
    [1, 6, 92],
    ["*", -1,
     "(", 93,
     1, 168, -1],
    [1, 6, 94],
    [1, 182, 95,
     0, 95],
    [1, 6, 96],
    [")", -1],
    [1, 6, 98],
    [1, 196, -1],
    [1, 6, 100],
    [3, "operator", "=", 101],
    [1, 6, 102],
    [1, 103, -1],
    [3, "operator", e[20], 104,
     3, "keyword", e[21], 104,
     1, 202, 105],
    [1, 6, 103],
    [1, 6, 106],
    [1, 212, 107,
     3, "keyword", e[7], 108,
     ",", 108,
     0, -1],
    [1, 6, 106],
    [1, 6, 109],
    [1, 103, 107],
    [1, 73, 111,
     2, 223, -1, {"name":"indentedBody"}],
    [1, 6, 112],
    [";", 113,
     "\n", -1],
    [1, 6, 114],
    [1, 73, 115,
     0, 115],
    [1, 6, 112],
    [3, "def", e[22], 117,
     1, 229, 117],
    [1, 6, 118],
    [",", 119,
     0, -1],
    [1, 6, 120],
    [3, "def", e[22], 121,
     1, 229, 121,
     0, 121],
    [1, 6, 118],
    ["(", 123],
    [1, 6, 124],
    [1, 234, 125,
     0, 125],
    [1, 6, 126],
    [")", -1],
    ["'''", 128,
     "\"\"\"", 130,
     /^(?:\'(?:\\.|(?!\').)*\'|\"(?:\\.|(?!\").)*\")/, -1],
    ["\\", 129,
     [0, /^(?!\'\'\')/, /^[^]/], 128,
     "'''", -1],
    [/^[^]/, 128],
    ["\\", 131,
     [0, /^(?!\"\"\")/, /^[^]/], 130,
     "\"\"\"", -1],
    [/^[^]/, 130],
    [1, 248, 133],
    [1, 6, 134],
    [3, "keyword", e[8], 135,
     0, 137],
    [1, 6, 136],
    [3, "def", e[9], 137],
    [1, 6, 138],
    [",", 139,
     0, -1],
    [1, 6, 140],
    [1, 248, 141,
     0, 142],
    [1, 6, 143],
    [1, 6, 138],
    [3, "keyword", e[8], 144,
     0, 142],
    [1, 6, 145],
    [3, "def", e[9], 142],
    [2, 255, 147, {"name":"ParamList"}],
    [1, 6, 148],
    ["->", 149,
     0, 151],
    [1, 6, 150],
    [1, 103, 151],
    [1, 6, 152],
    [":", 153],
    [1, 6, 154],
    [1, 110, -1],
    [3, "type def", e[9], 156],
    [1, 6, 157],
    [2, 122, 158, {"name":"ArgList"},
     0, 158],
    [1, 6, 159],
    [":", 160],
    [1, 6, 161],
    [1, 110, -1],
    [3, "def", e[22], 163],
    [1, 6, 164],
    [",", 165,
     0, -1],
    [1, 6, 166],
    [3, "def", e[22], 167,
     0, 167],
    [1, 6, 164],
    [e[9], 169],
    [1, 6, 170],
    [3, "keyword", e[8], 171,
     0, 173],
    [1, 6, 172],
    [3, "def", e[9], 173],
    [1, 6, 174],
    [",", 175,
     0, -1],
    [1, 6, 176],
    [e[9], 177,
     0, 178],
    [1, 6, 179],
    [1, 6, 174],
    [3, "keyword", e[8], 180,
     0, 178],
    [1, 6, 181],
    [3, "def", e[9], 178],
    [e[9], 183],
    [1, 6, 184],
    [3, "keyword", e[8], 185],
    [1, 6, 186],
    [3, "def", e[9], 187,
     0, 187],
    [1, 6, 188],
    [",", 189,
     0, -1],
    [1, 6, 190],
    [e[9], 191,
     0, 192],
    [1, 6, 193],
    [1, 6, 188],
    [3, "keyword", e[8], 194],
    [1, 6, 195],
    [3, "def", e[9], 192,
     0, 192],
    [3, "variable", e[9], 197],
    [1, 6, 198],
    [",", 199,
     0, -1],
    [1, 6, 200],
    [3, "variable", e[9], 201,
     0, 201],
    [1, 6, 198],
    [2, 260, -1, {"name":"ParenExpr"},
     2, 269, -1, {"name":"ArrayLiteral"},
     2, 278, -1, {"name":"ObjectLiteral"},
     3, "number", e[23], -1,
     0, 203,
     3, "operator", "...", -1,
     3, "atom", e[24], -1,
     3, "atom", e[25], -1,
     3, "keyword", e[26], 206,
     3, "keyword", e[27], 210,
     3, "builtin", e[28], -1,
     3, "variable callee", e[31], -1,
     3, "variable", e[9], -1],
    [2, 50, 204, {"name":"string","token":"string"}],
    [1, 6, 205],
    [0, 203,
     0, -1],
    [1, 6, 207],
    [3, "keyword", e[18], 208,
     1, 103, -1,
     0, -1],
    [1, 6, 209],
    [1, 103, -1],
    [1, 6, 211],
    [2, 285, -1, {"name":"LambdaDef"}],
    [3, "operator", e[29], 213,
     3, "keyword", e[30], 213,
     2, 122, -1, {"name":"ArgList"},
     2, 290, -1, {"name":"Subscript"},
     ".", 215,
     3, "keyword", e[0], 217],
    [1, 6, 214],
    [1, 103, -1],
    [1, 6, 216],
    [3, "property callee", e[31], -1,
     3, "property", e[9], -1],
    [1, 6, 218],
    [1, 103, 219],
    [1, 6, 220],
    [3, "keyword", e[2], 221,
     0, -1],
    [1, 6, 222],
    [1, 103, -1],
    ["\n", 224],
    [/^[ \t]/, 224,
     3, "comment", /^\#.*/, 224,
     "\n", 224,
     e[32], 225],
    [2, 8, 226, {"name":"Statement"}],
    [/^[ \t]/, 226,
     3, "comment", /^\#.*/, 226,
     "\n", 226,
     0, 227],
    [0, 228,
     0, -1],
    [e[32], 225],
    [3, "operator", e[20], 230,
     3, "keyword", e[21], 230,
     1, 202, 231],
    [1, 6, 229],
    [1, 6, 232],
    [1, 295, 233,
     0, -1],
    [1, 6, 232],
    [3, "operator", "**", 235,
     3, "meta", e[33], 236,
     0, 235],
    [1, 6, 237],
    [1, 6, 238],
    [1, 248, 239],
    ["=", 235],
    [1, 6, 240],
    [",", 241,
     0, -1],
    [1, 6, 242],
    [3, "operator", "**", 243,
     3, "meta", e[33], 244,
     0, 243,
     0, 245],
    [1, 6, 246],
    [1, 6, 247],
    [1, 6, 240],
    [1, 248, 245],
    ["=", 243],
    [3, "operator", e[20], 249,
     3, "keyword", e[21], 249,
     1, 202, 250],
    [1, 6, 248],
    [1, 6, 251],
    [1, 306, 252,
     3, "keyword", e[7], 253,
     0, -1],
    [1, 6, 251],
    [1, 6, 254],
    [1, 103, 252],
    ["(", 256],
    [1, 6, 257],
    [1, 317, 258,
     0, 258],
    [1, 6, 259],
    [")", -1],
    ["(", 261],
    [1, 6, 262],
    [3, "variable-2", e[34], 263,
     1, 248, 263,
     0, 267],
    [1, 6, 264],
    [",", 265,
     1, 343, 267,
     0, 267],
    [1, 6, 266],
    [1, 354, 267,
     0, 267],
    [1, 6, 268],
    [")", -1],
    ["[", 270],
    [1, 6, 271],
    [3, "variable-2", e[34], 272,
     1, 248, 272,
     0, 276],
    [1, 6, 273],
    [",", 274,
     1, 343, 276,
     0, 276],
    [1, 6, 275],
    [1, 354, 276,
     0, 276],
    [1, 6, 277],
    ["]", -1],
    ["{", 279],
    [1, 6, 280],
    [1, 360, 281,
     0, 283],
    [1, 6, 282],
    [1, 343, 283,
     0, 283],
    [1, 6, 284],
    ["}", -1],
    [1, 366, 286,
     0, 286],
    [1, 6, 287],
    [":", 288],
    [1, 6, 289],
    [1, 248, -1],
    ["[", 291],
    [1, 6, 292],
    [1, 384, 293],
    [1, 6, 294],
    ["]", -1],
    [3, "operator", e[29], 296,
     3, "keyword", e[30], 296,
     2, 122, -1, {"name":"ArgList"},
     2, 290, -1, {"name":"Subscript"},
     ".", 298,
     3, "keyword", e[0], 300],
    [1, 6, 297],
    [1, 229, -1],
    [1, 6, 299],
    [3, "property callee", e[31], -1,
     3, "property", e[9], -1],
    [1, 6, 301],
    [1, 229, 302],
    [1, 6, 303],
    [3, "keyword", e[2], 304,
     0, -1],
    [1, 6, 305],
    [1, 229, -1],
    [3, "operator", e[29], 307,
     3, "keyword", e[30], 307,
     2, 122, -1, {"name":"ArgList"},
     2, 290, -1, {"name":"Subscript"},
     ".", 309,
     3, "keyword", e[0], 311],
    [1, 6, 308],
    [1, 248, -1],
    [1, 6, 310],
    [3, "property callee", e[31], -1,
     3, "property", e[9], -1],
    [1, 6, 312],
    [1, 248, 313],
    [1, 6, 314],
    [3, "keyword", e[2], 315,
     0, -1],
    [1, 6, 316],
    [1, 248, -1],
    [2, 410, 318, {"name":"op","token":"operator"},
     0, 318],
    [1, 6, 319],
    [3, "atom", e[25], 320,
     3, "def", e[9], 320],
    [1, 6, 321],
    [":", 322,
     0, 323],
    [1, 6, 324],
    [1, 6, 325],
    [1, 248, 323],
    [3, "operator", "=", 326,
     0, 328],
    [1, 6, 327],
    [1, 248, 328],
    [1, 6, 329],
    [",", 330,
     0, -1],
    [1, 6, 331],
    [2, 410, 332, {"name":"op","token":"operator"},
     0, 332,
     0, 333],
    [1, 6, 334],
    [1, 6, 329],
    [3, "atom", e[25], 335,
     3, "def", e[9], 335],
    [1, 6, 336],
    [":", 337,
     0, 338],
    [1, 6, 339],
    [1, 6, 340],
    [1, 248, 338],
    [3, "operator", "=", 341,
     0, 333],
    [1, 6, 342],
    [1, 248, 333],
    [3, "keyword", e[6], 344,
     0, 344],
    [1, 6, 345],
    [3, "keyword", e[4], 346],
    [1, 6, 347],
    [1, 116, 348],
    [1, 6, 349],
    [3, "keyword", e[7], 350],
    [1, 6, 351],
    [1, 103, 352],
    [1, 6, 353],
    [1, 343, -1,
     1, 413, -1,
     0, -1],
    [1, 248, 355],
    [1, 6, 356],
    [",", 357,
     0, -1],
    [1, 6, 358],
    [1, 248, 359,
     0, 359],
    [1, 6, 356],
    [2, 418, 361, {"name":"DictProp"}],
    [1, 6, 362],
    [",", 363,
     0, -1],
    [1, 6, 364],
    [2, 418, 365, {"name":"DictProp"},
     0, 365],
    [1, 6, 362],
    [3, "operator", e[35], 367,
     0, 367],
    [1, 6, 368],
    [3, "def", e[9], 369],
    [1, 6, 370],
    [3, "operator", "=", 371,
     0, 373],
    [1, 6, 372],
    [1, 248, 373],
    [1, 6, 374],
    [",", 375,
     0, -1],
    [1, 6, 376],
    [3, "operator", e[35], 377,
     0, 377,
     0, 378],
    [1, 6, 379],
    [1, 6, 374],
    [3, "def", e[9], 380],
    [1, 6, 381],
    [3, "operator", "=", 382,
     0, 378],
    [1, 6, 383],
    [1, 248, 378],
    [1, 248, 385,
     ":", 386],
    [1, 6, 387],
    [1, 6, 388],
    [":", 389,
     0, 395],
    [1, 248, 390,
     0, 390],
    [1, 6, 391],
    [1, 6, 392],
    [1, 248, 395,
     0, 395],
    [":", 393,
     0, 395],
    [1, 6, 394],
    [1, 248, 395,
     0, 395],
    [1, 6, 396],
    [",", 397,
     0, -1],
    [1, 6, 398],
    [1, 248, 399,
     ":", 400,
     0, 401],
    [1, 6, 402],
    [1, 6, 403],
    [1, 6, 396],
    [":", 404,
     0, 401],
    [1, 248, 405,
     0, 405],
    [1, 6, 406],
    [1, 6, 407],
    [1, 248, 401,
     0, 401],
    [":", 408,
     0, 401],
    [1, 6, 409],
    [1, 248, 401,
     0, 401],
    ["*", 411],
    [1, 6, 412],
    [/^\*?/, -1],
    [3, "keyword", e[0], 414],
    [1, 6, 415],
    [1, 103, 416],
    [1, 6, 417],
    [1, 343, -1,
     1, 413, -1,
     0, -1],
    [3, "operator", "**", 419,
     1, 248, 421],
    [1, 6, 420],
    [1, 248, -1],
    [1, 6, 422],
    [":", 423,
     0, -1],
    [1, 6, 424],
    [1, 248, -1]
  ];
  var start = 0;
  var token = 5;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var scopes = ["LambdaDef", "FuncDef", "ClassDef"];
  var allowNewline = ["ArgList", "ParamList", "ParenExpr", "ArrayLiteral", "ObjectLiteral", "SubScript", "DictProp"];

  function maySkipNewline(_line, _pos, cx) {
    return cx && allowNewline.indexOf(cx.name) > -1
  }

  function countIndent(line, pos) {
    var count = 0;
    for (var i = pos - 1; i >= 0; i--) {
      var ch = line.charCodeAt(i);
      if (ch === 32) { count++; }
      else if (ch === 9) { count += 4; }
      else { break }
    }
    return count
  }

  function stillIndented(line, pos, cx) {
    while (cx && cx.name != "Statement") { cx = cx.parent; }
    return cx && countIndent(line, pos) > countIndent(cx.startLine, cx.startPos)
  }

  function isCompLocal(line, pos) {
    var id = /\w*$/.exec(line.slice(0, pos))[0];
    var forDecl = /\s*for\s*(\w+)/.exec(line.slice(pos));
    return forDecl ? forDecl[1] == id : false
  }

  function aligned(cx) {
    return !/^\s*((#.*)?$)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    ObjectLiteral: "}",
    ArrayLiteral: "]", SubScript: "]",
    ParamList: ")", ArgList: ")", ParenExpr: ")"
  };

  function findIndent(cx, textAfter, curLine, config) {
    if (!cx) { return 0 }
    if (cx.name == "string") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    if (brack) {
      if (curLine != cx.startLine && aligned(cx))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 1 }

      var closed = textAfter && textAfter.charAt(0) == brack;
      var flat = closed && brack == "}" || curLine == cx.startLine;
      return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) + (flat ? 0 : 2 * config.indentUnit)
    } else if (cx.name == "indentedBody") {
      for (;; cx = cx.parent) {
        if (!cx) { return config.indentUnit }
        if (cx.name == "Statement") { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + config.indentUnit }
      }
    } else {
      return findIndent(cx.parent, textAfter, curLine, config) +
        ((cx.name == "DictProp" || cx.name == "Statement") && cx.startLine != curLine ? 2 * config.indentUnit : 0)
    }
  }

  function pythonMarkLocals(token$$1, stream, state) {
    var marked = markLocals(token$$1, scopes, stream, state);
    if (token$$1 == "def") {
      var cx = state.context;
      while (cx && scopes.indexOf(cx.name) == -1) { cx = cx.parent; }
      if (cx && cx.name == "ClassDef") { marked = "def property"; }
      else if (marked == "def local") { marked = "variable-2"; }
    }
    return marked
  }  

  var PythonMode = (function (superclass) {
    function PythonMode(conf) {
      superclass.call(this, grammar, {
        predicates: {maySkipNewline: maySkipNewline, stillIndented: stillIndented, isCompLocal: isCompLocal}
      });
      this.conf = conf;
    }

    if ( superclass ) PythonMode.__proto__ = superclass;
    PythonMode.prototype = Object.create( superclass && superclass.prototype );
    PythonMode.prototype.constructor = PythonMode;

    PythonMode.prototype.token = function token$$1 (stream, state) {
      return pythonMarkLocals(superclass.prototype.token.call(this, stream, state), stream, state)
    };

    PythonMode.prototype.indent = function indent (state, textAfter, line) {
      return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, this.conf)
    };

    return PythonMode;
  }(CodeMirror.GrammarMode));

  PythonMode.prototype.electricInput = /^\s*[\}\]\)]$/;
  PythonMode.prototype.closeBrackets = {triples: "'\""};
  PythonMode.prototype.lineComment = "#";
  PythonMode.prototype.fold = "indent";

  CodeMirror.defineMode("google-python", function (conf) { return new PythonMode(conf); });

})));
