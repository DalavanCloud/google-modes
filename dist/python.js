(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^if(?![a-zA-Z¡-￿_0-9_])/, /^(?:while|elif)(?![a-zA-Z¡-￿_0-9_])/, /^else(?![a-zA-Z¡-￿_0-9_])/, /^(?:try|finally)(?![a-zA-Z¡-￿_0-9_])/, /^for(?![a-zA-Z¡-￿_0-9_])/, /^except(?![a-zA-Z¡-￿_0-9_])/, /^async(?![a-zA-Z¡-￿_0-9_])/, /^print(?![a-zA-Z¡-￿_0-9_])/, /^in(?![a-zA-Z¡-￿_0-9_])/, /^as(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*/, /^with(?![a-zA-Z¡-￿_0-9_])/, /^def(?![a-zA-Z¡-￿_0-9_])/, /^class(?![a-zA-Z¡-￿_0-9_])/, /^(?:pass|break|continue)(?![a-zA-Z¡-￿_0-9_])/, /^del(?![a-zA-Z¡-￿_0-9_])/, /^(?:return|assert)(?![a-zA-Z¡-￿_0-9_])/, /^raise(?![a-zA-Z¡-￿_0-9_])/, /^import(?![a-zA-Z¡-￿_0-9_])/, /^from(?![a-zA-Z¡-￿_0-9_])/, /^(?:global|nonlocal)(?![a-zA-Z¡-￿_0-9_])/, /^[\*\+\-\~]/, /^(?:not|await)(?![a-zA-Z¡-￿_0-9_])/, /^(?:(?:0b|OB)[01_]+|(?:0o|0O)[0-7_]+|(?:0x|OX)[0-9a-fA-F_]+|(?:[0-9][0-9_]*(?:l|L|\.[0-9_]+)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?[jJ]?)/, /^(?:None|True|False)(?![a-zA-Z¡-￿_0-9_])/, /^self(?![a-zA-Z¡-￿_0-9_])/, /^yield(?![a-zA-Z¡-￿_0-9_])/, /^lambda(?![a-zA-Z¡-￿_0-9_])/, /^(?:abs|all|any|bin|bool|bytearray|callable|chr|classmethod|compile|complex|delattr|dict|dir|divmod|enumerate|eval|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|isinstance|issubclass|iter|len|list|locals|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|vars|zip|__import__|NotImplemented|Ellipsis|__debug__|ascii|bytes|exec|print)(?![a-zA-Z¡-￿_0-9_])/, /^(?:(?:\^|\&|\||\<\<|\>\>|\+|\-|\*\*?|\@|\/|\%|\/)\=?|\=|\<|\>|\=\=|\>\=|\<\=|\<\>|\!\=)/, /^(?:or|and|in|is(?: +not)?|not(?: +in)?)(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?=\()/, [7, "stillIndented"], /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\=)/, [0, /^[a-zA-Z¡-￿__]/, /^[a-zA-Z¡-￿_0-9_]*/, [7, "isCompLocal"]], /^(?:\*|\*\*)/];
  var nodes = [
    [1, 6, 2],
    [/^[^]/, 0],
    [1, 6, 3],
    ["\n", 4,
     2, 9, 4, {"name":"Statement"},
     0, 1],
    [1, 6, 3],
    [3, "keyword", e[0], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[27], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[22], -1,
     3, "atom", e[24], -1,
     3, "atom", e[25], -1,
     3, "keyword", e[30], -1,
     3, "builtin", e[28], -1,
     3, "builtin", e[7], -1,
     3, "operator", e[29], -1,
     3, "operator", e[21], -1,
     3, "number", e[23], -1,
     2, 53, -1, {"name":"string","token":"string"},
     3, "variable", e[10], -1,
     3, "comment", /^\#.*/, -1,
     /^[^]/, -1],
    [/^[ \t]/, 6,
     3, "comment", /^\#.*/, 6,
     "\\", 7,
     [0, /^(?=\n)/, [7, "maySkipNewline"]], 8,
     0, -1],
    ["\n", 6],
    ["\n", 6],
    [3, "keyword", e[0], 10,
     3, "keyword", e[1], 10,
     3, "keyword", e[2], 16,
     3, "keyword", e[3], 16,
     3, "keyword", e[4], 20,
     3, "keyword", e[5], 30,
     3, "keyword", e[6], 40,
     1, 55, -1,
     2, 68, 42, {"name":"Annotation","token":"meta"},
     3, "builtin", e[7], 46,
     1, 76, 48],
    [1, 6, 11],
    [1, 107, 12],
    [1, 6, 13],
    [":", 14],
    [1, 6, 15],
    [1, 114, -1],
    [1, 6, 17],
    [":", 18],
    [1, 6, 19],
    [1, 114, -1],
    [1, 6, 21],
    [1, 120, 22],
    [1, 6, 23],
    [3, "keyword", e[8], 24],
    [1, 6, 25],
    [1, 107, 26],
    [1, 6, 27],
    [":", 28],
    [1, 6, 29],
    [1, 114, -1],
    [1, 6, 31],
    [1, 107, 32,
     0, 33],
    [1, 6, 34],
    [1, 6, 35],
    [3, "keyword", e[9], 36,
     0, 33],
    [":", 37],
    [1, 6, 38],
    [1, 6, 39],
    [3, "def", e[10], 33],
    [1, 114, -1],
    [1, 6, 41],
    [1, 55, -1],
    [1, 6, 43],
    [2, 128, 44, {"name":"ArgList"},
     0, 44],
    [1, 6, 45],
    ["\n", -1],
    [1, 6, 47],
    [2, 128, -1, {"name":"ArgList"},
     1, 107, -1],
    [1, 6, 49],
    [";", 50,
     "\n", -1],
    [1, 6, 51],
    [1, 76, 52,
     0, 52],
    [1, 6, 49],
    [/^[uUrRfFbB]+(?=[\'\"])/, 54,
     1, 133, -1],
    [1, 133, -1],
    [3, "keyword", e[11], 56,
     3, "keyword", e[12], 62,
     3, "keyword", e[13], 66],
    [1, 6, 57],
    [1, 138, 58],
    [1, 6, 59],
    [":", 60],
    [1, 6, 61],
    [1, 114, -1],
    [1, 6, 63],
    [3, "def", e[10], 64],
    [1, 6, 65],
    [2, 152, -1, {"name":"FuncDef"}],
    [1, 6, 67],
    [2, 161, -1, {"name":"ClassDef"}],
    ["@", 69],
    [1, 6, 70],
    [e[10], 71],
    [1, 6, 72],
    [".", 73,
     0, -1],
    [1, 6, 74],
    [e[10], 75],
    [1, 6, 72],
    [3, "keyword", e[14], -1,
     3, "keyword", e[15], 77,
     3, "keyword", e[16], 79,
     3, "keyword", e[17], 81,
     3, "keyword", e[18], 87,
     3, "keyword", e[19], 89,
     3, "keyword", e[20], 100,
     [5, 168], 102,
     1, 107, -1],
    [1, 6, 78],
    [1, 107, -1],
    [1, 6, 80],
    [1, 107, -1,
     0, -1],
    [1, 6, 82],
    [1, 107, 83,
     0, 83],
    [1, 6, 84],
    [3, "keyword", e[19], 85,
     0, -1],
    [1, 6, 86],
    [1, 107, -1],
    [1, 6, 88],
    [1, 138, -1],
    [1, 6, 90],
    [".", 91,
     1, 107, 92,
     0, 92],
    [1, 6, 90],
    [1, 6, 93],
    [3, "keyword", e[18], 94],
    [1, 6, 95],
    ["*", -1,
     "(", 96,
     1, 171, -1],
    [1, 6, 97],
    [1, 185, 98,
     0, 98],
    [1, 6, 99],
    [")", -1],
    [1, 6, 101],
    [1, 199, -1],
    [1, 205, 103],
    [1, 6, 104],
    [3, "operator", "=", 105],
    [1, 6, 106],
    [1, 107, -1],
    [3, "operator", e[21], 108,
     3, "keyword", e[22], 108,
     1, 218, 109],
    [1, 6, 107],
    [1, 6, 110],
    [1, 228, 111,
     3, "keyword", e[8], 112,
     ",", 112,
     0, -1],
    [1, 6, 110],
    [1, 6, 113],
    [1, 107, 111],
    [1, 76, 115,
     2, 239, -1, {"name":"indentedBody"}],
    [1, 6, 116],
    [";", 117,
     "\n", -1],
    [1, 6, 118],
    [1, 76, 119,
     0, 119],
    [1, 6, 116],
    [[5, 245], 121,
     1, 248, 122],
    [1, 205, 122],
    [1, 6, 123],
    [",", 124,
     0, -1],
    [1, 6, 125],
    [[5, 245], 126,
     1, 248, 127,
     0, 127],
    [1, 205, 127],
    [1, 6, 123],
    ["(", 129],
    [1, 6, 130],
    [1, 253, 131,
     0, 131],
    [1, 6, 132],
    [")", -1],
    ["'''", 134,
     "\"\"\"", 136,
     /^(?:\'(?:\\.|(?!\').)*\'|\"(?:\\.|(?!\").)*\")/, -1],
    ["\\", 135,
     [0, /^(?!\'\'\')/, /^[^]/], 134,
     "'''", -1],
    [/^[^]/, 134],
    ["\\", 137,
     [0, /^(?!\"\"\")/, /^[^]/], 136,
     "\"\"\"", -1],
    [/^[^]/, 136],
    [1, 264, 139],
    [1, 6, 140],
    [3, "keyword", e[9], 141,
     0, 143],
    [1, 6, 142],
    [3, "def", e[10], 143],
    [1, 6, 144],
    [",", 145,
     0, -1],
    [1, 6, 146],
    [1, 264, 147,
     0, 148],
    [1, 6, 149],
    [1, 6, 144],
    [3, "keyword", e[9], 150,
     0, 148],
    [1, 6, 151],
    [3, "def", e[10], 148],
    [2, 271, 153, {"name":"ParamList"}],
    [1, 6, 154],
    ["->", 155,
     0, 157],
    [1, 6, 156],
    [1, 107, 157],
    [1, 6, 158],
    [":", 159],
    [1, 6, 160],
    [1, 114, -1],
    [3, "type def", e[10], 162],
    [1, 6, 163],
    [2, 128, 164, {"name":"ArgList"},
     0, 164],
    [1, 6, 165],
    [":", 166],
    [1, 6, 167],
    [1, 114, -1],
    [1, 205, 169],
    [1, 6, 170],
    ["=", -1],
    [e[10], 172],
    [1, 6, 173],
    [3, "keyword", e[9], 174,
     0, 176],
    [1, 6, 175],
    [3, "def", e[10], 176],
    [1, 6, 177],
    [",", 178,
     0, -1],
    [1, 6, 179],
    [e[10], 180,
     0, 181],
    [1, 6, 182],
    [1, 6, 177],
    [3, "keyword", e[9], 183,
     0, 181],
    [1, 6, 184],
    [3, "def", e[10], 181],
    [e[10], 186],
    [1, 6, 187],
    [3, "keyword", e[9], 188],
    [1, 6, 189],
    [3, "def", e[10], 190,
     0, 190],
    [1, 6, 191],
    [",", 192,
     0, -1],
    [1, 6, 193],
    [e[10], 194,
     0, 195],
    [1, 6, 196],
    [1, 6, 191],
    [3, "keyword", e[9], 197],
    [1, 6, 198],
    [3, "def", e[10], 195,
     0, 195],
    [3, "variable", e[10], 200],
    [1, 6, 201],
    [",", 202,
     0, -1],
    [1, 6, 203],
    [3, "variable", e[10], 204,
     0, 204],
    [1, 6, 201],
    ["(", 206,
     "[", 207,
     3, "def", e[10], 214],
    [1, 6, 208],
    [1, 6, 209],
    [1, 205, 210],
    [1, 205, 211],
    [1, 6, 212],
    [1, 6, 213],
    [")", 214],
    ["]", 214],
    [1, 6, 215],
    [",", 216,
     0, -1],
    [1, 6, 217],
    [1, 205, -1],
    [2, 276, -1, {"name":"ParenExpr"},
     2, 281, -1, {"name":"ArrayLiteral"},
     2, 286, -1, {"name":"ObjectLiteral"},
     3, "number", e[23], -1,
     0, 219,
     3, "operator", "...", -1,
     3, "atom", e[24], -1,
     3, "atom", e[25], -1,
     3, "keyword", e[26], 222,
     3, "keyword", e[27], 226,
     3, "builtin", e[28], -1,
     3, "variable callee", e[31], -1,
     3, "variable", e[10], -1],
    [2, 53, 220, {"name":"string","token":"string"}],
    [1, 6, 221],
    [0, 219,
     0, -1],
    [1, 6, 223],
    [3, "keyword", e[19], 224,
     1, 107, -1,
     0, -1],
    [1, 6, 225],
    [1, 107, -1],
    [1, 6, 227],
    [2, 293, -1, {"name":"LambdaDef"}],
    [3, "operator", e[29], 229,
     3, "keyword", e[30], 229,
     2, 128, -1, {"name":"ArgList"},
     2, 298, -1, {"name":"Subscript"},
     ".", 231,
     3, "keyword", e[0], 233],
    [1, 6, 230],
    [1, 107, -1],
    [1, 6, 232],
    [3, "property callee", e[31], -1,
     3, "property", e[10], -1],
    [1, 6, 234],
    [1, 107, 235],
    [1, 6, 236],
    [3, "keyword", e[2], 237,
     0, -1],
    [1, 6, 238],
    [1, 107, -1],
    ["\n", 240],
    [/^[ \t]/, 240,
     3, "comment", /^\#.*/, 240,
     "\n", 240,
     e[32], 241],
    [2, 9, 242, {"name":"Statement"}],
    [/^[ \t]/, 242,
     3, "comment", /^\#.*/, 242,
     "\n", 242,
     0, 243],
    [0, 244,
     0, -1],
    [e[32], 241],
    [1, 205, 246],
    [1, 6, 247],
    [3, "keyword", e[8], -1],
    [3, "operator", e[21], 249,
     3, "keyword", e[22], 249,
     1, 218, 250],
    [1, 6, 248],
    [1, 6, 251],
    [1, 303, 252,
     0, -1],
    [1, 6, 251],
    [3, "variable-2", e[34], 254,
     3, "operator", "**", 255,
     3, "meta", e[33], 256,
     0, 255],
    [1, 6, 257],
    [1, 6, 258],
    [1, 6, 259],
    [1, 314, 260,
     0, 260],
    [1, 264, 260],
    ["=", 255],
    [1, 6, 261],
    [",", 262,
     1, 325, -1,
     0, -1],
    [1, 6, 263],
    [1, 337, -1,
     0, -1],
    [3, "operator", e[21], 265,
     3, "keyword", e[22], 265,
     1, 218, 266],
    [1, 6, 264],
    [1, 6, 267],
    [1, 314, 268,
     3, "keyword", e[8], 269,
     0, -1],
    [1, 6, 267],
    [1, 6, 270],
    [1, 107, 268],
    ["(", 272],
    [1, 6, 273],
    [1, 351, 274,
     0, 274],
    [1, 6, 275],
    [")", -1],
    ["(", 277],
    [1, 6, 278],
    [1, 377, 279,
     0, 279],
    [1, 6, 280],
    [")", -1],
    ["[", 282],
    [1, 6, 283],
    [1, 377, 284,
     0, 284],
    [1, 6, 285],
    ["]", -1],
    ["{", 287],
    [1, 6, 288],
    [1, 384, 289,
     0, 291],
    [1, 6, 290],
    [1, 325, 291,
     0, 291],
    [1, 6, 292],
    ["}", -1],
    [1, 390, 294,
     0, 294],
    [1, 6, 295],
    [":", 296],
    [1, 6, 297],
    [1, 264, -1],
    ["[", 299],
    [1, 6, 300],
    [1, 408, 301],
    [1, 6, 302],
    ["]", -1],
    [3, "operator", e[29], 304,
     3, "keyword", e[30], 304,
     2, 128, -1, {"name":"ArgList"},
     2, 298, -1, {"name":"Subscript"},
     ".", 306,
     3, "keyword", e[0], 308],
    [1, 6, 305],
    [1, 248, -1],
    [1, 6, 307],
    [3, "property callee", e[31], -1,
     3, "property", e[10], -1],
    [1, 6, 309],
    [1, 248, 310],
    [1, 6, 311],
    [3, "keyword", e[2], 312,
     0, -1],
    [1, 6, 313],
    [1, 248, -1],
    [3, "operator", e[29], 315,
     3, "keyword", e[30], 315,
     2, 128, -1, {"name":"ArgList"},
     2, 298, -1, {"name":"Subscript"},
     ".", 317,
     3, "keyword", e[0], 319],
    [1, 6, 316],
    [1, 264, -1],
    [1, 6, 318],
    [3, "property callee", e[31], -1,
     3, "property", e[10], -1],
    [1, 6, 320],
    [1, 264, 321],
    [1, 6, 322],
    [3, "keyword", e[2], 323,
     0, -1],
    [1, 6, 324],
    [1, 264, -1],
    [3, "keyword", e[6], 326,
     0, 326],
    [1, 6, 327],
    [3, "keyword", e[4], 328],
    [1, 6, 329],
    [[5, 245], 330,
     1, 248, 331],
    [1, 205, 331],
    [1, 6, 332],
    [3, "keyword", e[8], 333],
    [1, 6, 334],
    [1, 107, 335],
    [1, 6, 336],
    [1, 325, -1,
     1, 434, -1,
     0, -1],
    [3, "operator", "**", 338,
     3, "meta", e[33], 339,
     0, 338],
    [1, 6, 340],
    [1, 6, 341],
    [1, 264, 342],
    ["=", 338],
    [1, 6, 343],
    [",", 344,
     0, -1],
    [1, 6, 345],
    [3, "operator", "**", 346,
     3, "meta", e[33], 347,
     0, 346,
     0, 348],
    [1, 6, 349],
    [1, 6, 350],
    [1, 6, 343],
    [1, 264, 348],
    ["=", 346],
    [2, 439, 352, {"name":"op","token":"operator"},
     0, 352],
    [1, 6, 353],
    [3, "atom", e[25], 354,
     3, "def", e[10], 354],
    [1, 6, 355],
    [":", 356,
     0, 357],
    [1, 6, 358],
    [1, 6, 359],
    [1, 264, 357],
    [3, "operator", "=", 360,
     0, 362],
    [1, 6, 361],
    [1, 264, 362],
    [1, 6, 363],
    [",", 364,
     0, -1],
    [1, 6, 365],
    [2, 439, 366, {"name":"op","token":"operator"},
     0, 366,
     0, 367],
    [1, 6, 368],
    [1, 6, 363],
    [3, "atom", e[25], 369,
     3, "def", e[10], 369],
    [1, 6, 370],
    [":", 371,
     0, 372],
    [1, 6, 373],
    [1, 6, 374],
    [1, 264, 372],
    [3, "operator", "=", 375,
     0, 367],
    [1, 6, 376],
    [1, 264, 367],
    [3, "variable-2", e[34], 378,
     1, 264, 380],
    [1, 6, 379],
    [1, 314, 380,
     0, 380],
    [1, 6, 381],
    [",", 382,
     1, 325, -1,
     0, -1],
    [1, 6, 383],
    [1, 442, -1,
     0, -1],
    [2, 448, 385, {"name":"DictProp"}],
    [1, 6, 386],
    [",", 387,
     0, -1],
    [1, 6, 388],
    [2, 448, 389, {"name":"DictProp"},
     0, 389],
    [1, 6, 386],
    [3, "operator", e[35], 391,
     0, 391],
    [1, 6, 392],
    [3, "def", e[10], 393],
    [1, 6, 394],
    [3, "operator", "=", 395,
     0, 397],
    [1, 6, 396],
    [1, 264, 397],
    [1, 6, 398],
    [",", 399,
     0, -1],
    [1, 6, 400],
    [3, "operator", e[35], 401,
     0, 401,
     0, 402],
    [1, 6, 403],
    [1, 6, 398],
    [3, "def", e[10], 404],
    [1, 6, 405],
    [3, "operator", "=", 406,
     0, 402],
    [1, 6, 407],
    [1, 264, 402],
    [1, 264, 409,
     ":", 410],
    [1, 6, 411],
    [1, 6, 412],
    [":", 413,
     0, 419],
    [1, 264, 414,
     0, 414],
    [1, 6, 415],
    [1, 6, 416],
    [1, 264, 419,
     0, 419],
    [":", 417,
     0, 419],
    [1, 6, 418],
    [1, 264, 419,
     0, 419],
    [1, 6, 420],
    [",", 421,
     0, -1],
    [1, 6, 422],
    [1, 264, 423,
     ":", 424,
     0, 425],
    [1, 6, 426],
    [1, 6, 427],
    [1, 6, 420],
    [":", 428,
     0, 425],
    [1, 264, 429,
     0, 429],
    [1, 6, 430],
    [1, 6, 431],
    [1, 264, 425,
     0, 425],
    [":", 432,
     0, 425],
    [1, 6, 433],
    [1, 264, 425,
     0, 425],
    [3, "keyword", e[0], 435],
    [1, 6, 436],
    [1, 107, 437],
    [1, 6, 438],
    [1, 325, -1,
     1, 434, -1,
     0, -1],
    ["*", 440],
    [1, 6, 441],
    [/^\*?/, -1],
    [1, 264, 443],
    [1, 6, 444],
    [",", 445,
     0, -1],
    [1, 6, 446],
    [1, 264, 447,
     0, 447],
    [1, 6, 444],
    [3, "operator", "**", 449,
     1, 264, 451],
    [1, 6, 450],
    [1, 264, -1],
    [1, 6, 452],
    [":", 453,
     0, -1],
    [1, 6, 454],
    [1, 264, -1]
  ];
  var start = 0;
  var token = 5;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var scopes = ["LambdaDef", "FuncDef", "ClassDef"];
  var allowNewline = ["ArgList", "ParamList", "ParenExpr", "ArrayLiteral", "ObjectLiteral", "SubScript", "DictProp"];

  function maySkipNewline(_line, _pos, cx) {
    return cx && allowNewline.indexOf(cx.name) > -1
  }

  function countIndent(line, pos) {
    var count = 0;
    for (var i = pos - 1; i >= 0; i--) {
      var ch = line.charCodeAt(i);
      if (ch === 32) { count++; }
      else if (ch === 9) { count += 4; }
      else { break }
    }
    return count
  }

  function stillIndented(line, pos, cx) {
    while (cx && cx.name != "Statement") { cx = cx.parent; }
    return cx && countIndent(line, pos) > countIndent(cx.startLine, cx.startPos)
  }

  function isCompLocal(line, pos) {
    var id = /\w*$/.exec(line.slice(0, pos))[0];
    var forDecl = /\s*for\s*(\w+)/.exec(line.slice(pos));
    return forDecl ? forDecl[1] == id : false
  }

  function aligned(cx) {
    return !/^\s*((#.*)?$)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    ObjectLiteral: "}",
    ArrayLiteral: "]", SubScript: "]",
    ParamList: ")", ArgList: ")", ParenExpr: ")"
  };

  function findIndent(cx, textAfter, curLine, config) {
    if (!cx) { return 0 }
    if (cx.name == "string") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    if (brack) {
      if (curLine != cx.startLine && aligned(cx))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 1 }

      var closed = textAfter && textAfter.charAt(0) == brack;
      var flat = closed && brack != ")" || curLine == cx.startLine;
      return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) + (flat ? 0 : 2 * config.indentUnit)
    } else if (cx.name == "indentedBody") {
      for (;; cx = cx.parent) {
        if (!cx) { return config.indentUnit }
        if (cx.name == "Statement") { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + config.indentUnit }
      }
    } else {
      return findIndent(cx.parent, textAfter, curLine, config) +
        ((cx.name == "DictProp" || cx.name == "Statement") && cx.startLine != curLine ? 2 * config.indentUnit : 0)
    }
  }

  function pythonMarkLocals(token$$1, stream, state) {
    var marked = markLocals(token$$1, scopes, stream, state);
    if (token$$1 == "def") {
      var cx = state.context;
      while (cx && scopes.indexOf(cx.name) == -1) { cx = cx.parent; }
      if (cx && cx.name == "ClassDef") { marked = "def property"; }
      else if (marked == "def local") { marked = "variable-2"; }
    }
    return marked
  }  

  var PythonMode = (function (superclass) {
    function PythonMode(conf) {
      superclass.call(this, grammar, {
        predicates: {maySkipNewline: maySkipNewline, stillIndented: stillIndented, isCompLocal: isCompLocal}
      });
      this.conf = conf;
    }

    if ( superclass ) PythonMode.__proto__ = superclass;
    PythonMode.prototype = Object.create( superclass && superclass.prototype );
    PythonMode.prototype.constructor = PythonMode;

    PythonMode.prototype.token = function token$$1 (stream, state) {
      return pythonMarkLocals(superclass.prototype.token.call(this, stream, state), stream, state)
    };

    PythonMode.prototype.indent = function indent (state, textAfter, line) {
      return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, this.conf)
    };

    return PythonMode;
  }(CodeMirror.GrammarMode));

  PythonMode.prototype.electricInput = /^\s*[\}\]\)]$/;
  PythonMode.prototype.closeBrackets = {triples: "'\""};
  PythonMode.prototype.lineComment = "#";
  PythonMode.prototype.fold = "indent";

  CodeMirror.defineMode("google-python", function (conf) { return new PythonMode(conf); });

})));
