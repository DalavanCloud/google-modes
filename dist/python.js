(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^if(?![a-zA-Z¡-￿_0-9_])/, /^(?:while|elif)(?![a-zA-Z¡-￿_0-9_])/, /^else(?![a-zA-Z¡-￿_0-9_])/, /^(?:try|finally)(?![a-zA-Z¡-￿_0-9_])/, /^for(?![a-zA-Z¡-￿_0-9_])/, /^except(?![a-zA-Z¡-￿_0-9_])/, /^async(?![a-zA-Z¡-￿_0-9_])/, /^print(?![a-zA-Z¡-￿_0-9_])/, /^in(?![a-zA-Z¡-￿_0-9_])/, /^as(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*/, /^with(?![a-zA-Z¡-￿_0-9_])/, /^def(?![a-zA-Z¡-￿_0-9_])/, /^class(?![a-zA-Z¡-￿_0-9_])/, /^(?:pass|break|continue)(?![a-zA-Z¡-￿_0-9_])/, /^del(?![a-zA-Z¡-￿_0-9_])/, /^(?:return|assert)(?![a-zA-Z¡-￿_0-9_])/, /^raise(?![a-zA-Z¡-￿_0-9_])/, /^import(?![a-zA-Z¡-￿_0-9_])/, /^from(?![a-zA-Z¡-￿_0-9_])/, /^(?:global|nonlocal)(?![a-zA-Z¡-￿_0-9_])/, /^[\*\+\-\~]/, /^(?:not|await)(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?![a-zA-Z¡-￿_0-9_])(?= *(?:\, *[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?![a-zA-Z¡-￿_0-9_]) *)*(?:\=|in(?![a-zA-Z¡-￿_0-9_])))/, /^(?:(?:0b|OB)[01_]+|(?:0o|0O)[0-7_]+|(?:0x|OX)[0-9a-fA-F_]+|(?:[0-9][0-9_]*(?:l|L|\.[0-9_]+)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?[jJ]?)/, /^(?:None|True|False)(?![a-zA-Z¡-￿_0-9_])/, /^self(?![a-zA-Z¡-￿_0-9_])/, /^yield(?![a-zA-Z¡-￿_0-9_])/, /^lambda(?![a-zA-Z¡-￿_0-9_])/, /^(?:abs|all|any|bin|bool|bytearray|callable|chr|classmethod|compile|complex|delattr|dict|dir|divmod|enumerate|eval|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|isinstance|issubclass|iter|len|list|locals|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|vars|zip|__import__|NotImplemented|Ellipsis|__debug__|ascii|bytes|exec|print)(?![a-zA-Z¡-￿_0-9_])/, /^(?:(?:\^|\&|\||\<\<|\>\>|\+|\-|\*\*?|\@|\/|\%|\/)\=?|\=|\<|\>|\=\=|\>\=|\<\=|\<\>|\!\=)/, /^(?:or|and|in|is(?: +not)?|not(?: +in)?)(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?=\()/, [7, "stillIndented"], /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\=)/, [0, /^[a-zA-Z¡-￿__]/, /^[a-zA-Z¡-￿_0-9_]*/, [7, "isCompLocal"]], /^(?:\*|\*\*)/];
  var nodes = [
    [1, 6, 2],
    [/^[^]/, 0],
    [1, 6, 3],
    ["\n", 4,
     2, 9, 4, {"name":"Statement"},
     0, 1],
    [1, 6, 3],
    [3, "keyword", e[0], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[27], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[22], -1,
     3, "atom", e[25], -1,
     3, "atom", e[26], -1,
     3, "keyword", e[31], -1,
     3, "builtin", e[29], -1,
     3, "builtin", e[7], -1,
     3, "operator", e[30], -1,
     3, "operator", e[21], -1,
     3, "number", e[24], -1,
     2, 53, -1, {"name":"string","token":"string"},
     3, "variable", e[10], -1,
     3, "comment", /^\#.*/, -1,
     /^[^]/, -1],
    [/^[ \t]/, 6,
     3, "comment", /^\#.*/, 6,
     "\\", 7,
     [0, /^(?=\n)/, [7, "maySkipNewline"]], 8,
     0, -1],
    ["\n", 6],
    ["\n", 6],
    [3, "keyword", e[0], 10,
     3, "keyword", e[1], 10,
     3, "keyword", e[2], 16,
     3, "keyword", e[3], 16,
     3, "keyword", e[4], 20,
     3, "keyword", e[5], 30,
     3, "keyword", e[6], 40,
     1, 55, -1,
     2, 68, 42, {"name":"Annotation","token":"meta"},
     3, "builtin", e[7], 46,
     1, 76, 48],
    [1, 6, 11],
    [1, 106, 12],
    [1, 6, 13],
    [":", 14],
    [1, 6, 15],
    [1, 113, -1],
    [1, 6, 17],
    [":", 18],
    [1, 6, 19],
    [1, 113, -1],
    [1, 6, 21],
    [1, 119, 22],
    [1, 6, 23],
    [3, "keyword", e[8], 24],
    [1, 6, 25],
    [1, 106, 26],
    [1, 6, 27],
    [":", 28],
    [1, 6, 29],
    [1, 113, -1],
    [1, 6, 31],
    [1, 106, 32,
     0, 33],
    [1, 6, 34],
    [1, 6, 35],
    [3, "keyword", e[9], 36,
     0, 33],
    [":", 37],
    [1, 6, 38],
    [1, 6, 39],
    [3, "def", e[10], 33],
    [1, 113, -1],
    [1, 6, 41],
    [1, 55, -1],
    [1, 6, 43],
    [2, 125, 44, {"name":"ArgList"},
     0, 44],
    [1, 6, 45],
    ["\n", -1],
    [1, 6, 47],
    [2, 125, -1, {"name":"ArgList"},
     1, 106, -1],
    [1, 6, 49],
    [";", 50,
     "\n", -1],
    [1, 6, 51],
    [1, 76, 52,
     0, 52],
    [1, 6, 49],
    [/^[uUrRfFbB]+(?=[\'\"])/, 54,
     1, 130, -1],
    [1, 130, -1],
    [3, "keyword", e[11], 56,
     3, "keyword", e[12], 62,
     3, "keyword", e[13], 66],
    [1, 6, 57],
    [1, 135, 58],
    [1, 6, 59],
    [":", 60],
    [1, 6, 61],
    [1, 113, -1],
    [1, 6, 63],
    [3, "def", e[10], 64],
    [1, 6, 65],
    [2, 149, -1, {"name":"FuncDef"}],
    [1, 6, 67],
    [2, 158, -1, {"name":"ClassDef"}],
    ["@", 69],
    [1, 6, 70],
    [e[10], 71],
    [1, 6, 72],
    [".", 73,
     0, -1],
    [1, 6, 74],
    [e[10], 75],
    [1, 6, 72],
    [3, "keyword", e[14], -1,
     3, "keyword", e[15], 77,
     3, "keyword", e[16], 79,
     3, "keyword", e[17], 81,
     3, "keyword", e[18], 87,
     3, "keyword", e[19], 89,
     3, "keyword", e[20], 100,
     1, 165, 102,
     1, 106, -1],
    [1, 6, 78],
    [1, 106, -1],
    [1, 6, 80],
    [1, 106, -1,
     0, -1],
    [1, 6, 82],
    [1, 106, 83,
     0, 83],
    [1, 6, 84],
    [3, "keyword", e[19], 85,
     0, -1],
    [1, 6, 86],
    [1, 106, -1],
    [1, 6, 88],
    [1, 135, -1],
    [1, 6, 90],
    [".", 91,
     1, 106, 92,
     0, 92],
    [1, 6, 90],
    [1, 6, 93],
    [3, "keyword", e[18], 94],
    [1, 6, 95],
    ["*", -1,
     "(", 96,
     1, 171, -1],
    [1, 6, 97],
    [1, 185, 98,
     0, 98],
    [1, 6, 99],
    [")", -1],
    [1, 6, 101],
    [1, 199, -1],
    [1, 6, 103],
    [3, "operator", "=", 104],
    [1, 6, 105],
    [1, 106, -1],
    [3, "operator", e[21], 107,
     3, "keyword", e[22], 107,
     1, 205, 108],
    [1, 6, 106],
    [1, 6, 109],
    [1, 215, 110,
     3, "keyword", e[8], 111,
     ",", 111,
     0, -1],
    [1, 6, 109],
    [1, 6, 112],
    [1, 106, 110],
    [1, 76, 114,
     2, 226, -1, {"name":"indentedBody"}],
    [1, 6, 115],
    [";", 116,
     "\n", -1],
    [1, 6, 117],
    [1, 76, 118,
     0, 118],
    [1, 6, 115],
    [3, "def", e[23], 120,
     1, 232, 120],
    [1, 6, 121],
    [",", 122,
     0, -1],
    [1, 6, 123],
    [3, "def", e[23], 124,
     1, 232, 124,
     0, 124],
    [1, 6, 121],
    ["(", 126],
    [1, 6, 127],
    [1, 237, 128,
     0, 128],
    [1, 6, 129],
    [")", -1],
    ["'''", 131,
     "\"\"\"", 133,
     /^(?:\'(?:\\.|(?!\').)*\'|\"(?:\\.|(?!\").)*\")/, -1],
    ["\\", 132,
     [0, /^(?!\'\'\')/, /^[^]/], 131,
     "'''", -1],
    [/^[^]/, 131],
    ["\\", 134,
     [0, /^(?!\"\"\")/, /^[^]/], 133,
     "\"\"\"", -1],
    [/^[^]/, 133],
    [1, 248, 136],
    [1, 6, 137],
    [3, "keyword", e[9], 138,
     0, 140],
    [1, 6, 139],
    [3, "def", e[10], 140],
    [1, 6, 141],
    [",", 142,
     0, -1],
    [1, 6, 143],
    [1, 248, 144,
     0, 145],
    [1, 6, 146],
    [1, 6, 141],
    [3, "keyword", e[9], 147,
     0, 145],
    [1, 6, 148],
    [3, "def", e[10], 145],
    [2, 255, 150, {"name":"ParamList"}],
    [1, 6, 151],
    ["->", 152,
     0, 154],
    [1, 6, 153],
    [1, 106, 154],
    [1, 6, 155],
    [":", 156],
    [1, 6, 157],
    [1, 113, -1],
    [3, "type def", e[10], 159],
    [1, 6, 160],
    [2, 125, 161, {"name":"ArgList"},
     0, 161],
    [1, 6, 162],
    [":", 163],
    [1, 6, 164],
    [1, 113, -1],
    [3, "def", e[23], 166],
    [1, 6, 167],
    [",", 168,
     0, -1],
    [1, 6, 169],
    [3, "def", e[23], 170,
     0, 170],
    [1, 6, 167],
    [e[10], 172],
    [1, 6, 173],
    [3, "keyword", e[9], 174,
     0, 176],
    [1, 6, 175],
    [3, "def", e[10], 176],
    [1, 6, 177],
    [",", 178,
     0, -1],
    [1, 6, 179],
    [e[10], 180,
     0, 181],
    [1, 6, 182],
    [1, 6, 177],
    [3, "keyword", e[9], 183,
     0, 181],
    [1, 6, 184],
    [3, "def", e[10], 181],
    [e[10], 186],
    [1, 6, 187],
    [3, "keyword", e[9], 188],
    [1, 6, 189],
    [3, "def", e[10], 190,
     0, 190],
    [1, 6, 191],
    [",", 192,
     0, -1],
    [1, 6, 193],
    [e[10], 194,
     0, 195],
    [1, 6, 196],
    [1, 6, 191],
    [3, "keyword", e[9], 197],
    [1, 6, 198],
    [3, "def", e[10], 195,
     0, 195],
    [3, "variable", e[10], 200],
    [1, 6, 201],
    [",", 202,
     0, -1],
    [1, 6, 203],
    [3, "variable", e[10], 204,
     0, 204],
    [1, 6, 201],
    [2, 260, -1, {"name":"ParenExpr"},
     2, 265, -1, {"name":"ArrayLiteral"},
     2, 270, -1, {"name":"ObjectLiteral"},
     3, "number", e[24], -1,
     0, 206,
     3, "operator", "...", -1,
     3, "atom", e[25], -1,
     3, "atom", e[26], -1,
     3, "keyword", e[27], 209,
     3, "keyword", e[28], 213,
     3, "builtin", e[29], -1,
     3, "variable callee", e[32], -1,
     3, "variable", e[10], -1],
    [2, 53, 207, {"name":"string","token":"string"}],
    [1, 6, 208],
    [0, 206,
     0, -1],
    [1, 6, 210],
    [3, "keyword", e[19], 211,
     1, 106, -1,
     0, -1],
    [1, 6, 212],
    [1, 106, -1],
    [1, 6, 214],
    [2, 277, -1, {"name":"LambdaDef"}],
    [3, "operator", e[30], 216,
     3, "keyword", e[31], 216,
     2, 125, -1, {"name":"ArgList"},
     2, 282, -1, {"name":"Subscript"},
     ".", 218,
     3, "keyword", e[0], 220],
    [1, 6, 217],
    [1, 106, -1],
    [1, 6, 219],
    [3, "property callee", e[32], -1,
     3, "property", e[10], -1],
    [1, 6, 221],
    [1, 106, 222],
    [1, 6, 223],
    [3, "keyword", e[2], 224,
     0, -1],
    [1, 6, 225],
    [1, 106, -1],
    ["\n", 227],
    [/^[ \t]/, 227,
     3, "comment", /^\#.*/, 227,
     "\n", 227,
     e[33], 228],
    [2, 9, 229, {"name":"Statement"}],
    [/^[ \t]/, 229,
     3, "comment", /^\#.*/, 229,
     "\n", 229,
     0, 230],
    [0, 231,
     0, -1],
    [e[33], 228],
    [3, "operator", e[21], 233,
     3, "keyword", e[22], 233,
     1, 205, 234],
    [1, 6, 232],
    [1, 6, 235],
    [1, 287, 236,
     0, -1],
    [1, 6, 235],
    [3, "variable-2", e[35], 238,
     3, "operator", "**", 239,
     3, "meta", e[34], 240,
     0, 239],
    [1, 6, 241],
    [1, 6, 242],
    [1, 6, 243],
    [1, 298, 244,
     0, 244],
    [1, 248, 244],
    ["=", 239],
    [1, 6, 245],
    [",", 246,
     1, 309, -1,
     0, -1],
    [1, 6, 247],
    [1, 320, -1,
     0, -1],
    [3, "operator", e[21], 249,
     3, "keyword", e[22], 249,
     1, 205, 250],
    [1, 6, 248],
    [1, 6, 251],
    [1, 298, 252,
     3, "keyword", e[8], 253,
     0, -1],
    [1, 6, 251],
    [1, 6, 254],
    [1, 106, 252],
    ["(", 256],
    [1, 6, 257],
    [1, 334, 258,
     0, 258],
    [1, 6, 259],
    [")", -1],
    ["(", 261],
    [1, 6, 262],
    [1, 360, 263,
     0, 263],
    [1, 6, 264],
    [")", -1],
    ["[", 266],
    [1, 6, 267],
    [1, 360, 268,
     0, 268],
    [1, 6, 269],
    ["]", -1],
    ["{", 271],
    [1, 6, 272],
    [1, 367, 273,
     0, 275],
    [1, 6, 274],
    [1, 309, 275,
     0, 275],
    [1, 6, 276],
    ["}", -1],
    [1, 373, 278,
     0, 278],
    [1, 6, 279],
    [":", 280],
    [1, 6, 281],
    [1, 248, -1],
    ["[", 283],
    [1, 6, 284],
    [1, 391, 285],
    [1, 6, 286],
    ["]", -1],
    [3, "operator", e[30], 288,
     3, "keyword", e[31], 288,
     2, 125, -1, {"name":"ArgList"},
     2, 282, -1, {"name":"Subscript"},
     ".", 290,
     3, "keyword", e[0], 292],
    [1, 6, 289],
    [1, 232, -1],
    [1, 6, 291],
    [3, "property callee", e[32], -1,
     3, "property", e[10], -1],
    [1, 6, 293],
    [1, 232, 294],
    [1, 6, 295],
    [3, "keyword", e[2], 296,
     0, -1],
    [1, 6, 297],
    [1, 232, -1],
    [3, "operator", e[30], 299,
     3, "keyword", e[31], 299,
     2, 125, -1, {"name":"ArgList"},
     2, 282, -1, {"name":"Subscript"},
     ".", 301,
     3, "keyword", e[0], 303],
    [1, 6, 300],
    [1, 248, -1],
    [1, 6, 302],
    [3, "property callee", e[32], -1,
     3, "property", e[10], -1],
    [1, 6, 304],
    [1, 248, 305],
    [1, 6, 306],
    [3, "keyword", e[2], 307,
     0, -1],
    [1, 6, 308],
    [1, 248, -1],
    [3, "keyword", e[6], 310,
     0, 310],
    [1, 6, 311],
    [3, "keyword", e[4], 312],
    [1, 6, 313],
    [1, 119, 314],
    [1, 6, 315],
    [3, "keyword", e[8], 316],
    [1, 6, 317],
    [1, 106, 318],
    [1, 6, 319],
    [1, 309, -1,
     1, 417, -1,
     0, -1],
    [3, "operator", "**", 321,
     3, "meta", e[34], 322,
     0, 321],
    [1, 6, 323],
    [1, 6, 324],
    [1, 248, 325],
    ["=", 321],
    [1, 6, 326],
    [",", 327,
     0, -1],
    [1, 6, 328],
    [3, "operator", "**", 329,
     3, "meta", e[34], 330,
     0, 329,
     0, 331],
    [1, 6, 332],
    [1, 6, 333],
    [1, 6, 326],
    [1, 248, 331],
    ["=", 329],
    [2, 422, 335, {"name":"op","token":"operator"},
     0, 335],
    [1, 6, 336],
    [3, "atom", e[26], 337,
     3, "def", e[10], 337],
    [1, 6, 338],
    [":", 339,
     0, 340],
    [1, 6, 341],
    [1, 6, 342],
    [1, 248, 340],
    [3, "operator", "=", 343,
     0, 345],
    [1, 6, 344],
    [1, 248, 345],
    [1, 6, 346],
    [",", 347,
     0, -1],
    [1, 6, 348],
    [2, 422, 349, {"name":"op","token":"operator"},
     0, 349,
     0, 350],
    [1, 6, 351],
    [1, 6, 346],
    [3, "atom", e[26], 352,
     3, "def", e[10], 352],
    [1, 6, 353],
    [":", 354,
     0, 355],
    [1, 6, 356],
    [1, 6, 357],
    [1, 248, 355],
    [3, "operator", "=", 358,
     0, 350],
    [1, 6, 359],
    [1, 248, 350],
    [3, "variable-2", e[35], 361,
     1, 248, 363],
    [1, 6, 362],
    [1, 298, 363,
     0, 363],
    [1, 6, 364],
    [",", 365,
     1, 309, -1,
     0, -1],
    [1, 6, 366],
    [1, 425, -1,
     0, -1],
    [2, 431, 368, {"name":"DictProp"}],
    [1, 6, 369],
    [",", 370,
     0, -1],
    [1, 6, 371],
    [2, 431, 372, {"name":"DictProp"},
     0, 372],
    [1, 6, 369],
    [3, "operator", e[36], 374,
     0, 374],
    [1, 6, 375],
    [3, "def", e[10], 376],
    [1, 6, 377],
    [3, "operator", "=", 378,
     0, 380],
    [1, 6, 379],
    [1, 248, 380],
    [1, 6, 381],
    [",", 382,
     0, -1],
    [1, 6, 383],
    [3, "operator", e[36], 384,
     0, 384,
     0, 385],
    [1, 6, 386],
    [1, 6, 381],
    [3, "def", e[10], 387],
    [1, 6, 388],
    [3, "operator", "=", 389,
     0, 385],
    [1, 6, 390],
    [1, 248, 385],
    [1, 248, 392,
     ":", 393],
    [1, 6, 394],
    [1, 6, 395],
    [":", 396,
     0, 402],
    [1, 248, 397,
     0, 397],
    [1, 6, 398],
    [1, 6, 399],
    [1, 248, 402,
     0, 402],
    [":", 400,
     0, 402],
    [1, 6, 401],
    [1, 248, 402,
     0, 402],
    [1, 6, 403],
    [",", 404,
     0, -1],
    [1, 6, 405],
    [1, 248, 406,
     ":", 407,
     0, 408],
    [1, 6, 409],
    [1, 6, 410],
    [1, 6, 403],
    [":", 411,
     0, 408],
    [1, 248, 412,
     0, 412],
    [1, 6, 413],
    [1, 6, 414],
    [1, 248, 408,
     0, 408],
    [":", 415,
     0, 408],
    [1, 6, 416],
    [1, 248, 408,
     0, 408],
    [3, "keyword", e[0], 418],
    [1, 6, 419],
    [1, 106, 420],
    [1, 6, 421],
    [1, 309, -1,
     1, 417, -1,
     0, -1],
    ["*", 423],
    [1, 6, 424],
    [/^\*?/, -1],
    [1, 248, 426],
    [1, 6, 427],
    [",", 428,
     0, -1],
    [1, 6, 429],
    [1, 248, 430,
     0, 430],
    [1, 6, 427],
    [3, "operator", "**", 432,
     1, 248, 434],
    [1, 6, 433],
    [1, 248, -1],
    [1, 6, 435],
    [":", 436,
     0, -1],
    [1, 6, 437],
    [1, 248, -1]
  ];
  var start = 0;
  var token = 5;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var scopes = ["LambdaDef", "FuncDef", "ClassDef"];
  var allowNewline = ["ArgList", "ParamList", "ParenExpr", "ArrayLiteral", "ObjectLiteral", "SubScript", "DictProp"];

  function maySkipNewline(_line, _pos, cx) {
    return cx && allowNewline.indexOf(cx.name) > -1
  }

  function countIndent(line, pos) {
    var count = 0;
    for (var i = pos - 1; i >= 0; i--) {
      var ch = line.charCodeAt(i);
      if (ch === 32) { count++; }
      else if (ch === 9) { count += 4; }
      else { break }
    }
    return count
  }

  function stillIndented(line, pos, cx) {
    while (cx && cx.name != "Statement") { cx = cx.parent; }
    return cx && countIndent(line, pos) > countIndent(cx.startLine, cx.startPos)
  }

  function isCompLocal(line, pos) {
    var id = /\w*$/.exec(line.slice(0, pos))[0];
    var forDecl = /\s*for\s*(\w+)/.exec(line.slice(pos));
    return forDecl ? forDecl[1] == id : false
  }

  function aligned(cx) {
    return !/^\s*((#.*)?$)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    ObjectLiteral: "}",
    ArrayLiteral: "]", SubScript: "]",
    ParamList: ")", ArgList: ")", ParenExpr: ")"
  };

  function findIndent(cx, textAfter, curLine, config) {
    if (!cx) { return 0 }
    if (cx.name == "string") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    if (brack) {
      if (curLine != cx.startLine && aligned(cx))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 1 }

      var closed = textAfter && textAfter.charAt(0) == brack;
      var flat = closed && brack != ")" || curLine == cx.startLine;
      return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) + (flat ? 0 : 2 * config.indentUnit)
    } else if (cx.name == "indentedBody") {
      for (;; cx = cx.parent) {
        if (!cx) { return config.indentUnit }
        if (cx.name == "Statement") { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + config.indentUnit }
      }
    } else {
      return findIndent(cx.parent, textAfter, curLine, config) +
        ((cx.name == "DictProp" || cx.name == "Statement") && cx.startLine != curLine ? 2 * config.indentUnit : 0)
    }
  }

  function pythonMarkLocals(token$$1, stream, state) {
    var marked = markLocals(token$$1, scopes, stream, state);
    if (token$$1 == "def") {
      var cx = state.context;
      while (cx && scopes.indexOf(cx.name) == -1) { cx = cx.parent; }
      if (cx && cx.name == "ClassDef") { marked = "def property"; }
      else if (marked == "def local") { marked = "variable-2"; }
    }
    return marked
  }  

  var PythonMode = (function (superclass) {
    function PythonMode(conf) {
      superclass.call(this, grammar, {
        predicates: {maySkipNewline: maySkipNewline, stillIndented: stillIndented, isCompLocal: isCompLocal}
      });
      this.conf = conf;
    }

    if ( superclass ) PythonMode.__proto__ = superclass;
    PythonMode.prototype = Object.create( superclass && superclass.prototype );
    PythonMode.prototype.constructor = PythonMode;

    PythonMode.prototype.token = function token$$1 (stream, state) {
      return pythonMarkLocals(superclass.prototype.token.call(this, stream, state), stream, state)
    };

    PythonMode.prototype.indent = function indent (state, textAfter, line) {
      return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, this.conf)
    };

    return PythonMode;
  }(CodeMirror.GrammarMode));

  PythonMode.prototype.electricInput = /^\s*[\}\]\)]$/;
  PythonMode.prototype.closeBrackets = {triples: "'\""};
  PythonMode.prototype.lineComment = "#";
  PythonMode.prototype.fold = "indent";

  CodeMirror.defineMode("google-python", function (conf) { return new PythonMode(conf); });

})));
